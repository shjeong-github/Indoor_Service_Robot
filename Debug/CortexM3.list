
CortexM3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009904  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009a18  08009a18  00019a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f2c  08009f2c  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08009f2c  08009f2c  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f2c  08009f2c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a5c  20000238  0800a16c  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  0800a16c  00020c94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014268  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ef  00000000  00000000  000344c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000378b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00038868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a752  00000000  00000000  000396d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001223f  00000000  00000000  00053e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc3e  00000000  00000000  00066061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  000f3cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	080099fc 	.word	0x080099fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	080099fc 	.word	0x080099fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2uiz>:
 80010e4:	0042      	lsls	r2, r0, #1
 80010e6:	d20e      	bcs.n	8001106 <__aeabi_f2uiz+0x22>
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30b      	bcc.n	8001106 <__aeabi_f2uiz+0x22>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d409      	bmi.n	800110c <__aeabi_f2uiz+0x28>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	fa23 f002 	lsr.w	r0, r3, r2
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2uiz+0x32>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d102      	bne.n	800111c <__aeabi_f2uiz+0x38>
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	4770      	bx	lr
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	460c      	mov	r4, r1
 8001128:	4605      	mov	r5, r0
 800112a:	4621      	mov	r1, r4
 800112c:	4628      	mov	r0, r5
 800112e:	2200      	movs	r2, #0
 8001130:	2300      	movs	r3, #0
 8001132:	f7ff fc43 	bl	80009bc <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff f9b9 	bl	80004d8 <__aeabi_dmul>
 8001166:	f7ff fc79 	bl	8000a5c <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f93a 	bl	80003e4 <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff f9b0 	bl	80004d8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7fe fff2 	bl	8000168 <__aeabi_dsub>
 8001184:	f7ff fc6a 	bl	8000a5c <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f000 fd87 	bl	8001cac <HAL_Init>
  /* Configure the system clock */
  System_Clock_Config();
 800119e:	f004 fc7a 	bl	8005a96 <System_Clock_Config>

  /* USER CODE BEGIN Init */
  LED_Init();
 80011a2:	f003 fdb7 	bl	8004d14 <LED_Init>
  Timer_Init();
 80011a6:	f004 fcc1 	bl	8005b2c <Timer_Init>
  Segment_Init();
 80011aa:	f004 f939 	bl	8005420 <Segment_Init>
  QEP_Init();
 80011ae:	f004 f88f 	bl	80052d0 <QEP_Init>
  PWM_Init(60000, 60000);
 80011b2:	f64e 2160 	movw	r1, #60000	; 0xea60
 80011b6:	f64e 2060 	movw	r0, #60000	; 0xea60
 80011ba:	f003 fe11 	bl	8004de0 <PWM_Init>
  //PWM_Init(20000); 기존에 쓰던 코드
  PWM_Open(0,0);
 80011be:	f04f 0100 	mov.w	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f003 ff50 	bl	8005068 <PWM_Open>
  //PWM_Open(0,3.5);
  Serial1_Init();
 80011c8:	f004 fa78 	bl	80056bc <Serial1_Init>
  Serial2_Init();
 80011cc:	f004 faa2 	bl	8005714 <Serial2_Init>
  //PWM_Open(0,15);
  //PWM_Open(0,15);
  //PWM_Open(0,15);
  Serial_Open(0,115200,Serial_callback);
 80011d0:	4a38      	ldr	r2, [pc, #224]	; (80012b4 <main+0x120>)
 80011d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80011d6:	2000      	movs	r0, #0
 80011d8:	f004 fac8 	bl	800576c <Serial_Open>
  Serial_Open(1,115200,Serial_callback2);
 80011dc:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <main+0x124>)
 80011de:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80011e2:	2001      	movs	r0, #1
 80011e4:	f004 fac2 	bl	800576c <Serial_Open>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */


  //LED interrupt
  Alarm_Open(ALARM4,1000,Blink);
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <main+0x128>)
 80011ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ee:	2004      	movs	r0, #4
 80011f0:	f004 fd08 	bl	8005c04 <Alarm_Open>

  //Segment interrupt
  Alarm_Open(ALARM1,5,Segment_Power_ON);
 80011f4:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <main+0x12c>)
 80011f6:	2105      	movs	r1, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	f004 fd03 	bl	8005c04 <Alarm_Open>
  //qep interrupt
  //Alarm_Open(ALARM2,5,QEP_Read);
  Alarm_Open(ALARM3,1000,Encoder_Data_Send_Segment);
 80011fe:	4a31      	ldr	r2, [pc, #196]	; (80012c4 <main+0x130>)
 8001200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001204:	2003      	movs	r0, #3
 8001206:	f004 fcfd 	bl	8005c04 <Alarm_Open>
  // Alarm_Open(ALARM4,500,Counter);
  //Alarm_Open(ALARM6,SERIAL_BUFFER_SIZE,Serial_Packet);
  Alarm_Open(ALARM5,100,GPS_Serial_Packet );
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <main+0x134>)
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	2005      	movs	r0, #5
 8001210:	f004 fcf8 	bl	8005c04 <Alarm_Open>
 //Alarm_Open(ALARM6,1000,GPS_Serial_Send );
  //Alarm_Open(ALARM6,SERIAL_BUFFER_SIZE,test_dynamix);
  //HAL_UART_Transmit(&huart2, "Start1OK\n", 10, 100);
  HAL_UART_Transmit(&huart3, "Start2OK\n", 10, 100);
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	220a      	movs	r2, #10
 8001218:	492c      	ldr	r1, [pc, #176]	; (80012cc <main+0x138>)
 800121a:	482d      	ldr	r0, [pc, #180]	; (80012d0 <main+0x13c>)
 800121c:	f002 fe6e 	bl	8003efc <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //PWM angle test2
  //float i=5.5;
  uint8_t id =0x03 , param_address =0x1E;
 8001220:	2303      	movs	r3, #3
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	231e      	movs	r3, #30
 8001226:	73bb      	strb	r3, [r7, #14]
  uint16_t param1 =0x200, param2 = 0x200;
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	81bb      	strh	r3, [r7, #12]
 800122e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001232:	817b      	strh	r3, [r7, #10]
  uint16_t param3=0x200, param4=0x200;
 8001234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001238:	813b      	strh	r3, [r7, #8]
 800123a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123e:	80fb      	strh	r3, [r7, #6]
	 //param1=Rx1_Array[2];
	 //param2=Rx1_Array[3];
	 //param3 = 0x0200;
	 //param4 = 0x0200;
	 //READ_DATA_Instruct(&dynamix_buffer, id,param_address,param1);
	 param3=0x200;
 8001240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001244:	813b      	strh	r3, [r7, #8]
	 param4=0x200;
 8001246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124a:	80fb      	strh	r3, [r7, #6]
	 WRITE_DATA_Instruct(&dynamix_buffer,id,param_address,param3,param4);
 800124c:	8938      	ldrh	r0, [r7, #8]
 800124e:	7bba      	ldrb	r2, [r7, #14]
 8001250:	7bf9      	ldrb	r1, [r7, #15]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4603      	mov	r3, r0
 8001258:	481e      	ldr	r0, [pc, #120]	; (80012d4 <main+0x140>)
 800125a:	f003 fb39 	bl	80048d0 <WRITE_DATA_Instruct>
	 //SYNC_WRITE_Instruct(&dynamix_buffer,0x1E,0x00,0x010,0x150,0x01,0x220,0x360,0x02,0x030,0x170,0x03,0x220,0x380);
	 Serial_Send(0,&dynamix_buffer,11);
 800125e:	220b      	movs	r2, #11
 8001260:	491c      	ldr	r1, [pc, #112]	; (80012d4 <main+0x140>)
 8001262:	2000      	movs	r0, #0
 8001264:	f004 fb54 	bl	8005910 <Serial_Send>
	 Serial_Send(1,&dynamix_buffer,11);
 8001268:	220b      	movs	r2, #11
 800126a:	491a      	ldr	r1, [pc, #104]	; (80012d4 <main+0x140>)
 800126c:	2001      	movs	r0, #1
 800126e:	f004 fb4f 	bl	8005910 <Serial_Send>
	 HAL_Delay(3000);
 8001272:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001276:	f000 fd7b 	bl	8001d70 <HAL_Delay>
	 param3=0x20;
 800127a:	2320      	movs	r3, #32
 800127c:	813b      	strh	r3, [r7, #8]
	 param4=0x200;
 800127e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001282:	80fb      	strh	r3, [r7, #6]
	 WRITE_DATA_Instruct(&dynamix_buffer,id,param_address,param3,param4);
 8001284:	8938      	ldrh	r0, [r7, #8]
 8001286:	7bba      	ldrb	r2, [r7, #14]
 8001288:	7bf9      	ldrb	r1, [r7, #15]
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4603      	mov	r3, r0
 8001290:	4810      	ldr	r0, [pc, #64]	; (80012d4 <main+0x140>)
 8001292:	f003 fb1d 	bl	80048d0 <WRITE_DATA_Instruct>
	 Serial_Send(0,&dynamix_buffer,11);
 8001296:	220b      	movs	r2, #11
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <main+0x140>)
 800129a:	2000      	movs	r0, #0
 800129c:	f004 fb38 	bl	8005910 <Serial_Send>
	 Serial_Send(1,&dynamix_buffer,11);
 80012a0:	220b      	movs	r2, #11
 80012a2:	490c      	ldr	r1, [pc, #48]	; (80012d4 <main+0x140>)
 80012a4:	2001      	movs	r0, #1
 80012a6:	f004 fb33 	bl	8005910 <Serial_Send>
	 HAL_Delay(3000);
 80012aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012ae:	f000 fd5f 	bl	8001d70 <HAL_Delay>
	 param3=0x200;
 80012b2:	e7c5      	b.n	8001240 <main+0xac>
 80012b4:	08001979 	.word	0x08001979
 80012b8:	080019ed 	.word	0x080019ed
 80012bc:	080012d9 	.word	0x080012d9
 80012c0:	0800557d 	.word	0x0800557d
 80012c4:	0800130d 	.word	0x0800130d
 80012c8:	0800132d 	.word	0x0800132d
 80012cc:	08009a18 	.word	0x08009a18
 80012d0:	20000304 	.word	0x20000304
 80012d4:	20000258 	.word	0x20000258

080012d8 <Blink>:




void Blink(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	static uint8_t flag = 1;

	if(flag == 0)
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <Blink+0x30>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d107      	bne.n	80012f4 <Blink+0x1c>
	{
		LED_On_Unit(2,LED_ON);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2002      	movs	r0, #2
 80012e8:	f003 fd4a 	bl	8004d80 <LED_On_Unit>
 		flag = 1;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <Blink+0x30>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
	{
		LED_On_Unit(2,LED_OFF);

		flag = 0;
	}
}
 80012f2:	e006      	b.n	8001302 <Blink+0x2a>
		LED_On_Unit(2,LED_OFF);
 80012f4:	2101      	movs	r1, #1
 80012f6:	2002      	movs	r0, #2
 80012f8:	f003 fd42 	bl	8004d80 <LED_On_Unit>
		flag = 0;
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <Blink+0x30>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000001 	.word	0x20000001

0800130c <Encoder_Data_Send_Segment>:
	// 세그먼트 출력
	Segment_Set_Value(u16_count);
}

void Encoder_Data_Send_Segment(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	// 엔코더 현재 카운트값 확인
	uint16_t encoder_value = QEP_Get();
 8001312:	f003 ffd1 	bl	80052b8 <QEP_Get>
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	// 세그먼트 출력
	Segment_Set_Value(encoder_value);
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f004 f91d 	bl	800555c <Segment_Set_Value>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <GPS_Serial_Packet>:
float start_point_x =0;
float start_point_y =0;


void GPS_Serial_Packet(void)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	f2ad 7d24 	subw	sp, sp, #1828	; 0x724
 8001332:	af00      	add	r7, sp, #0
	uint8_t Gindex=0;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 371f 	strb.w	r3, [r7, #1823]	; 0x71f
	//uint8_t Gindex_Save_Point_Dot[3] = {0,};
	//uint8_t dot_index =0;
	uint8_t serial_buffer[SERIAL_BUFFER_SIZE]={0,};
 800133a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	3304      	adds	r3, #4
 8001344:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fd1c 	bl	8005d88 <memset>
	uint8_t test_buf[20]={0,};
 8001350:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	3304      	adds	r3, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
	uint8_t Gps_buffer[60] = {0,};
 8001364:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	3304      	adds	r3, #4
 800136e:	2238      	movs	r2, #56	; 0x38
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f004 fd08 	bl	8005d88 <memset>
	uint8_t Latitude_dec[10] ={0,};
 8001378:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	3304      	adds	r3, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	809a      	strh	r2, [r3, #4]
	uint8_t Latitude_decimal[100] = {'0',};
 8001388:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800138c:	2230      	movs	r2, #48	; 0x30
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	3304      	adds	r3, #4
 8001392:	2260      	movs	r2, #96	; 0x60
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f004 fcf6 	bl	8005d88 <memset>
	uint8_t Hardness_dec[10] ={0,};
 800139c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	809a      	strh	r2, [r3, #4]
	uint8_t Hardness_decimal[100] = {'0',};
 80013ac:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80013b0:	2230      	movs	r2, #48	; 0x30
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2260      	movs	r2, #96	; 0x60
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 fce4 	bl	8005d88 <memset>
	uint8_t GPS_Point_Index[9] ={0,};
 80013c0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	711a      	strb	r2, [r3, #4]
	uint8_t Latitude_buffer[10]={0,};
 80013d0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	3304      	adds	r3, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	809a      	strh	r2, [r3, #4]
	uint8_t Hardness_buffer[10]={0,};
 80013e0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	809a      	strh	r2, [r3, #4]
	uint8_t distance_buffer_x[100] ={'0',};
 80013f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013f4:	2230      	movs	r2, #48	; 0x30
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2260      	movs	r2, #96	; 0x60
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fcc2 	bl	8005d88 <memset>
	uint8_t distance_buffer_y[100] ={'0',};
 8001404:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001408:	2230      	movs	r2, #48	; 0x30
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	2260      	movs	r2, #96	; 0x60
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fcb8 	bl	8005d88 <memset>
	//uint8_t Latitude_String;
	//uint8_t Hardness_String;
	uint8_t Hardness_distance_buf[100] = {0,};
 8001418:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	3304      	adds	r3, #4
 8001422:	2260      	movs	r2, #96	; 0x60
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f004 fcae 	bl	8005d88 <memset>
	uint8_t Latitude_distance_buf[100] = {0,};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	3304      	adds	r3, #4
 8001436:	2260      	movs	r2, #96	; 0x60
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fca4 	bl	8005d88 <memset>


	float Latitude1=0;
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
	float Hardness1=0;
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
	float Latitude1_dec = 0;
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
	float Latitude1_decimal = 0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
	float Hardness1_dec = 0;
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
	float Hardness1_decimal = 0;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
	float Latitude2=36.83369; //37.565577
 8001470:	4b84      	ldr	r3, [pc, #528]	; (8001684 <GPS_Serial_Packet+0x358>)
 8001472:	f8c7 36f0 	str.w	r3, [r7, #1776]	; 0x6f0
	float Hardness2=127.18081; //126.978082
 8001476:	4b84      	ldr	r3, [pc, #528]	; (8001688 <GPS_Serial_Packet+0x35c>)
 8001478:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
	float gps_coordinate[2] = {0,};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	461a      	mov	r2, r3
 8001480:	2300      	movs	r3, #0
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	6053      	str	r3, [r2, #4]
	double distance1 = 0;
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8001492:	e9c1 2300 	strd	r2, r3, [r1]
	float Hardness_distance=0;
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
	float Latitude_distance=0;
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
	float move_distance_x =0;
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
	float move_distance_y =0;
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714

	if(GPS_Rx1_Flag ==1 && GPS_Rx1_Flag1==1)
 80014b6:	4b75      	ldr	r3, [pc, #468]	; (800168c <GPS_Serial_Packet+0x360>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	f040 8243 	bne.w	8001946 <GPS_Serial_Packet+0x61a>
 80014c0:	4b73      	ldr	r3, [pc, #460]	; (8001690 <GPS_Serial_Packet+0x364>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	f040 823e 	bne.w	8001946 <GPS_Serial_Packet+0x61a>
	{
		for(uint8_t i = 0; i<strlen(Rx1_Array);i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3713 	strb.w	r3, [r7, #1811]	; 0x713
 80014d0:	e00d      	b.n	80014ee <GPS_Serial_Packet+0x1c2>
		{
			serial_buffer[i] = Rx1_Array[i];
 80014d2:	f897 2713 	ldrb.w	r2, [r7, #1811]	; 0x713
 80014d6:	f897 3713 	ldrb.w	r3, [r7, #1811]	; 0x713
 80014da:	496e      	ldr	r1, [pc, #440]	; (8001694 <GPS_Serial_Packet+0x368>)
 80014dc:	5c89      	ldrb	r1, [r1, r2]
 80014de:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80014e2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i<strlen(Rx1_Array);i++)
 80014e4:	f897 3713 	ldrb.w	r3, [r7, #1811]	; 0x713
 80014e8:	3301      	adds	r3, #1
 80014ea:	f887 3713 	strb.w	r3, [r7, #1811]	; 0x713
 80014ee:	f897 4713 	ldrb.w	r4, [r7, #1811]	; 0x713
 80014f2:	4868      	ldr	r0, [pc, #416]	; (8001694 <GPS_Serial_Packet+0x368>)
 80014f4:	f7fe fe2c 	bl	8000150 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d3e9      	bcc.n	80014d2 <GPS_Serial_Packet+0x1a6>
		}
		Checksum_GPS(serial_buffer, GPS_Point_Index);
 80014fe:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8001502:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fb2a 	bl	8004b62 <Checksum_GPS>
		if(serial_buffer[GPS_Point_Index[1]] == 'V')
 800150e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	461a      	mov	r2, r3
 8001516:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800151a:	5c9b      	ldrb	r3, [r3, r2]
 800151c:	2b56      	cmp	r3, #86	; 0x56
 800151e:	d105      	bne.n	800152c <GPS_Serial_Packet+0x200>
		{
			Serial_Send(0,"not_real_data\n",15);
 8001520:	220f      	movs	r2, #15
 8001522:	495d      	ldr	r1, [pc, #372]	; (8001698 <GPS_Serial_Packet+0x36c>)
 8001524:	2000      	movs	r0, #0
 8001526:	f004 f9f3 	bl	8005910 <Serial_Send>
 800152a:	e206      	b.n	800193a <GPS_Serial_Packet+0x60e>
		}
		else if(serial_buffer[GPS_Point_Index[1]] == 'A')
 800152c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	461a      	mov	r2, r3
 8001534:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001538:	5c9b      	ldrb	r3, [r3, r2]
 800153a:	2b41      	cmp	r3, #65	; 0x41
 800153c:	f040 81fd 	bne.w	800193a <GPS_Serial_Packet+0x60e>
		{
			serial_flag =1;
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <GPS_Serial_Packet+0x370>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
			if(serial_buffer[GPS_Point_Index[4]] == 'N')
 8001546:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	461a      	mov	r2, r3
 800154e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001552:	5c9b      	ldrb	r3, [r3, r2]
 8001554:	2b4e      	cmp	r3, #78	; 0x4e
 8001556:	d150      	bne.n	80015fa <GPS_Serial_Packet+0x2ce>
			{
				for(uint8_t i= GPS_Point_Index[2]+1 ;i<GPS_Point_Index[3]; i++ )
 8001558:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800155c:	789b      	ldrb	r3, [r3, #2]
 800155e:	3301      	adds	r3, #1
 8001560:	f887 3712 	strb.w	r3, [r7, #1810]	; 0x712
 8001564:	e012      	b.n	800158c <GPS_Serial_Packet+0x260>
				{
					Gps_buffer[Gindex++] = serial_buffer[i];
 8001566:	f897 2712 	ldrb.w	r2, [r7, #1810]	; 0x712
 800156a:	f897 371f 	ldrb.w	r3, [r7, #1823]	; 0x71f
 800156e:	1c59      	adds	r1, r3, #1
 8001570:	f887 171f 	strb.w	r1, [r7, #1823]	; 0x71f
 8001574:	4619      	mov	r1, r3
 8001576:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800157a:	5c9a      	ldrb	r2, [r3, r2]
 800157c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001580:	545a      	strb	r2, [r3, r1]
				for(uint8_t i= GPS_Point_Index[2]+1 ;i<GPS_Point_Index[3]; i++ )
 8001582:	f897 3712 	ldrb.w	r3, [r7, #1810]	; 0x712
 8001586:	3301      	adds	r3, #1
 8001588:	f887 3712 	strb.w	r3, [r7, #1810]	; 0x712
 800158c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001590:	78db      	ldrb	r3, [r3, #3]
 8001592:	f897 2712 	ldrb.w	r2, [r7, #1810]	; 0x712
 8001596:	429a      	cmp	r2, r3
 8001598:	d3e5      	bcc.n	8001566 <GPS_Serial_Packet+0x23a>
				}
				for(uint8_t j =0; j<Gindex; j++)
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3711 	strb.w	r3, [r7, #1809]	; 0x711
 80015a0:	e022      	b.n	80015e8 <GPS_Serial_Packet+0x2bc>
				{
					if(j == 0 || j == 1)
 80015a2:	f897 3711 	ldrb.w	r3, [r7, #1809]	; 0x711
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <GPS_Serial_Packet+0x286>
 80015aa:	f897 3711 	ldrb.w	r3, [r7, #1809]	; 0x711
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10a      	bne.n	80015c8 <GPS_Serial_Packet+0x29c>
					Latitude_dec[j] = Gps_buffer[j];
 80015b2:	f897 2711 	ldrb.w	r2, [r7, #1809]	; 0x711
 80015b6:	f897 3711 	ldrb.w	r3, [r7, #1809]	; 0x711
 80015ba:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 80015be:	5c89      	ldrb	r1, [r1, r2]
 80015c0:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80015c4:	54d1      	strb	r1, [r2, r3]
 80015c6:	e00a      	b.n	80015de <GPS_Serial_Packet+0x2b2>
					else
					Latitude_decimal[j-2] = Gps_buffer[j];
 80015c8:	f897 2711 	ldrb.w	r2, [r7, #1809]	; 0x711
 80015cc:	f897 3711 	ldrb.w	r3, [r7, #1809]	; 0x711
 80015d0:	3b02      	subs	r3, #2
 80015d2:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 80015d6:	5c89      	ldrb	r1, [r1, r2]
 80015d8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80015dc:	54d1      	strb	r1, [r2, r3]
				for(uint8_t j =0; j<Gindex; j++)
 80015de:	f897 3711 	ldrb.w	r3, [r7, #1809]	; 0x711
 80015e2:	3301      	adds	r3, #1
 80015e4:	f887 3711 	strb.w	r3, [r7, #1809]	; 0x711
 80015e8:	f897 2711 	ldrb.w	r2, [r7, #1809]	; 0x711
 80015ec:	f897 371f 	ldrb.w	r3, [r7, #1823]	; 0x71f
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3d6      	bcc.n	80015a2 <GPS_Serial_Packet+0x276>
				}
				Gindex =0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 371f 	strb.w	r3, [r7, #1823]	; 0x71f


			}
			if(serial_buffer[GPS_Point_Index[7]]=='E')
 80015fa:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80015fe:	79db      	ldrb	r3, [r3, #7]
 8001600:	461a      	mov	r2, r3
 8001602:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001606:	5c9b      	ldrb	r3, [r3, r2]
 8001608:	2b45      	cmp	r3, #69	; 0x45
 800160a:	d162      	bne.n	80016d2 <GPS_Serial_Packet+0x3a6>
			{
				for(uint8_t i= GPS_Point_Index[5]+1 ;i<GPS_Point_Index[6]; i++ )
 800160c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001610:	795b      	ldrb	r3, [r3, #5]
 8001612:	3301      	adds	r3, #1
 8001614:	f887 3710 	strb.w	r3, [r7, #1808]	; 0x710
 8001618:	e012      	b.n	8001640 <GPS_Serial_Packet+0x314>
				{
					Gps_buffer[Gindex++] = serial_buffer[i];
 800161a:	f897 2710 	ldrb.w	r2, [r7, #1808]	; 0x710
 800161e:	f897 371f 	ldrb.w	r3, [r7, #1823]	; 0x71f
 8001622:	1c59      	adds	r1, r3, #1
 8001624:	f887 171f 	strb.w	r1, [r7, #1823]	; 0x71f
 8001628:	4619      	mov	r1, r3
 800162a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800162e:	5c9a      	ldrb	r2, [r3, r2]
 8001630:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001634:	545a      	strb	r2, [r3, r1]
				for(uint8_t i= GPS_Point_Index[5]+1 ;i<GPS_Point_Index[6]; i++ )
 8001636:	f897 3710 	ldrb.w	r3, [r7, #1808]	; 0x710
 800163a:	3301      	adds	r3, #1
 800163c:	f887 3710 	strb.w	r3, [r7, #1808]	; 0x710
 8001640:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001644:	799b      	ldrb	r3, [r3, #6]
 8001646:	f897 2710 	ldrb.w	r2, [r7, #1808]	; 0x710
 800164a:	429a      	cmp	r2, r3
 800164c:	d3e5      	bcc.n	800161a <GPS_Serial_Packet+0x2ee>
				}
				for(uint8_t j =0;j<Gindex; j++)
 800164e:	2300      	movs	r3, #0
 8001650:	f887 370f 	strb.w	r3, [r7, #1807]	; 0x70f
 8001654:	e034      	b.n	80016c0 <GPS_Serial_Packet+0x394>
				{
					if(j == 0 || j == 1 || j ==2)
 8001656:	f897 370f 	ldrb.w	r3, [r7, #1807]	; 0x70f
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <GPS_Serial_Packet+0x342>
 800165e:	f897 370f 	ldrb.w	r3, [r7, #1807]	; 0x70f
 8001662:	2b01      	cmp	r3, #1
 8001664:	d003      	beq.n	800166e <GPS_Serial_Packet+0x342>
 8001666:	f897 370f 	ldrb.w	r3, [r7, #1807]	; 0x70f
 800166a:	2b02      	cmp	r3, #2
 800166c:	d118      	bne.n	80016a0 <GPS_Serial_Packet+0x374>
					Hardness_dec[j] = Gps_buffer[j];
 800166e:	f897 270f 	ldrb.w	r2, [r7, #1807]	; 0x70f
 8001672:	f897 370f 	ldrb.w	r3, [r7, #1807]	; 0x70f
 8001676:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 800167a:	5c89      	ldrb	r1, [r1, r2]
 800167c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001680:	54d1      	strb	r1, [r2, r3]
 8001682:	e018      	b.n	80016b6 <GPS_Serial_Packet+0x38a>
 8001684:	421355b3 	.word	0x421355b3
 8001688:	42fe5c93 	.word	0x42fe5c93
 800168c:	20000256 	.word	0x20000256
 8001690:	20000257 	.word	0x20000257
 8001694:	20000890 	.word	0x20000890
 8001698:	08009a24 	.word	0x08009a24
 800169c:	20000259 	.word	0x20000259
					else
					Hardness_decimal[j-3] = Gps_buffer[j];
 80016a0:	f897 270f 	ldrb.w	r2, [r7, #1807]	; 0x70f
 80016a4:	f897 370f 	ldrb.w	r3, [r7, #1807]	; 0x70f
 80016a8:	3b03      	subs	r3, #3
 80016aa:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 80016ae:	5c89      	ldrb	r1, [r1, r2]
 80016b0:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80016b4:	54d1      	strb	r1, [r2, r3]
				for(uint8_t j =0;j<Gindex; j++)
 80016b6:	f897 370f 	ldrb.w	r3, [r7, #1807]	; 0x70f
 80016ba:	3301      	adds	r3, #1
 80016bc:	f887 370f 	strb.w	r3, [r7, #1807]	; 0x70f
 80016c0:	f897 270f 	ldrb.w	r2, [r7, #1807]	; 0x70f
 80016c4:	f897 371f 	ldrb.w	r3, [r7, #1823]	; 0x71f
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3c4      	bcc.n	8001656 <GPS_Serial_Packet+0x32a>
				}
				Gindex =0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 371f 	strb.w	r3, [r7, #1823]	; 0x71f

			}


		//Serial_Send(0,Latitude_decimal,15);
		Latitude1_dec = atof(Latitude_dec);
 80016d2:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 faf5 	bl	8005cc6 <atof>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9da 	bl	8000a9c <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f8c7 3700 	str.w	r3, [r7, #1792]	; 0x700
		Latitude1_decimal = atof(Latitude_decimal);
 80016ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80016f2:	4618      	mov	r0, r3
 80016f4:	f004 fae7 	bl	8005cc6 <atof>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff f9cc 	bl	8000a9c <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
		//Serial_Send(0,Hardness_decimal,15);
		Hardness1_dec = atof(Hardness_dec);
 800170a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800170e:	4618      	mov	r0, r3
 8001710:	f004 fad9 	bl	8005cc6 <atof>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f9be 	bl	8000a9c <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
		Hardness1_decimal = atof(Hardness_decimal);
 8001726:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800172a:	4618      	mov	r0, r3
 800172c:	f004 facb 	bl	8005cc6 <atof>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff f9b0 	bl	8000a9c <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0
 800173e:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
		gcvt(Latitude1_decimal,15,test_buf);
 8001742:	f8d7 06fc 	ldr.w	r0, [r7, #1788]	; 0x6fc
 8001746:	f7fe fe6f 	bl	8000428 <__aeabi_f2d>
 800174a:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800174e:	220f      	movs	r2, #15
 8001750:	f004 fabc 	bl	8005ccc <gcvt>
		gcvt(Hardness1_decimal,15,test_buf);
 8001754:	f8d7 06f4 	ldr.w	r0, [r7, #1780]	; 0x6f4
 8001758:	f7fe fe66 	bl	8000428 <__aeabi_f2d>
 800175c:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001760:	220f      	movs	r2, #15
 8001762:	f004 fab3 	bl	8005ccc <gcvt>
		Latitude1_decimal = Latitude1_decimal /60.0;
 8001766:	497a      	ldr	r1, [pc, #488]	; (8001950 <GPS_Serial_Packet+0x624>)
 8001768:	f8d7 06fc 	ldr.w	r0, [r7, #1788]	; 0x6fc
 800176c:	f7ff fba8 	bl	8000ec0 <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
		Latitude1 = Latitude1_dec + Latitude1_decimal;
 8001776:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 800177a:	f8d7 0700 	ldr.w	r0, [r7, #1792]	; 0x700
 800177e:	f7ff f9e3 	bl	8000b48 <__addsf3>
 8001782:	4603      	mov	r3, r0
 8001784:	f8c7 3708 	str.w	r3, [r7, #1800]	; 0x708
		Hardness1_decimal =Hardness1_decimal /60.0;
 8001788:	4971      	ldr	r1, [pc, #452]	; (8001950 <GPS_Serial_Packet+0x624>)
 800178a:	f8d7 06f4 	ldr.w	r0, [r7, #1780]	; 0x6f4
 800178e:	f7ff fb97 	bl	8000ec0 <__aeabi_fdiv>
 8001792:	4603      	mov	r3, r0
 8001794:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
		Hardness1 = Hardness1_dec + Hardness1_decimal;
 8001798:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 800179c:	f8d7 06f8 	ldr.w	r0, [r7, #1784]	; 0x6f8
 80017a0:	f7ff f9d2 	bl	8000b48 <__addsf3>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
		Latitude_distance = Gps_Latitude_Distance_Cal(Latitude1,Latitude2);
 80017aa:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 80017ae:	f8d7 0708 	ldr.w	r0, [r7, #1800]	; 0x708
 80017b2:	f003 fa51 	bl	8004c58 <Gps_Latitude_Distance_Cal>
 80017b6:	f8c7 06d8 	str.w	r0, [r7, #1752]	; 0x6d8
		Hardness_distance = Gps_Hardness_Distance_Cal(Hardness1,Hardness2);
 80017ba:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 80017be:	f8d7 0704 	ldr.w	r0, [r7, #1796]	; 0x704
 80017c2:	f003 fa79 	bl	8004cb8 <Gps_Hardness_Distance_Cal>
 80017c6:	f8c7 06dc 	str.w	r0, [r7, #1756]	; 0x6dc


		if(point_flag != 2)
 80017ca:	4b62      	ldr	r3, [pc, #392]	; (8001954 <GPS_Serial_Packet+0x628>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d011      	beq.n	80017f6 <GPS_Serial_Packet+0x4ca>
		{

			move_distance_x = Gps_Latitude_Distance_Cal(start_point_x, Latitude1);
 80017d2:	4b61      	ldr	r3, [pc, #388]	; (8001958 <GPS_Serial_Packet+0x62c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 fa3c 	bl	8004c58 <Gps_Latitude_Distance_Cal>
 80017e0:	f8c7 0718 	str.w	r0, [r7, #1816]	; 0x718
			move_distance_y = Gps_Hardness_Distance_Cal(start_point_y, Hardness1);
 80017e4:	4b5d      	ldr	r3, [pc, #372]	; (800195c <GPS_Serial_Packet+0x630>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fa63 	bl	8004cb8 <Gps_Hardness_Distance_Cal>
 80017f2:	f8c7 0714 	str.w	r0, [r7, #1812]	; 0x714
		}

		if((point_flag ==2))
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <GPS_Serial_Packet+0x628>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d14f      	bne.n	800189e <GPS_Serial_Packet+0x572>
		{
			for(uint8_t i=0 ; i<100; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 370e 	strb.w	r3, [r7, #1806]	; 0x70e
 8001804:	e010      	b.n	8001828 <GPS_Serial_Packet+0x4fc>
			{
				distance_buffer_x[i] = '0';
 8001806:	f897 370e 	ldrb.w	r3, [r7, #1806]	; 0x70e
 800180a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800180e:	2130      	movs	r1, #48	; 0x30
 8001810:	54d1      	strb	r1, [r2, r3]
				distance_buffer_y[i] = '0';
 8001812:	f897 370e 	ldrb.w	r3, [r7, #1806]	; 0x70e
 8001816:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800181a:	2130      	movs	r1, #48	; 0x30
 800181c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0 ; i<100; i++)
 800181e:	f897 370e 	ldrb.w	r3, [r7, #1806]	; 0x70e
 8001822:	3301      	adds	r3, #1
 8001824:	f887 370e 	strb.w	r3, [r7, #1806]	; 0x70e
 8001828:	f897 370e 	ldrb.w	r3, [r7, #1806]	; 0x70e
 800182c:	2b63      	cmp	r3, #99	; 0x63
 800182e:	d9ea      	bls.n	8001806 <GPS_Serial_Packet+0x4da>
			}
			start_point_x = Latitude1;
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <GPS_Serial_Packet+0x62c>)
 8001832:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
 8001836:	6013      	str	r3, [r2, #0]
			start_point_y = Hardness1;
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <GPS_Serial_Packet+0x630>)
 800183a:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
 800183e:	6013      	str	r3, [r2, #0]
			gcvt(start_point_x,15,distance_buffer_x);
 8001840:	4b45      	ldr	r3, [pc, #276]	; (8001958 <GPS_Serial_Packet+0x62c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fdef 	bl	8000428 <__aeabi_f2d>
 800184a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800184e:	220f      	movs	r2, #15
 8001850:	f004 fa3c 	bl	8005ccc <gcvt>
			gcvt(start_point_y,15,distance_buffer_y);
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <GPS_Serial_Packet+0x630>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fde5 	bl	8000428 <__aeabi_f2d>
 800185e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001862:	220f      	movs	r2, #15
 8001864:	f004 fa32 	bl	8005ccc <gcvt>
			Serial_Send(1,"x0\n",4);
 8001868:	2204      	movs	r2, #4
 800186a:	493d      	ldr	r1, [pc, #244]	; (8001960 <GPS_Serial_Packet+0x634>)
 800186c:	2001      	movs	r0, #1
 800186e:	f004 f84f 	bl	8005910 <Serial_Send>
			Serial_Send(1,distance_buffer_x,15);
 8001872:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001876:	220f      	movs	r2, #15
 8001878:	4619      	mov	r1, r3
 800187a:	2001      	movs	r0, #1
 800187c:	f004 f848 	bl	8005910 <Serial_Send>
			Serial_Send(1,"y0\n",4);
 8001880:	2204      	movs	r2, #4
 8001882:	4938      	ldr	r1, [pc, #224]	; (8001964 <GPS_Serial_Packet+0x638>)
 8001884:	2001      	movs	r0, #1
 8001886:	f004 f843 	bl	8005910 <Serial_Send>
			Serial_Send(1,distance_buffer_y,15);
 800188a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800188e:	220f      	movs	r2, #15
 8001890:	4619      	mov	r1, r3
 8001892:	2001      	movs	r0, #1
 8001894:	f004 f83c 	bl	8005910 <Serial_Send>
			point_flag =0;
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <GPS_Serial_Packet+0x628>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
		}
		if((move_distance_x !=0 && move_distance_y != 0))
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	f8d7 0718 	ldr.w	r0, [r7, #1816]	; 0x718
 80018a6:	f7ff fbeb 	bl	8001080 <__aeabi_fcmpeq>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d132      	bne.n	8001916 <GPS_Serial_Packet+0x5ea>
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	f8d7 0714 	ldr.w	r0, [r7, #1812]	; 0x714
 80018b8:	f7ff fbe2 	bl	8001080 <__aeabi_fcmpeq>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d129      	bne.n	8001916 <GPS_Serial_Packet+0x5ea>
		{
			gcvt(move_distance_x,15,distance_buffer_x);
 80018c2:	f8d7 0718 	ldr.w	r0, [r7, #1816]	; 0x718
 80018c6:	f7fe fdaf 	bl	8000428 <__aeabi_f2d>
 80018ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018ce:	220f      	movs	r2, #15
 80018d0:	f004 f9fc 	bl	8005ccc <gcvt>
			gcvt(move_distance_y,15,distance_buffer_y);
 80018d4:	f8d7 0714 	ldr.w	r0, [r7, #1812]	; 0x714
 80018d8:	f7fe fda6 	bl	8000428 <__aeabi_f2d>
 80018dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e0:	220f      	movs	r2, #15
 80018e2:	f004 f9f3 	bl	8005ccc <gcvt>
			Serial_Send(1,"x1\n",4);
 80018e6:	2204      	movs	r2, #4
 80018e8:	491f      	ldr	r1, [pc, #124]	; (8001968 <GPS_Serial_Packet+0x63c>)
 80018ea:	2001      	movs	r0, #1
 80018ec:	f004 f810 	bl	8005910 <Serial_Send>
			Serial_Send(1,distance_buffer_x,15);
 80018f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018f4:	220f      	movs	r2, #15
 80018f6:	4619      	mov	r1, r3
 80018f8:	2001      	movs	r0, #1
 80018fa:	f004 f809 	bl	8005910 <Serial_Send>
			Serial_Send(1,"y1\n",4);
 80018fe:	2204      	movs	r2, #4
 8001900:	491a      	ldr	r1, [pc, #104]	; (800196c <GPS_Serial_Packet+0x640>)
 8001902:	2001      	movs	r0, #1
 8001904:	f004 f804 	bl	8005910 <Serial_Send>
			Serial_Send(1,distance_buffer_y,15);
 8001908:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800190c:	220f      	movs	r2, #15
 800190e:	4619      	mov	r1, r3
 8001910:	2001      	movs	r0, #1
 8001912:	f003 fffd 	bl	8005910 <Serial_Send>

		}
		gcvt(Latitude_distance,15,Latitude_distance_buf);
 8001916:	f8d7 06d8 	ldr.w	r0, [r7, #1752]	; 0x6d8
 800191a:	f7fe fd85 	bl	8000428 <__aeabi_f2d>
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	220f      	movs	r2, #15
 8001924:	f004 f9d2 	bl	8005ccc <gcvt>
		gcvt(Hardness_distance,15,Hardness_distance_buf);
 8001928:	f8d7 06dc 	ldr.w	r0, [r7, #1756]	; 0x6dc
 800192c:	f7fe fd7c 	bl	8000428 <__aeabi_f2d>
 8001930:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001934:	220f      	movs	r2, #15
 8001936:	f004 f9c9 	bl	8005ccc <gcvt>
		}
		//Serial_Send(1,serial_buffer,60);
		GPS_Rx1_Flag = 0;
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <GPS_Serial_Packet+0x644>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
		GPS_Rx1_Flag1 = 0;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <GPS_Serial_Packet+0x648>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]

	}
}
 8001946:	bf00      	nop
 8001948:	f207 7724 	addw	r7, r7, #1828	; 0x724
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	42700000 	.word	0x42700000
 8001954:	20000000 	.word	0x20000000
 8001958:	2000025c 	.word	0x2000025c
 800195c:	20000260 	.word	0x20000260
 8001960:	08009a34 	.word	0x08009a34
 8001964:	08009a38 	.word	0x08009a38
 8001968:	08009a3c 	.word	0x08009a3c
 800196c:	08009a40 	.word	0x08009a40
 8001970:	20000256 	.word	0x20000256
 8001974:	20000257 	.word	0x20000257

08001978 <Serial_callback>:
	Serial_Send(1,Rx1_Array,40);
}


void Serial_callback(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	static uint8_t packet_count =0;
	// 시리얼 버퍼 공간 확인
	  if(Rx1_Index  == SERIAL_BUFFER_SIZE)
		  Rx1_Index =0; // 가득차면 초기화
	  // 시리얼 레지스터 버퍼 정보를 버퍼로 정보 전달
	  uint8_t get_char =  Serial_Data_GET(0);
 800197e:	2000      	movs	r0, #0
 8001980:	f003 ff98 	bl	80058b4 <Serial_Data_GET>
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
	  if(get_char == '$')
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b24      	cmp	r3, #36	; 0x24
 800198c:	d108      	bne.n	80019a0 <Serial_callback+0x28>
	  {
		  Rx1_Index = 0;
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <Serial_callback+0x60>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
		  GPS_Rx1_Flag = 1;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <Serial_callback+0x64>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
		  packet_count =0;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <Serial_callback+0x68>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
	  }
	  if(get_char =='*')
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b2a      	cmp	r3, #42	; 0x2a
 80019a4:	d105      	bne.n	80019b2 <Serial_callback+0x3a>
	  {
		 GPS_Rx1_Flag1 = 1;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <Serial_callback+0x6c>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
		 packet_count=2;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <Serial_callback+0x68>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
	  }
	  if(packet_count != 2)
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <Serial_callback+0x68>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d009      	beq.n	80019ce <Serial_callback+0x56>
	  {
		  Rx1_Array[Rx1_Index++] = get_char;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <Serial_callback+0x60>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	b2d1      	uxtb	r1, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <Serial_callback+0x60>)
 80019c4:	7011      	strb	r1, [r2, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <Serial_callback+0x70>)
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	5453      	strb	r3, [r2, r1]
	  }
	  //Rx1_Array[Rx1_Index++] = get_char;
	  //Rx2_Array[Rx1_Index++] = get_char;
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000254 	.word	0x20000254
 80019dc:	20000256 	.word	0x20000256
 80019e0:	20000264 	.word	0x20000264
 80019e4:	20000257 	.word	0x20000257
 80019e8:	20000890 	.word	0x20000890

080019ec <Serial_callback2>:

void Serial_callback2(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	// 시리얼 버퍼 공간 확인
	  if(Rx2_Index  == SERIAL_BUFFER_SIZE)
		  Rx2_Index =0; // 가득차면 초기화
	  // 시리얼 레지스터 버퍼 정보를 버퍼로 정보 전달
	  uint8_t get_char =  Serial_Data_GET(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f003 ff5e 	bl	80058b4 <Serial_Data_GET>
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
	  /*if(get_char == '$')
	  {
		  Rx2_Index = 0;
		  GPS_Rx2_Flag = 1;
	  }*/
	  Rx2_Array[Rx2_Index++] = get_char;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <Serial_callback2+0x2c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	b2d1      	uxtb	r1, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <Serial_callback2+0x2c>)
 8001a06:	7011      	strb	r1, [r2, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <Serial_callback2+0x30>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	5453      	strb	r3, [r2, r1]
	 // Serial_Send(1,Rx2_Array,10);
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000255 	.word	0x20000255
 8001a1c:	20000390 	.word	0x20000390

08001a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_MspInit+0x5c>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_MspInit+0x5c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6193      	str	r3, [r2, #24]
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_MspInit+0x5c>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_MspInit+0x5c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_MspInit+0x5c>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_MspInit+0x5c>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_MspInit+0x60>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_MspInit+0x60>)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f935 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
	return 1;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <_kill>:

int _kill(int pid, int sig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aea:	f004 f913 	bl	8005d14 <__errno>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2216      	movs	r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
	return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b12:	e7fe      	b.n	8001b12 <_exit+0x12>

08001b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e00a      	b.n	8001b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b26:	f3af 8000 	nop.w
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <_read+0x12>
	}

return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e009      	b.n	8001b74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf1      	blt.n	8001b60 <_write+0x12>
	}
	return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_close>:

int _close(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bac:	605a      	str	r2, [r3, #4]
	return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
	return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
	...

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f004 f87c 	bl	8005d14 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20005000 	.word	0x20005000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	20000268 	.word	0x20000268
 8001c50:	20000c98 	.word	0x20000c98

08001c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c62:	490d      	ldr	r1, [pc, #52]	; (8001c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c78:	4c0a      	ldr	r4, [pc, #40]	; (8001ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c86:	f7ff ffe5 	bl	8001c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f004 f849 	bl	8005d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c8e:	f7ff fa81 	bl	8001194 <main>
  bx lr
 8001c92:	4770      	bx	lr
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001c9c:	08009f34 	.word	0x08009f34
  ldr r2, =_sbss
 8001ca0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001ca4:	20000c94 	.word	0x20000c94

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_Init+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_Init+0x28>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f967 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff feaa 	bl	8001a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f97f 	bl	8001ffa <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 f947 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x1c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_IncTick+0x20>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_IncTick+0x20>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	2000000c 	.word	0x2000000c
 8001d58:	20000c78 	.word	0x20000c78

08001d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_GetTick+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000c78 	.word	0x20000c78

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffe0 	bl	8001d5c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000000c 	.word	0x2000000c

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4906      	ldr	r1, [pc, #24]	; (8001e50 <__NVIC_EnableIRQ+0x34>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0e      	blt.n	8001e84 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <__NVIC_GetActive+0x3c>)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	3380      	adds	r3, #128	; 0x80
 8001e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	e000      	b.n	8001e86 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8001e84:	2300      	movs	r3, #0
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff90 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff0d 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff22 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff90 	bl	8001ee8 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5f 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff15 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff17 	bl	8001e54 <__NVIC_GetActive>
 8002026:	4603      	mov	r3, r0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002042:	2b02      	cmp	r3, #2
 8002044:	d008      	beq.n	8002058 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2204      	movs	r2, #4
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e020      	b.n	800209a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020e 	bic.w	r2, r2, #14
 8002066:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d005      	beq.n	80020c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e051      	b.n	800216a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 020e 	bic.w	r2, r2, #14
 80020d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_DMA_Abort_IT+0xd0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d029      	beq.n	8002144 <HAL_DMA_Abort_IT+0xa0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a20      	ldr	r2, [pc, #128]	; (8002178 <HAL_DMA_Abort_IT+0xd4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d022      	beq.n	8002140 <HAL_DMA_Abort_IT+0x9c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_DMA_Abort_IT+0xd8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01a      	beq.n	800213a <HAL_DMA_Abort_IT+0x96>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_DMA_Abort_IT+0xdc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d012      	beq.n	8002134 <HAL_DMA_Abort_IT+0x90>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_DMA_Abort_IT+0xe0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00a      	beq.n	800212e <HAL_DMA_Abort_IT+0x8a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_DMA_Abort_IT+0xe4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d102      	bne.n	8002128 <HAL_DMA_Abort_IT+0x84>
 8002122:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002126:	e00e      	b.n	8002146 <HAL_DMA_Abort_IT+0xa2>
 8002128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800212c:	e00b      	b.n	8002146 <HAL_DMA_Abort_IT+0xa2>
 800212e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002132:	e008      	b.n	8002146 <HAL_DMA_Abort_IT+0xa2>
 8002134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002138:	e005      	b.n	8002146 <HAL_DMA_Abort_IT+0xa2>
 800213a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213e:	e002      	b.n	8002146 <HAL_DMA_Abort_IT+0xa2>
 8002140:	2310      	movs	r3, #16
 8002142:	e000      	b.n	8002146 <HAL_DMA_Abort_IT+0xa2>
 8002144:	2301      	movs	r3, #1
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_DMA_Abort_IT+0xe8>)
 8002148:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
    } 
  }
  return status;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40020008 	.word	0x40020008
 8002178:	4002001c 	.word	0x4002001c
 800217c:	40020030 	.word	0x40020030
 8002180:	40020044 	.word	0x40020044
 8002184:	40020058 	.word	0x40020058
 8002188:	4002006c 	.word	0x4002006c
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b08b      	sub	sp, #44	; 0x2c
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	e169      	b.n	8002478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a4:	2201      	movs	r2, #1
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8158 	bne.w	8002472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a9a      	ldr	r2, [pc, #616]	; (8002430 <HAL_GPIO_Init+0x2a0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d05e      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021cc:	4a98      	ldr	r2, [pc, #608]	; (8002430 <HAL_GPIO_Init+0x2a0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d875      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021d2:	4a98      	ldr	r2, [pc, #608]	; (8002434 <HAL_GPIO_Init+0x2a4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d058      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021d8:	4a96      	ldr	r2, [pc, #600]	; (8002434 <HAL_GPIO_Init+0x2a4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d86f      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021de:	4a96      	ldr	r2, [pc, #600]	; (8002438 <HAL_GPIO_Init+0x2a8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d052      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021e4:	4a94      	ldr	r2, [pc, #592]	; (8002438 <HAL_GPIO_Init+0x2a8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d869      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021ea:	4a94      	ldr	r2, [pc, #592]	; (800243c <HAL_GPIO_Init+0x2ac>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d04c      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021f0:	4a92      	ldr	r2, [pc, #584]	; (800243c <HAL_GPIO_Init+0x2ac>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d863      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021f6:	4a92      	ldr	r2, [pc, #584]	; (8002440 <HAL_GPIO_Init+0x2b0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d046      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021fc:	4a90      	ldr	r2, [pc, #576]	; (8002440 <HAL_GPIO_Init+0x2b0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d85d      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 8002202:	2b12      	cmp	r3, #18
 8002204:	d82a      	bhi.n	800225c <HAL_GPIO_Init+0xcc>
 8002206:	2b12      	cmp	r3, #18
 8002208:	d859      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <HAL_GPIO_Init+0x80>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	0800228b 	.word	0x0800228b
 8002214:	08002265 	.word	0x08002265
 8002218:	08002277 	.word	0x08002277
 800221c:	080022b9 	.word	0x080022b9
 8002220:	080022bf 	.word	0x080022bf
 8002224:	080022bf 	.word	0x080022bf
 8002228:	080022bf 	.word	0x080022bf
 800222c:	080022bf 	.word	0x080022bf
 8002230:	080022bf 	.word	0x080022bf
 8002234:	080022bf 	.word	0x080022bf
 8002238:	080022bf 	.word	0x080022bf
 800223c:	080022bf 	.word	0x080022bf
 8002240:	080022bf 	.word	0x080022bf
 8002244:	080022bf 	.word	0x080022bf
 8002248:	080022bf 	.word	0x080022bf
 800224c:	080022bf 	.word	0x080022bf
 8002250:	080022bf 	.word	0x080022bf
 8002254:	0800226d 	.word	0x0800226d
 8002258:	08002281 	.word	0x08002281
 800225c:	4a79      	ldr	r2, [pc, #484]	; (8002444 <HAL_GPIO_Init+0x2b4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002262:	e02c      	b.n	80022be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e029      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	3304      	adds	r3, #4
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e024      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	3308      	adds	r3, #8
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e01f      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	330c      	adds	r3, #12
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e01a      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002292:	2304      	movs	r3, #4
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e013      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a0:	2308      	movs	r3, #8
 80022a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	611a      	str	r2, [r3, #16]
          break;
 80022aa:	e009      	b.n	80022c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ac:	2308      	movs	r3, #8
 80022ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	615a      	str	r2, [r3, #20]
          break;
 80022b6:	e003      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
          break;
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          break;
 80022be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d801      	bhi.n	80022ca <HAL_GPIO_Init+0x13a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	e001      	b.n	80022ce <HAL_GPIO_Init+0x13e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2bff      	cmp	r3, #255	; 0xff
 80022d4:	d802      	bhi.n	80022dc <HAL_GPIO_Init+0x14c>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	e002      	b.n	80022e2 <HAL_GPIO_Init+0x152>
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	3b08      	subs	r3, #8
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	210f      	movs	r1, #15
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	401a      	ands	r2, r3
 80022f4:	6a39      	ldr	r1, [r7, #32]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80b1 	beq.w	8002472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002310:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <HAL_GPIO_Init+0x2b8>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <HAL_GPIO_Init+0x2b8>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_GPIO_Init+0x2b8>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002328:	4a48      	ldr	r2, [pc, #288]	; (800244c <HAL_GPIO_Init+0x2bc>)
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a40      	ldr	r2, [pc, #256]	; (8002450 <HAL_GPIO_Init+0x2c0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <HAL_GPIO_Init+0x1ec>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3f      	ldr	r2, [pc, #252]	; (8002454 <HAL_GPIO_Init+0x2c4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00d      	beq.n	8002378 <HAL_GPIO_Init+0x1e8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3e      	ldr	r2, [pc, #248]	; (8002458 <HAL_GPIO_Init+0x2c8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <HAL_GPIO_Init+0x1e4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3d      	ldr	r2, [pc, #244]	; (800245c <HAL_GPIO_Init+0x2cc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_GPIO_Init+0x1e0>
 800236c:	2303      	movs	r3, #3
 800236e:	e006      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 8002370:	2304      	movs	r3, #4
 8002372:	e004      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 8002374:	2302      	movs	r3, #2
 8002376:	e002      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 800237c:	2300      	movs	r3, #0
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	f002 0203 	and.w	r2, r2, #3
 8002384:	0092      	lsls	r2, r2, #2
 8002386:	4093      	lsls	r3, r2
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800238e:	492f      	ldr	r1, [pc, #188]	; (800244c <HAL_GPIO_Init+0x2bc>)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023a8:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	492c      	ldr	r1, [pc, #176]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	4928      	ldr	r1, [pc, #160]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d0:	4b23      	ldr	r3, [pc, #140]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4922      	ldr	r1, [pc, #136]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	491e      	ldr	r1, [pc, #120]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	4918      	ldr	r1, [pc, #96]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4914      	ldr	r1, [pc, #80]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 8002410:	4013      	ands	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d021      	beq.n	8002464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	490e      	ldr	r1, [pc, #56]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e021      	b.n	8002472 <HAL_GPIO_Init+0x2e2>
 800242e:	bf00      	nop
 8002430:	10320000 	.word	0x10320000
 8002434:	10310000 	.word	0x10310000
 8002438:	10220000 	.word	0x10220000
 800243c:	10210000 	.word	0x10210000
 8002440:	10120000 	.word	0x10120000
 8002444:	10110000 	.word	0x10110000
 8002448:	40021000 	.word	0x40021000
 800244c:	40010000 	.word	0x40010000
 8002450:	40010800 	.word	0x40010800
 8002454:	40010c00 	.word	0x40010c00
 8002458:	40011000 	.word	0x40011000
 800245c:	40011400 	.word	0x40011400
 8002460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_GPIO_Init+0x304>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	43db      	mvns	r3, r3
 800246c:	4909      	ldr	r1, [pc, #36]	; (8002494 <HAL_GPIO_Init+0x304>)
 800246e:	4013      	ands	r3, r2
 8002470:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	3301      	adds	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	fa22 f303 	lsr.w	r3, r2, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	f47f ae8e 	bne.w	80021a4 <HAL_GPIO_Init+0x14>
  }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	372c      	adds	r7, #44	; 0x2c
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40010400 	.word	0x40010400

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024b4:	e003      	b.n	80024be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	041a      	lsls	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	611a      	str	r2, [r3, #16]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e26c      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e8:	4b92      	ldr	r3, [pc, #584]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d00c      	beq.n	800250e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024f4:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d112      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
 8002500:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d10b      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250e:	4b89      	ldr	r3, [pc, #548]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x12c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d168      	bne.n	80025f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e246      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x76>
 8002530:	4b80      	ldr	r3, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7f      	ldr	r2, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e02e      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7a      	ldr	r2, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b78      	ldr	r3, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e01d      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0xbc>
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002584:	4b6b      	ldr	r3, [pc, #428]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6a      	ldr	r2, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a67      	ldr	r2, [pc, #412]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fbda 	bl	8001d5c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff fbd6 	bl	8001d5c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e1fa      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0xe4>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fbc6 	bl	8001d5c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff fbc2 	bl	8001d5c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1e6      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x10c>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d063      	beq.n	80026ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002602:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11c      	bne.n	8002654 <HAL_RCC_OscConfig+0x18c>
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d116      	bne.n	8002654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x176>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e1ba      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4939      	ldr	r1, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	e03a      	b.n	80026ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCC_OscConfig+0x270>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff fb7b 	bl	8001d5c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff fb77 	bl	8001d5c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e19b      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4927      	ldr	r1, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	e015      	b.n	80026ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x270>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fb5a 	bl	8001d5c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7ff fb56 	bl	8001d5c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e17a      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d03a      	beq.n	800274c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_RCC_OscConfig+0x274>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7ff fb3a 	bl	8001d5c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7ff fb36 	bl	8001d5c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e15a      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_RCC_OscConfig+0x26c>)
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800270a:	2001      	movs	r0, #1
 800270c:	f000 fad8 	bl	8002cc0 <RCC_Delay>
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_OscConfig+0x274>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7ff fb20 	bl	8001d5c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271e:	e00f      	b.n	8002740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff fb1c 	bl	8001d5c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d908      	bls.n	8002740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e140      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	42420000 	.word	0x42420000
 800273c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e9      	bne.n	8002720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a6 	beq.w	80028a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b97      	ldr	r3, [pc, #604]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a93      	ldr	r2, [pc, #588]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b91      	ldr	r3, [pc, #580]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002786:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d118      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002792:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a8a      	ldr	r2, [pc, #552]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279e:	f7ff fadd 	bl	8001d5c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7ff fad9 	bl	8001d5c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	; 0x64
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0fd      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x312>
 80027cc:	4b7b      	ldr	r3, [pc, #492]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	e02d      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x334>
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a75      	ldr	r2, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	4b73      	ldr	r3, [pc, #460]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a72      	ldr	r2, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	e01c      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b05      	cmp	r3, #5
 8002802:	d10c      	bne.n	800281e <HAL_RCC_OscConfig+0x356>
 8002804:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a6c      	ldr	r2, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a69      	ldr	r2, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	e00b      	b.n	8002836 <HAL_RCC_OscConfig+0x36e>
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	4b64      	ldr	r3, [pc, #400]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a63      	ldr	r2, [pc, #396]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d015      	beq.n	800286a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fa8d 	bl	8001d5c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7ff fa89 	bl	8001d5c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0ab      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	4b57      	ldr	r3, [pc, #348]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ee      	beq.n	8002846 <HAL_RCC_OscConfig+0x37e>
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7ff fa77 	bl	8001d5c <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7ff fa73 	bl	8001d5c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e095      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ee      	bne.n	8002872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4b48      	ldr	r3, [pc, #288]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a47      	ldr	r2, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8081 	beq.w	80029b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b0:	4b42      	ldr	r3, [pc, #264]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d061      	beq.n	8002980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d146      	bne.n	8002952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c4:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCC_OscConfig+0x4fc>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7ff fa47 	bl	8001d5c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7ff fa43 	bl	8001d5c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e067      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d108      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	492d      	ldr	r1, [pc, #180]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a19      	ldr	r1, [r3, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	430b      	orrs	r3, r1
 800291e:	4927      	ldr	r1, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x4fc>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7ff fa17 	bl	8001d5c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7ff fa13 	bl	8001d5c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e037      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x46a>
 8002950:	e02f      	b.n	80029b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_RCC_OscConfig+0x4fc>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff fa00 	bl	8001d5c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff f9fc 	bl	8001d5c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e020      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x498>
 800297e:	e018      	b.n	80029b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e013      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x4f4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42420060 	.word	0x42420060

080029c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4965      	ldr	r1, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d040      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e073      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7ff f950 	bl	8001d5c <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7ff f94c 	bl	8001d5c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e053      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d210      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 0207 	bic.w	r2, r3, #7
 8002afe:	4922      	ldr	r1, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1cc>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f8ae 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08009a54 	.word	0x08009a54
 8002b94:	20000004 	.word	0x20000004
 8002b98:	20000008 	.word	0x20000008

08002b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b490      	push	{r4, r7}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ba4:	1d3c      	adds	r4, r7, #4
 8002ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bac:	f240 2301 	movw	r3, #513	; 0x201
 8002bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x40>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x46>
 8002bda:	e02d      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bde:	623b      	str	r3, [r7, #32]
      break;
 8002be0:	e02d      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bee:	4413      	add	r3, r2
 8002bf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0c5b      	lsrs	r3, r3, #17
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c0e:	4413      	add	r3, r2
 8002c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1a:	fb02 f203 	mul.w	r2, r2, r3
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e004      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	623b      	str	r3, [r7, #32]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3a:	623b      	str	r3, [r7, #32]
      break;
 8002c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	; 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc90      	pop	{r4, r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	08009a44 	.word	0x08009a44
 8002c50:	40021000 	.word	0x40021000
 8002c54:	007a1200 	.word	0x007a1200
 8002c58:	003d0900 	.word	0x003d0900

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000004 	.word	0x20000004

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c74:	f7ff fff2 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08009a64 	.word	0x08009a64

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff ffde 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0adb      	lsrs	r3, r3, #11
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08009a64 	.word	0x08009a64

08002cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <RCC_Delay+0x34>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <RCC_Delay+0x38>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cdc:	bf00      	nop
  }
  while (Delay --);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <RCC_Delay+0x1c>
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000004 	.word	0x20000004
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f839 	bl	8002d9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fd74 	bl	8003828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d001      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e03a      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <HAL_TIM_Base_Start_IT+0x98>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x58>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d009      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x58>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x58>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d010      	beq.n	8002e38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e26:	e007      	b.n	8002e38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800

08002e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e041      	b.n	8002ee6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f839 	bl	8002eee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f000 fcca 	bl	8003828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_TIM_PWM_Start+0x24>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e022      	b.n	8002f6a <HAL_TIM_PWM_Start+0x6a>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d109      	bne.n	8002f3e <HAL_TIM_PWM_Start+0x3e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	e015      	b.n	8002f6a <HAL_TIM_PWM_Start+0x6a>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d109      	bne.n	8002f58 <HAL_TIM_PWM_Start+0x58>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e008      	b.n	8002f6a <HAL_TIM_PWM_Start+0x6a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e05e      	b.n	8003030 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d104      	bne.n	8002f82 <HAL_TIM_PWM_Start+0x82>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f80:	e013      	b.n	8002faa <HAL_TIM_PWM_Start+0xaa>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d104      	bne.n	8002f92 <HAL_TIM_PWM_Start+0x92>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f90:	e00b      	b.n	8002faa <HAL_TIM_PWM_Start+0xaa>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d104      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0xa2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	e003      	b.n	8002faa <HAL_TIM_PWM_Start+0xaa>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	6839      	ldr	r1, [r7, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 feb8 	bl	8003d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <HAL_TIM_PWM_Start+0x138>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d107      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_TIM_PWM_Start+0x138>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_TIM_PWM_Start+0xfa>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d009      	beq.n	8002ffa <HAL_TIM_PWM_Start+0xfa>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_TIM_PWM_Start+0x13c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_TIM_PWM_Start+0xfa>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIM_PWM_Start+0x140>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d111      	bne.n	800301e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d010      	beq.n	800302e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301c:	e007      	b.n	800302e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800

08003044 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e093      	b.n	8003180 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f88b 	bl	8003188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003088:	f023 0307 	bic.w	r3, r3, #7
 800308c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 fbc5 	bl	8003828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	4313      	orrs	r3, r2
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030e4:	f023 030c 	bic.w	r3, r3, #12
 80030e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	4313      	orrs	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	011a      	lsls	r2, r3, #4
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	031b      	lsls	r3, r3, #12
 8003114:	4313      	orrs	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4313      	orrs	r3, r2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031ba:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031c2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d110      	bne.n	80031ec <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031d0:	7b7b      	ldrb	r3, [r7, #13]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e069      	b.n	80032ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ea:	e031      	b.n	8003250 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d110      	bne.n	8003214 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80031f2:	7bbb      	ldrb	r3, [r7, #14]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d102      	bne.n	80031fe <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80031f8:	7b3b      	ldrb	r3, [r7, #12]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e055      	b.n	80032ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003212:	e01d      	b.n	8003250 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d108      	bne.n	800322c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800321a:	7bbb      	ldrb	r3, [r7, #14]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003220:	7b7b      	ldrb	r3, [r7, #13]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003226:	7b3b      	ldrb	r3, [r7, #12]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e03e      	b.n	80032ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_Encoder_Start+0xc4>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d008      	beq.n	800326e <HAL_TIM_Encoder_Start+0xd4>
 800325c:	e00f      	b.n	800327e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2201      	movs	r2, #1
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fd5e 	bl	8003d28 <TIM_CCxChannelCmd>
      break;
 800326c:	e016      	b.n	800329c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	2104      	movs	r1, #4
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fd56 	bl	8003d28 <TIM_CCxChannelCmd>
      break;
 800327c:	e00e      	b.n	800329c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2201      	movs	r2, #1
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fd4e 	bl	8003d28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	2104      	movs	r1, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fd47 	bl	8003d28 <TIM_CCxChannelCmd>
      break;
 800329a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d122      	bne.n	8003312 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d11b      	bne.n	8003312 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0202 	mvn.w	r2, #2
 80032e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fa79 	bl	80037f0 <HAL_TIM_IC_CaptureCallback>
 80032fe:	e005      	b.n	800330c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fa6c 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa7b 	bl	8003802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b04      	cmp	r3, #4
 800331e:	d122      	bne.n	8003366 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d11b      	bne.n	8003366 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f06f 0204 	mvn.w	r2, #4
 8003336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fa4f 	bl	80037f0 <HAL_TIM_IC_CaptureCallback>
 8003352:	e005      	b.n	8003360 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fa42 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa51 	bl	8003802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b08      	cmp	r3, #8
 8003372:	d122      	bne.n	80033ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	d11b      	bne.n	80033ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0208 	mvn.w	r2, #8
 800338a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa25 	bl	80037f0 <HAL_TIM_IC_CaptureCallback>
 80033a6:	e005      	b.n	80033b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fa18 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa27 	bl	8003802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d122      	bne.n	800340e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d11b      	bne.n	800340e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f06f 0210 	mvn.w	r2, #16
 80033de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2208      	movs	r2, #8
 80033e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f9fb 	bl	80037f0 <HAL_TIM_IC_CaptureCallback>
 80033fa:	e005      	b.n	8003408 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f9ee 	bl	80037de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9fd 	bl	8003802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10e      	bne.n	800343a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0201 	mvn.w	r2, #1
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f9c9 	bl	80037cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003444:	2b80      	cmp	r3, #128	; 0x80
 8003446:	d10e      	bne.n	8003466 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d107      	bne.n	8003466 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800345e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fcec 	bl	8003e3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d10e      	bne.n	8003492 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d107      	bne.n	8003492 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800348a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f9c1 	bl	8003814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b20      	cmp	r3, #32
 800349e:	d10e      	bne.n	80034be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d107      	bne.n	80034be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f06f 0220 	mvn.w	r2, #32
 80034b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fcb7 	bl	8003e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0ac      	b.n	800363c <HAL_TIM_PWM_ConfigChannel+0x174>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	f200 809f 	bhi.w	8003630 <HAL_TIM_PWM_ConfigChannel+0x168>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	08003631 	.word	0x08003631
 8003500:	08003631 	.word	0x08003631
 8003504:	08003631 	.word	0x08003631
 8003508:	0800356d 	.word	0x0800356d
 800350c:	08003631 	.word	0x08003631
 8003510:	08003631 	.word	0x08003631
 8003514:	08003631 	.word	0x08003631
 8003518:	080035af 	.word	0x080035af
 800351c:	08003631 	.word	0x08003631
 8003520:	08003631 	.word	0x08003631
 8003524:	08003631 	.word	0x08003631
 8003528:	080035ef 	.word	0x080035ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f9da 	bl	80038ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	619a      	str	r2, [r3, #24]
      break;
 800356a:	e062      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa20 	bl	80039b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	619a      	str	r2, [r3, #24]
      break;
 80035ac:	e041      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fa69 	bl	8003a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0208 	orr.w	r2, r2, #8
 80035c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0204 	bic.w	r2, r2, #4
 80035d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
      break;
 80035ec:	e021      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fab3 	bl	8003b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	61da      	str	r2, [r3, #28]
      break;
 800362e:	e000      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIM_ConfigClockSource+0x18>
 8003658:	2302      	movs	r3, #2
 800365a:	e0b3      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x180>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800367a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003694:	d03e      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0xd0>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	f200 8087 	bhi.w	80037ac <HAL_TIM_ConfigClockSource+0x168>
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	f000 8085 	beq.w	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	d87f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036ac:	2b70      	cmp	r3, #112	; 0x70
 80036ae:	d01a      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xa2>
 80036b0:	2b70      	cmp	r3, #112	; 0x70
 80036b2:	d87b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d050      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x116>
 80036b8:	2b60      	cmp	r3, #96	; 0x60
 80036ba:	d877      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036bc:	2b50      	cmp	r3, #80	; 0x50
 80036be:	d03c      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xf6>
 80036c0:	2b50      	cmp	r3, #80	; 0x50
 80036c2:	d873      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d058      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x136>
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d86f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d064      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d86b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d060      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d867      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d05c      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d05a      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036e4:	e062      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f000 faf8 	bl	8003cea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003708:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	609a      	str	r2, [r3, #8]
      break;
 8003712:	e04e      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f000 fae1 	bl	8003cea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003736:	609a      	str	r2, [r3, #8]
      break;
 8003738:	e03b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	461a      	mov	r2, r3
 8003748:	f000 fa58 	bl	8003bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2150      	movs	r1, #80	; 0x50
 8003752:	4618      	mov	r0, r3
 8003754:	f000 faaf 	bl	8003cb6 <TIM_ITRx_SetConfig>
      break;
 8003758:	e02b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	461a      	mov	r2, r3
 8003768:	f000 fa76 	bl	8003c58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2160      	movs	r1, #96	; 0x60
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fa9f 	bl	8003cb6 <TIM_ITRx_SetConfig>
      break;
 8003778:	e01b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	461a      	mov	r2, r3
 8003788:	f000 fa38 	bl	8003bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2140      	movs	r1, #64	; 0x40
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fa8f 	bl	8003cb6 <TIM_ITRx_SetConfig>
      break;
 8003798:	e00b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f000 fa86 	bl	8003cb6 <TIM_ITRx_SetConfig>
        break;
 80037aa:	e002      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
	...

08003828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <TIM_Base_SetConfig+0xb8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x30>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x30>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <TIM_Base_SetConfig+0xbc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x30>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <TIM_Base_SetConfig+0xc0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <TIM_Base_SetConfig+0xb8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_Base_SetConfig+0x62>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d007      	beq.n	800388a <TIM_Base_SetConfig+0x62>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <TIM_Base_SetConfig+0xbc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0x62>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <TIM_Base_SetConfig+0xc0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d108      	bne.n	800389c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <TIM_Base_SetConfig+0xb8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d103      	bne.n	80038d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	615a      	str	r2, [r3, #20]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800

080038ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f023 0201 	bic.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 0302 	bic.w	r3, r3, #2
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <TIM_OC1_SetConfig+0xc8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d10c      	bne.n	8003962 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 0308 	bic.w	r3, r3, #8
 800394e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 0304 	bic.w	r3, r3, #4
 8003960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <TIM_OC1_SetConfig+0xc8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00

080039b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0210 	bic.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f023 0320 	bic.w	r3, r3, #32
 8003a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <TIM_OC2_SetConfig+0xd0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10d      	bne.n	8003a34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <TIM_OC2_SetConfig+0xd0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d113      	bne.n	8003a64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00

08003a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <TIM_OC3_SetConfig+0xd0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <TIM_OC3_SetConfig+0xd0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d113      	bne.n	8003b36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00

08003b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <TIM_OC4_SetConfig+0x98>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d109      	bne.n	8003bd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	40012c00 	.word	0x40012c00

08003bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f023 030a 	bic.w	r3, r3, #10
 8003c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	031b      	lsls	r3, r3, #12
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f043 0307 	orr.w	r3, r3, #7
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b087      	sub	sp, #28
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	021a      	lsls	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	609a      	str	r2, [r3, #8]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e046      	b.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00e      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d009      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10c      	bne.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800

08003e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e03f      	b.n	8003ee2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f837 	bl	8003eea <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fc8d 	bl	80047b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d17c      	bne.n	8004016 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_UART_Transmit+0x2c>
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e075      	b.n	8004018 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Transmit+0x3e>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e06e      	b.n	8004018 <HAL_UART_Transmit+0x11c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2221      	movs	r2, #33	; 0x21
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f50:	f7fd ff04 	bl	8001d5c <HAL_GetTick>
 8003f54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	d108      	bne.n	8003f7e <HAL_UART_Transmit+0x82>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e003      	b.n	8003f86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f8e:	e02a      	b.n	8003fe6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fa37 	bl	800440e <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e036      	b.n	8004018 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fbe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e007      	b.n	8003fd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1cf      	bne.n	8003f90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fa07 	bl	800440e <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e006      	b.n	8004018 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	d11d      	bne.n	8004076 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_UART_Receive_IT+0x26>
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e016      	b.n	8004078 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_UART_Receive_IT+0x38>
 8004054:	2302      	movs	r3, #2
 8004056:	e00f      	b.n	8004078 <HAL_UART_Receive_IT+0x58>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	461a      	mov	r2, r3
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fa18 	bl	80044a2 <UART_Start_Receive_IT>
 8004072:	4603      	mov	r3, r0
 8004074:	e000      	b.n	8004078 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10d      	bne.n	80040d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_UART_IRQHandler+0x52>
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fac9 	bl	8004662 <UART_Receive_IT>
      return;
 80040d0:	e17b      	b.n	80043ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80b1 	beq.w	800423c <HAL_UART_IRQHandler+0x1bc>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <HAL_UART_IRQHandler+0x70>
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80a6 	beq.w	800423c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_UART_IRQHandler+0x90>
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_UART_IRQHandler+0xb0>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_UART_IRQHandler+0xd0>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f043 0204 	orr.w	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00f      	beq.n	800417a <HAL_UART_IRQHandler+0xfa>
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <HAL_UART_IRQHandler+0xee>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f043 0208 	orr.w	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 811e 	beq.w	80043c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_UART_IRQHandler+0x11e>
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa62 	bl	8004662 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <HAL_UART_IRQHandler+0x146>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d031      	beq.n	800422a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9a4 	bl	8004514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d023      	beq.n	8004222 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d013      	beq.n	800421a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	4a76      	ldr	r2, [pc, #472]	; (80043d0 <HAL_UART_IRQHandler+0x350>)
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd ff50 	bl	80020a4 <HAL_DMA_Abort_IT>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004214:	4610      	mov	r0, r2
 8004216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004218:	e00e      	b.n	8004238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8e3 	bl	80043e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	e00a      	b.n	8004238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8df 	bl	80043e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	e006      	b.n	8004238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8db 	bl	80043e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004236:	e0c3      	b.n	80043c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	bf00      	nop
    return;
 800423a:	e0c1      	b.n	80043c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	2b01      	cmp	r3, #1
 8004242:	f040 80a1 	bne.w	8004388 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 809b 	beq.w	8004388 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8095 	beq.w	8004388 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d04e      	beq.n	8004320 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800428c:	8a3b      	ldrh	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8098 	beq.w	80043c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004298:	8a3a      	ldrh	r2, [r7, #16]
 800429a:	429a      	cmp	r2, r3
 800429c:	f080 8092 	bcs.w	80043c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8a3a      	ldrh	r2, [r7, #16]
 80042a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d02b      	beq.n	8004308 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0210 	bic.w	r2, r2, #16
 80042fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd fe94 	bl	8002030 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	4619      	mov	r1, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f86d 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800431e:	e051      	b.n	80043c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004328:	b29b      	uxth	r3, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d047      	beq.n	80043c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004338:	8a7b      	ldrh	r3, [r7, #18]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d044      	beq.n	80043c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800434c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0210 	bic.w	r2, r2, #16
 800437a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800437c:	8a7b      	ldrh	r3, [r7, #18]
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f839 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004386:	e01f      	b.n	80043c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_UART_IRQHandler+0x324>
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f8f9 	bl	8004594 <UART_Transmit_IT>
    return;
 80043a2:	e012      	b.n	80043ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <HAL_UART_IRQHandler+0x34a>
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f93a 	bl	8004632 <UART_EndTransmit_IT>
    return;
 80043be:	e004      	b.n	80043ca <HAL_UART_IRQHandler+0x34a>
    return;
 80043c0:	bf00      	nop
 80043c2:	e002      	b.n	80043ca <HAL_UART_IRQHandler+0x34a>
      return;
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <HAL_UART_IRQHandler+0x34a>
      return;
 80043c8:	bf00      	nop
  }
}
 80043ca:	3728      	adds	r7, #40	; 0x28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	0800456d 	.word	0x0800456d

080043d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441e:	e02c      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d028      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x30>
 800442e:	f7fd fc95 	bl	8001d5c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	429a      	cmp	r2, r3
 800443c:	d21d      	bcs.n	800447a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800444c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e00f      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0c3      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2222      	movs	r2, #34	; 0x22
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0220 	orr.w	r2, r2, #32
 8004506:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800452a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	2b01      	cmp	r3, #1
 8004542:	d107      	bne.n	8004554 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0210 	bic.w	r2, r2, #16
 8004552:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff ff2d 	bl	80043e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b21      	cmp	r3, #33	; 0x21
 80045a6:	d13e      	bne.n	8004626 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d114      	bne.n	80045dc <UART_Transmit_IT+0x48>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d110      	bne.n	80045dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	621a      	str	r2, [r3, #32]
 80045da:	e008      	b.n	80045ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	1c59      	adds	r1, r3, #1
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6211      	str	r1, [r2, #32]
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	4619      	mov	r1, r3
 80045fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004610:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004620:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e000      	b.n	8004628 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
  }
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004648:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff febe 	bl	80043d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b22      	cmp	r3, #34	; 0x22
 8004674:	f040 8099 	bne.w	80047aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004680:	d117      	bne.n	80046b2 <UART_Receive_IT+0x50>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d113      	bne.n	80046b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	1c9a      	adds	r2, r3, #2
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
 80046b0:	e026      	b.n	8004700 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d007      	beq.n	80046d6 <UART_Receive_IT+0x74>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <UART_Receive_IT+0x82>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e008      	b.n	80046f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29b      	uxth	r3, r3
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4619      	mov	r1, r3
 800470e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004710:	2b00      	cmp	r3, #0
 8004712:	d148      	bne.n	80047a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0220 	bic.w	r2, r2, #32
 8004722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	d123      	bne.n	800479c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0210 	bic.w	r2, r2, #16
 8004768:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d10a      	bne.n	800478e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fe2f 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
 800479a:	e002      	b.n	80047a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f837 	bl	8005810 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e002      	b.n	80047ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047ee:	f023 030c 	bic.w	r3, r3, #12
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <UART_SetConfig+0x114>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d103      	bne.n	8004824 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800481c:	f7fe fa3c 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	e002      	b.n	800482a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004824:	f7fe fa24 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004828:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009a      	lsls	r2, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <UART_SetConfig+0x118>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	0119      	lsls	r1, r3, #4
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <UART_SetConfig+0x118>)
 8004862:	fba3 0302 	umull	r0, r3, r3, r2
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2064      	movs	r0, #100	; 0x64
 800486a:	fb00 f303 	mul.w	r3, r0, r3
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	3332      	adds	r3, #50	; 0x32
 8004874:	4a15      	ldr	r2, [pc, #84]	; (80048cc <UART_SetConfig+0x118>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004880:	4419      	add	r1, r3
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009a      	lsls	r2, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	fbb2 f2f3 	udiv	r2, r2, r3
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <UART_SetConfig+0x118>)
 800489a:	fba3 0302 	umull	r0, r3, r3, r2
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	2064      	movs	r0, #100	; 0x64
 80048a2:	fb00 f303 	mul.w	r3, r0, r3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	3332      	adds	r3, #50	; 0x32
 80048ac:	4a07      	ldr	r2, [pc, #28]	; (80048cc <UART_SetConfig+0x118>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	440a      	add	r2, r1
 80048be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40013800 	.word	0x40013800
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <WRITE_DATA_Instruct>:
	instruction_packet[7] = Dynamix_Checksum(instruction_packet,size);
	Buffer_Data_Set(packet_buffer,instruction_packet,size);
}

void WRITE_DATA_Instruct(uint8_t *packet_buffer,uint8_t id, uint8_t param_address ,uint16_t param1, uint16_t param2 )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	70fb      	strb	r3, [r7, #3]
 80048e2:	460b      	mov	r3, r1
 80048e4:	70bb      	strb	r3, [r7, #2]
 80048e6:	4613      	mov	r3, r2
 80048e8:	803b      	strh	r3, [r7, #0]
	uint8_t *data = (uint8_t*)malloc(2*sizeof(uint8_t)) ;
 80048ea:	2002      	movs	r0, #2
 80048ec:	f001 fa3c 	bl	8005d68 <malloc>
 80048f0:	4603      	mov	r3, r0
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(param_address < 0x19)
 80048f4:	78bb      	ldrb	r3, [r7, #2]
 80048f6:	2b18      	cmp	r3, #24
 80048f8:	d82f      	bhi.n	800495a <WRITE_DATA_Instruct+0x8a>
	{
		uint8_t instruction_packet[8] = {0xFF, 0XFF, id, 0x04, 0x03 ,param_address, (uint8_t)param1, 0x00};
 80048fa:	23ff      	movs	r3, #255	; 0xff
 80048fc:	f887 3020 	strb.w	r3, [r7, #32]
 8004900:	23ff      	movs	r3, #255	; 0xff
 8004902:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800490c:	2304      	movs	r3, #4
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	2303      	movs	r3, #3
 8004914:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8004918:	78bb      	ldrb	r3, [r7, #2]
 800491a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800491e:	883b      	ldrh	r3, [r7, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t size= sizeof(instruction_packet);
 800492c:	2308      	movs	r3, #8
 800492e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		instruction_packet[7] = Dynamix_Checksum(instruction_packet,size);
 8004932:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004936:	f107 0320 	add.w	r3, r7, #32
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f890 	bl	8004a62 <Dynamix_Checksum>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Buffer_Data_Set(packet_buffer,instruction_packet,size);
 8004948:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800494c:	f107 0320 	add.w	r3, r7, #32
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8cd 	bl	8004af2 <Buffer_Data_Set>
 8004958:	e07c      	b.n	8004a54 <WRITE_DATA_Instruct+0x184>
	}
	else if(param_address>0x19 && param2==0x00)
 800495a:	78bb      	ldrb	r3, [r7, #2]
 800495c:	2b19      	cmp	r3, #25
 800495e:	d936      	bls.n	80049ce <WRITE_DATA_Instruct+0xfe>
 8004960:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004962:	2b00      	cmp	r3, #0
 8004964:	d133      	bne.n	80049ce <WRITE_DATA_Instruct+0xfe>
	{
		uint8_t instruction_packet[9] ={0xFF, 0XFF, id, 0x05, 0x03 ,param_address, 0x00,0x00, 0x00};
 8004966:	23ff      	movs	r3, #255	; 0xff
 8004968:	753b      	strb	r3, [r7, #20]
 800496a:	23ff      	movs	r3, #255	; 0xff
 800496c:	757b      	strb	r3, [r7, #21]
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	75bb      	strb	r3, [r7, #22]
 8004972:	2305      	movs	r3, #5
 8004974:	75fb      	strb	r3, [r7, #23]
 8004976:	2303      	movs	r3, #3
 8004978:	763b      	strb	r3, [r7, #24]
 800497a:	78bb      	ldrb	r3, [r7, #2]
 800497c:	767b      	strb	r3, [r7, #25]
 800497e:	2300      	movs	r3, #0
 8004980:	76bb      	strb	r3, [r7, #26]
 8004982:	2300      	movs	r3, #0
 8004984:	76fb      	strb	r3, [r7, #27]
 8004986:	2300      	movs	r3, #0
 8004988:	773b      	strb	r3, [r7, #28]
		uint8_t size= sizeof(instruction_packet);
 800498a:	2309      	movs	r3, #9
 800498c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		Dynamix_WriteHexa(data, param1);
 8004990:	883b      	ldrh	r3, [r7, #0]
 8004992:	4619      	mov	r1, r3
 8004994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004996:	f000 f887 	bl	8004aa8 <Dynamix_WriteHexa>
		Buffer_Allocate_Divide_Hex(6,instruction_packet,data);
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a0:	4619      	mov	r1, r3
 80049a2:	2006      	movs	r0, #6
 80049a4:	f000 f8c4 	bl	8004b30 <Buffer_Allocate_Divide_Hex>
		instruction_packet[8] = Dynamix_Checksum(instruction_packet,size);
 80049a8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f855 	bl	8004a62 <Dynamix_Checksum>
 80049b8:	4603      	mov	r3, r0
 80049ba:	773b      	strb	r3, [r7, #28]
		Buffer_Data_Set(packet_buffer,instruction_packet,size);
 80049bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f893 	bl	8004af2 <Buffer_Data_Set>
	{
 80049cc:	e042      	b.n	8004a54 <WRITE_DATA_Instruct+0x184>
	}
	else
	{
		uint8_t instruction_packet[11] ={0xFF, 0XFF, id, 0x07, 0x03 ,param_address,0x00 ,0x00,0x00,0x00, 0x00};
 80049ce:	23ff      	movs	r3, #255	; 0xff
 80049d0:	723b      	strb	r3, [r7, #8]
 80049d2:	23ff      	movs	r3, #255	; 0xff
 80049d4:	727b      	strb	r3, [r7, #9]
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	72bb      	strb	r3, [r7, #10]
 80049da:	2307      	movs	r3, #7
 80049dc:	72fb      	strb	r3, [r7, #11]
 80049de:	2303      	movs	r3, #3
 80049e0:	733b      	strb	r3, [r7, #12]
 80049e2:	78bb      	ldrb	r3, [r7, #2]
 80049e4:	737b      	strb	r3, [r7, #13]
 80049e6:	2300      	movs	r3, #0
 80049e8:	73bb      	strb	r3, [r7, #14]
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	2300      	movs	r3, #0
 80049f0:	743b      	strb	r3, [r7, #16]
 80049f2:	2300      	movs	r3, #0
 80049f4:	747b      	strb	r3, [r7, #17]
 80049f6:	2300      	movs	r3, #0
 80049f8:	74bb      	strb	r3, [r7, #18]
		uint8_t size= sizeof(instruction_packet);
 80049fa:	230b      	movs	r3, #11
 80049fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		Dynamix_WriteHexa(data, param1);
 8004a00:	883b      	ldrh	r3, [r7, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a06:	f000 f84f 	bl	8004aa8 <Dynamix_WriteHexa>
		Buffer_Allocate_Divide_Hex(6,instruction_packet,data);
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a10:	4619      	mov	r1, r3
 8004a12:	2006      	movs	r0, #6
 8004a14:	f000 f88c 	bl	8004b30 <Buffer_Allocate_Divide_Hex>
		Dynamix_WriteHexa(data, param2);
 8004a18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a1e:	f000 f843 	bl	8004aa8 <Dynamix_WriteHexa>
		Buffer_Allocate_Divide_Hex(8,instruction_packet,data);
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a28:	4619      	mov	r1, r3
 8004a2a:	2008      	movs	r0, #8
 8004a2c:	f000 f880 	bl	8004b30 <Buffer_Allocate_Divide_Hex>
		instruction_packet[10] = Dynamix_Checksum(instruction_packet,size);
 8004a30:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004a34:	f107 0308 	add.w	r3, r7, #8
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f811 	bl	8004a62 <Dynamix_Checksum>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74bb      	strb	r3, [r7, #18]
		Buffer_Data_Set(packet_buffer,instruction_packet,size);
 8004a44:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f84f 	bl	8004af2 <Buffer_Data_Set>
	}
	free(data);
 8004a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a56:	f001 f98f 	bl	8005d78 <free>
}
 8004a5a:	bf00      	nop
 8004a5c:	3730      	adds	r7, #48	; 0x30
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <Dynamix_Checksum>:
}*/



uint8_t Dynamix_Checksum(uint8_t *packet_arrangement, uint8_t size)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i =2; i<(size-1); i++)
 8004a72:	2302      	movs	r3, #2
 8004a74:	73bb      	strb	r3, [r7, #14]
 8004a76:	e009      	b.n	8004a8c <Dynamix_Checksum+0x2a>
	{
		checksum += packet_arrangement[i];
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	781a      	ldrb	r2, [r3, #0]
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	4413      	add	r3, r2
 8004a84:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i =2; i<(size-1); i++)
 8004a86:	7bbb      	ldrb	r3, [r7, #14]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	73bb      	strb	r3, [r7, #14]
 8004a8c:	7bba      	ldrb	r2, [r7, #14]
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	429a      	cmp	r2, r3
 8004a94:	dbf0      	blt.n	8004a78 <Dynamix_Checksum+0x16>
	}
	checksum = (uint8_t)~checksum;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	73fb      	strb	r3, [r7, #15]

	return checksum;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <Dynamix_WriteHexa>:
	}

}

void Dynamix_WriteHexa(uint8_t *data_buffer,uint16_t hex)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
	uint8_t Temp , i;

	for(i = 0;i < 2; i++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e012      	b.n	8004ae0 <Dynamix_WriteHexa+0x38>
	{
		Temp = (hex >> (8 - 8*i))& 0xFF;
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	f1c3 0301 	rsb	r3, r3, #1
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	fa42 f303 	asr.w	r3, r2, r3
 8004ac8:	73bb      	strb	r3, [r7, #14]
		//Temp = HexaString_DEC[Temp] - '0';
		data_buffer[1-i] = Temp;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	f1c3 0301 	rsb	r3, r3, #1
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	7bba      	ldrb	r2, [r7, #14]
 8004ad8:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < 2; i++)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	3301      	adds	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d9e9      	bls.n	8004aba <Dynamix_WriteHexa+0x12>
	}
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr

08004af2 <Buffer_Data_Set>:

void Buffer_Data_Set(uint8_t *buffer, uint8_t *packet_data , uint8_t size)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	4613      	mov	r3, r2
 8004afe:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i =0 ; i<size; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	75fb      	strb	r3, [r7, #23]
 8004b04:	e00a      	b.n	8004b1c <Buffer_Data_Set+0x2a>
	buffer[i] =packet_data[i];
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	441a      	add	r2, r3
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	440b      	add	r3, r1
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	701a      	strb	r2, [r3, #0]
	for(uint8_t i =0 ; i<size; i++)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
 8004b1c:	7dfa      	ldrb	r2, [r7, #23]
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3f0      	bcc.n	8004b06 <Buffer_Data_Set+0x14>

}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <Buffer_Allocate_Divide_Hex>:

void Buffer_Allocate_Divide_Hex(uint8_t start_buffer_index, uint8_t *buffer, uint8_t *data)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	73fb      	strb	r3, [r7, #15]
		buffer[start_buffer_index] = data[0];
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4413      	add	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	701a      	strb	r2, [r3, #0]
		buffer[start_buffer_index +1] = data[1];
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	7852      	ldrb	r2, [r2, #1]
 8004b56:	701a      	strb	r2, [r3, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <Checksum_GPS>:
#define LATITUDE_MINUTE 111.3194
#define HARDNESS_MINUTE 88.9036


void Checksum_GPS(uint8_t *buffer, uint8_t *Check_Point)
{
 8004b62:	b590      	push	{r4, r7, lr}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
	//체크 변수
	uint8_t Check_Index =0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
	// 체크 포문 데이터 들어온만큼
	for(uint8_t Index =0 ; Index<strlen(buffer); Index++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	73bb      	strb	r3, [r7, #14]
 8004b74:	e062      	b.n	8004c3c <Checksum_GPS+0xda>
	{
		// GPS패킷 시작 검출
		if(buffer[Index] == '$')
 8004b76:	7bbb      	ldrb	r3, [r7, #14]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b24      	cmp	r3, #36	; 0x24
 8004b80:	d159      	bne.n	8004c36 <Checksum_GPS+0xd4>
		{
			//시작패킷검색 이후 인덱스만큼 내가 원하는 패킷이 있는지 검사
			if( buffer[Index+3] == 'R' && buffer[Index+4] == 'M' && buffer[Index+5] == 'C' ) //buffer[Index+1] == 'G'&& buffer[Index+2] == 'P' &&
 8004b82:	7bbb      	ldrb	r3, [r7, #14]
 8004b84:	3303      	adds	r3, #3
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	4413      	add	r3, r2
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b52      	cmp	r3, #82	; 0x52
 8004b8e:	d152      	bne.n	8004c36 <Checksum_GPS+0xd4>
 8004b90:	7bbb      	ldrb	r3, [r7, #14]
 8004b92:	3304      	adds	r3, #4
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b4d      	cmp	r3, #77	; 0x4d
 8004b9c:	d14b      	bne.n	8004c36 <Checksum_GPS+0xd4>
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	3305      	adds	r3, #5
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b43      	cmp	r3, #67	; 0x43
 8004baa:	d144      	bne.n	8004c36 <Checksum_GPS+0xd4>
			{
				//데이터 구분 쉼표 검사
				for(uint8_t i = 7;i<strlen(buffer);i++)
 8004bac:	2307      	movs	r3, #7
 8004bae:	737b      	strb	r3, [r7, #13]
 8004bb0:	e03a      	b.n	8004c28 <Checksum_GPS+0xc6>
				{
					if(buffer[Index+i] == ',' || buffer[Index +i] == 'A'|| buffer[Index +i] == 'V'|| buffer[Index +i] == 'N'|| buffer[Index +i] == 'E' )
 8004bb2:	7bba      	ldrb	r2, [r7, #14]
 8004bb4:	7b7b      	ldrb	r3, [r7, #13]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b2c      	cmp	r3, #44	; 0x2c
 8004bc2:	d023      	beq.n	8004c0c <Checksum_GPS+0xaa>
 8004bc4:	7bba      	ldrb	r2, [r7, #14]
 8004bc6:	7b7b      	ldrb	r3, [r7, #13]
 8004bc8:	4413      	add	r3, r2
 8004bca:	461a      	mov	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b41      	cmp	r3, #65	; 0x41
 8004bd4:	d01a      	beq.n	8004c0c <Checksum_GPS+0xaa>
 8004bd6:	7bba      	ldrb	r2, [r7, #14]
 8004bd8:	7b7b      	ldrb	r3, [r7, #13]
 8004bda:	4413      	add	r3, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b56      	cmp	r3, #86	; 0x56
 8004be6:	d011      	beq.n	8004c0c <Checksum_GPS+0xaa>
 8004be8:	7bba      	ldrb	r2, [r7, #14]
 8004bea:	7b7b      	ldrb	r3, [r7, #13]
 8004bec:	4413      	add	r3, r2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b4e      	cmp	r3, #78	; 0x4e
 8004bf8:	d008      	beq.n	8004c0c <Checksum_GPS+0xaa>
 8004bfa:	7bba      	ldrb	r2, [r7, #14]
 8004bfc:	7b7b      	ldrb	r3, [r7, #13]
 8004bfe:	4413      	add	r3, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b45      	cmp	r3, #69	; 0x45
 8004c0a:	d10a      	bne.n	8004c22 <Checksum_GPS+0xc0>
					{
						Check_Point[Check_Index++] = Index+i;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	73fa      	strb	r2, [r7, #15]
 8004c12:	461a      	mov	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4413      	add	r3, r2
 8004c18:	7bb9      	ldrb	r1, [r7, #14]
 8004c1a:	7b7a      	ldrb	r2, [r7, #13]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 7;i<strlen(buffer);i++)
 8004c22:	7b7b      	ldrb	r3, [r7, #13]
 8004c24:	3301      	adds	r3, #1
 8004c26:	737b      	strb	r3, [r7, #13]
 8004c28:	7b7c      	ldrb	r4, [r7, #13]
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fb fa90 	bl	8000150 <strlen>
 8004c30:	4603      	mov	r3, r0
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d3bd      	bcc.n	8004bb2 <Checksum_GPS+0x50>
	for(uint8_t Index =0 ; Index<strlen(buffer); Index++)
 8004c36:	7bbb      	ldrb	r3, [r7, #14]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	73bb      	strb	r3, [r7, #14]
 8004c3c:	7bbc      	ldrb	r4, [r7, #14]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fb fa86 	bl	8000150 <strlen>
 8004c44:	4603      	mov	r3, r0
 8004c46:	429c      	cmp	r4, r3
 8004c48:	d395      	bcc.n	8004b76 <Checksum_GPS+0x14>
					}
				}
			}
		}
	}
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd90      	pop	{r4, r7, pc}
 8004c54:	0000      	movs	r0, r0
	...

08004c58 <Gps_Latitude_Distance_Cal>:
	distance =GPS_to_Kilo(distance);
	return distance;
}

float Gps_Latitude_Distance_Cal(float Latitude1, float Latitude2)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	// 위도값 좌표 거리 구한후 미터단위로 변경
	return (Latitude2- Latitude1)* LATITUDE_MINUTE * 1000;
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	6838      	ldr	r0, [r7, #0]
 8004c66:	f7fb ff6d 	bl	8000b44 <__aeabi_fsub>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fbdb 	bl	8000428 <__aeabi_f2d>
 8004c72:	a30d      	add	r3, pc, #52	; (adr r3, 8004ca8 <Gps_Latitude_Distance_Cal+0x50>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fc2e 	bl	80004d8 <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <Gps_Latitude_Distance_Cal+0x58>)
 8004c8a:	f7fb fc25 	bl	80004d8 <__aeabi_dmul>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	f7fb ff01 	bl	8000a9c <__aeabi_d2f>
 8004c9a:	4603      	mov	r3, r0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	f3af 8000 	nop.w
 8004ca8:	0cb295ea 	.word	0x0cb295ea
 8004cac:	405bd471 	.word	0x405bd471
 8004cb0:	408f4000 	.word	0x408f4000
 8004cb4:	00000000 	.word	0x00000000

08004cb8 <Gps_Hardness_Distance_Cal>:
float Gps_Hardness_Distance_Cal(float Hardness1, float Hardness2)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
	// 경도값 좌표 거리 구한후 미터단위로 변경
	return (Hardness2-Hardness1)* HARDNESS_MINUTE * 1000;
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	6838      	ldr	r0, [r7, #0]
 8004cc6:	f7fb ff3d 	bl	8000b44 <__aeabi_fsub>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fb fbab 	bl	8000428 <__aeabi_f2d>
 8004cd2:	a30d      	add	r3, pc, #52	; (adr r3, 8004d08 <Gps_Hardness_Distance_Cal+0x50>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f7fb fbfe 	bl	80004d8 <__aeabi_dmul>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <Gps_Hardness_Distance_Cal+0x58>)
 8004cea:	f7fb fbf5 	bl	80004d8 <__aeabi_dmul>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f7fb fed1 	bl	8000a9c <__aeabi_d2f>
 8004cfa:	4603      	mov	r3, r0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	f3af 8000 	nop.w
 8004d08:	95182a99 	.word	0x95182a99
 8004d0c:	405639d4 	.word	0x405639d4
 8004d10:	408f4000 	.word	0x408f4000

08004d14 <LED_Init>:
#include "led.h"

const LED_PortDef LED_PortTable[] = {{LED1_Port, LED1_Pin},	{LED2_Port, LED2_Pin}, {LED3_Port, LED3_Pin}, {LED4_Port, LED4_Pin}};

void LED_Init(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <LED_Init+0x64>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <LED_Init+0x64>)
 8004d2e:	f043 0308 	orr.w	r3, r3, #8
 8004d32:	6193      	str	r3, [r2, #24]
 8004d34:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <LED_Init+0x64>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8004d40:	2200      	movs	r2, #0
 8004d42:	2127      	movs	r1, #39	; 0x27
 8004d44:	480d      	ldr	r0, [pc, #52]	; (8004d7c <LED_Init+0x68>)
 8004d46:	f7fd fba7 	bl	8002498 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE0,1,2,5  */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8004d4a:	2327      	movs	r3, #39	; 0x27
 8004d4c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d56:	2302      	movs	r3, #2
 8004d58:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5a:	f107 0308 	add.w	r3, r7, #8
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4806      	ldr	r0, [pc, #24]	; (8004d7c <LED_Init+0x68>)
 8004d62:	f7fd fa15 	bl	8002190 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 8004d66:	2201      	movs	r2, #1
 8004d68:	2127      	movs	r1, #39	; 0x27
 8004d6a:	4804      	ldr	r0, [pc, #16]	; (8004d7c <LED_Init+0x68>)
 8004d6c:	f7fd fb94 	bl	8002498 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOE, LED4_Pin,GPIO_PIN_SET);  // 1 ->4 로 수정 PE10번 핀

}
 8004d70:	bf00      	nop
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40010c00 	.word	0x40010c00

08004d80 <LED_On_Unit>:
		}
	}
}

void LED_On_Unit(uint8_t Position, uint8_t OnOff)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	460a      	mov	r2, r1
 8004d8a:	71fb      	strb	r3, [r7, #7]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	71bb      	strb	r3, [r7, #6]
	if(OnOff)
 8004d90:	79bb      	ldrb	r3, [r7, #6]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <LED_On_Unit+0x36>
		HAL_GPIO_WritePin(LED_PortTable[Position-1].Port, LED_PortTable[Position-1].Pin, GPIO_PIN_SET);
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	4a10      	ldr	r2, [pc, #64]	; (8004ddc <LED_On_Unit+0x5c>)
 8004d9c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <LED_On_Unit+0x5c>)
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	889b      	ldrh	r3, [r3, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7fd fb72 	bl	8002498 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_PortTable[Position-1].Port, LED_PortTable[Position-1].Pin, GPIO_PIN_RESET);
}
 8004db4:	e00e      	b.n	8004dd4 <LED_On_Unit+0x54>
		HAL_GPIO_WritePin(LED_PortTable[Position-1].Port, LED_PortTable[Position-1].Pin, GPIO_PIN_RESET);
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <LED_On_Unit+0x5c>)
 8004dbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <LED_On_Unit+0x5c>)
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	889b      	ldrh	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f7fd fb62 	bl	8002498 <HAL_GPIO_WritePin>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08009a6c 	.word	0x08009a6c

08004de0 <PWM_Init>:
float BIAS=0;
float ANGLE_MIN=0;
float ANGLE_MAX=0;

void PWM_Init(uint16_t msPeriod1, uint16_t msPeriod2)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b09e      	sub	sp, #120	; 0x78
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	460a      	mov	r2, r1
 8004dea:	80fb      	strh	r3, [r7, #6]
 8004dec:	4613      	mov	r3, r2
 8004dee:	80bb      	strh	r3, [r7, #4]
	//TIM Master configuration Structure
	TIM_MasterConfigTypeDef sMasterConfig1 = {0};
 8004df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]
	TIM_MasterConfigTypeDef sMasterConfig2 = {0};
 8004dfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
	//TIM Slave configuration structure
	TIM_ClockConfigTypeDef sClockSourceConfig1 = {0};
 8004e04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig2 = {0};
 8004e12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	60da      	str	r2, [r3, #12]
	//Time PWM structure
	TIM_OC_InitTypeDef sConfigOC1 = {0};
 8004e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
 8004e30:	615a      	str	r2, [r3, #20]
 8004e32:	619a      	str	r2, [r3, #24]
	TIM_OC_InitTypeDef sConfigOC2 = {0};
 8004e34:	f107 0310 	add.w	r3, r7, #16
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	611a      	str	r2, [r3, #16]
 8004e44:	615a      	str	r2, [r3, #20]
 8004e46:	619a      	str	r2, [r3, #24]
	//PWM pin setting
	__HAL_RCC_TIM4_CLK_ENABLE();
 8004e48:	4b81      	ldr	r3, [pc, #516]	; (8005050 <PWM_Init+0x270>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4a80      	ldr	r2, [pc, #512]	; (8005050 <PWM_Init+0x270>)
 8004e4e:	f043 0304 	orr.w	r3, r3, #4
 8004e52:	61d3      	str	r3, [r2, #28]
 8004e54:	4b7e      	ldr	r3, [pc, #504]	; (8005050 <PWM_Init+0x270>)
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8004e60:	4b7b      	ldr	r3, [pc, #492]	; (8005050 <PWM_Init+0x270>)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4a7a      	ldr	r2, [pc, #488]	; (8005050 <PWM_Init+0x270>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	61d3      	str	r3, [r2, #28]
 8004e6c:	4b78      	ldr	r3, [pc, #480]	; (8005050 <PWM_Init+0x270>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
	PWM_GPIO_Init();
 8004e78:	f000 f954 	bl	8005124 <PWM_GPIO_Init>
	// timer clock enable


	//PWM1 Init
	PWM1_TIM_Period = msPeriod1;
 8004e7c:	4a75      	ldr	r2, [pc, #468]	; (8005054 <PWM_Init+0x274>)
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	8013      	strh	r3, [r2, #0]
	htimpwm1.Instance = PWM1_TIM;
 8004e82:	4b75      	ldr	r3, [pc, #468]	; (8005058 <PWM_Init+0x278>)
 8004e84:	4a75      	ldr	r2, [pc, #468]	; (800505c <PWM_Init+0x27c>)
 8004e86:	601a      	str	r2, [r3, #0]
	htimpwm1.Init.Prescaler = PWM1_TIM_Prescaler-1;
 8004e88:	4b73      	ldr	r3, [pc, #460]	; (8005058 <PWM_Init+0x278>)
 8004e8a:	2217      	movs	r2, #23
 8004e8c:	605a      	str	r2, [r3, #4]
	htimpwm1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e8e:	4b72      	ldr	r3, [pc, #456]	; (8005058 <PWM_Init+0x278>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
	htimpwm1.Init.Period = msPeriod1-1;
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <PWM_Init+0x278>)
 8004e9c:	60da      	str	r2, [r3, #12]
	htimpwm1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e9e:	4b6e      	ldr	r3, [pc, #440]	; (8005058 <PWM_Init+0x278>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	611a      	str	r2, [r3, #16]
	htimpwm1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ea4:	4b6c      	ldr	r3, [pc, #432]	; (8005058 <PWM_Init+0x278>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htimpwm1) != HAL_OK)
 8004eaa:	486b      	ldr	r0, [pc, #428]	; (8005058 <PWM_Init+0x278>)
 8004eac:	f7fd ff26 	bl	8002cfc <HAL_TIM_Base_Init>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <PWM_Init+0xda>
	{
		Error_PWM_Handler();
 8004eb6:	f000 f9d9 	bl	800526c <Error_PWM_Handler>
	}
	//PWM clock setting
	sClockSourceConfig1.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebe:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htimpwm1, &sClockSourceConfig1) != HAL_OK)
 8004ec0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4864      	ldr	r0, [pc, #400]	; (8005058 <PWM_Init+0x278>)
 8004ec8:	f7fe fbbc 	bl	8003644 <HAL_TIM_ConfigClockSource>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <PWM_Init+0xf6>
	{
		Error_PWM_Handler();
 8004ed2:	f000 f9cb 	bl	800526c <Error_PWM_Handler>
	}

	if (HAL_TIM_PWM_Init(&htimpwm1) != HAL_OK)
 8004ed6:	4860      	ldr	r0, [pc, #384]	; (8005058 <PWM_Init+0x278>)
 8004ed8:	f7fd ffba 	bl	8002e50 <HAL_TIM_PWM_Init>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <PWM_Init+0x106>
	{
		Error_PWM_Handler();
 8004ee2:	f000 f9c3 	bl	800526c <Error_PWM_Handler>
	}
	//Triger setting
	sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	673b      	str	r3, [r7, #112]	; 0x70
	//Slave setting
	sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	677b      	str	r3, [r7, #116]	; 0x74

	if (HAL_TIMEx_MasterConfigSynchronization(&htimpwm1, &sMasterConfig1) != HAL_OK)
 8004eee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4858      	ldr	r0, [pc, #352]	; (8005058 <PWM_Init+0x278>)
 8004ef6:	f7fe ff3b 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <PWM_Init+0x124>
	{
		Error_PWM_Handler();
 8004f00:	f000 f9b4 	bl	800526c <Error_PWM_Handler>
	}

	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 8004f04:	2360      	movs	r3, #96	; 0x60
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8004f10:	2300      	movs	r3, #0
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
	//sConfigOC1.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	//sConfigOC1.OCIdleState  = TIM_OCIDLESTATE_RESET;
	sConfigOC1.Pulse =0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htimpwm1, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8004f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4619      	mov	r1, r3
 8004f20:	484d      	ldr	r0, [pc, #308]	; (8005058 <PWM_Init+0x278>)
 8004f22:	f7fe fad1 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <PWM_Init+0x150>
	{
		Error_PWM_Handler();
 8004f2c:	f000 f99e 	bl	800526c <Error_PWM_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htimpwm1, &sConfigOC1, TIM_CHANNEL_2) != HAL_OK)
 8004f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f34:	2204      	movs	r2, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4847      	ldr	r0, [pc, #284]	; (8005058 <PWM_Init+0x278>)
 8004f3a:	f7fe fac5 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <PWM_Init+0x168>
		{
			Error_PWM_Handler();
 8004f44:	f000 f992 	bl	800526c <Error_PWM_Handler>
		}
	if (HAL_TIM_PWM_ConfigChannel(&htimpwm1, &sConfigOC1, TIM_CHANNEL_3) != HAL_OK)
 8004f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4841      	ldr	r0, [pc, #260]	; (8005058 <PWM_Init+0x278>)
 8004f52:	f7fe fab9 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <PWM_Init+0x180>
		{
			Error_PWM_Handler();
 8004f5c:	f000 f986 	bl	800526c <Error_PWM_Handler>
		}
	if (HAL_TIM_PWM_ConfigChannel(&htimpwm1, &sConfigOC1, TIM_CHANNEL_4) != HAL_OK)
 8004f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f64:	220c      	movs	r2, #12
 8004f66:	4619      	mov	r1, r3
 8004f68:	483b      	ldr	r0, [pc, #236]	; (8005058 <PWM_Init+0x278>)
 8004f6a:	f7fe faad 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <PWM_Init+0x198>
		{
			Error_PWM_Handler();
 8004f74:	f000 f97a 	bl	800526c <Error_PWM_Handler>
		}
	// PWM2 Init

	PWM2_TIM_Period = msPeriod2;
 8004f78:	4a39      	ldr	r2, [pc, #228]	; (8005060 <PWM_Init+0x280>)
 8004f7a:	88bb      	ldrh	r3, [r7, #4]
 8004f7c:	8013      	strh	r3, [r2, #0]
	htimpwm2.Instance = PWM2_TIM;
 8004f7e:	4b39      	ldr	r3, [pc, #228]	; (8005064 <PWM_Init+0x284>)
 8004f80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f84:	601a      	str	r2, [r3, #0]
	htimpwm2.Init.Prescaler = PWM2_TIM_Prescaler-1;
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <PWM_Init+0x284>)
 8004f88:	2217      	movs	r2, #23
 8004f8a:	605a      	str	r2, [r3, #4]
	htimpwm2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f8c:	4b35      	ldr	r3, [pc, #212]	; (8005064 <PWM_Init+0x284>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
	htimpwm2.Init.Period = msPeriod2-1;
 8004f92:	88bb      	ldrh	r3, [r7, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b32      	ldr	r3, [pc, #200]	; (8005064 <PWM_Init+0x284>)
 8004f9a:	60da      	str	r2, [r3, #12]
	htimpwm2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f9c:	4b31      	ldr	r3, [pc, #196]	; (8005064 <PWM_Init+0x284>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	611a      	str	r2, [r3, #16]
	htimpwm2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fa2:	4b30      	ldr	r3, [pc, #192]	; (8005064 <PWM_Init+0x284>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htimpwm2) != HAL_OK)
 8004fa8:	482e      	ldr	r0, [pc, #184]	; (8005064 <PWM_Init+0x284>)
 8004faa:	f7fd fea7 	bl	8002cfc <HAL_TIM_Base_Init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <PWM_Init+0x1d8>
	{
		Error_PWM_Handler();
 8004fb4:	f000 f95a 	bl	800526c <Error_PWM_Handler>
	}
	//PWM clock setting
	sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fbc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htimpwm2, &sClockSourceConfig2) != HAL_OK)
 8004fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4827      	ldr	r0, [pc, #156]	; (8005064 <PWM_Init+0x284>)
 8004fc6:	f7fe fb3d 	bl	8003644 <HAL_TIM_ConfigClockSource>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <PWM_Init+0x1f4>
	{
		Error_PWM_Handler();
 8004fd0:	f000 f94c 	bl	800526c <Error_PWM_Handler>
	}

	if (HAL_TIM_PWM_Init(&htimpwm2) != HAL_OK)
 8004fd4:	4823      	ldr	r0, [pc, #140]	; (8005064 <PWM_Init+0x284>)
 8004fd6:	f7fd ff3b 	bl	8002e50 <HAL_TIM_PWM_Init>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <PWM_Init+0x204>
	{
		Error_PWM_Handler();
 8004fe0:	f000 f944 	bl	800526c <Error_PWM_Handler>
	}
	//Triger setting
	sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	66bb      	str	r3, [r7, #104]	; 0x68
	//Slave setting
	sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_TIMEx_MasterConfigSynchronization(&htimpwm2, &sMasterConfig2) != HAL_OK)
 8004fec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	481c      	ldr	r0, [pc, #112]	; (8005064 <PWM_Init+0x284>)
 8004ff4:	f7fe febc 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <PWM_Init+0x222>
	{
		Error_PWM_Handler();
 8004ffe:	f000 f935 	bl	800526c <Error_PWM_Handler>
	}

	sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8005002:	2360      	movs	r3, #96	; 0x60
 8005004:	613b      	str	r3, [r7, #16]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
	sConfigOC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
	sConfigOC2.Pulse =0;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htimpwm2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 8005016:	f107 0310 	add.w	r3, r7, #16
 800501a:	2200      	movs	r2, #0
 800501c:	4619      	mov	r1, r3
 800501e:	4811      	ldr	r0, [pc, #68]	; (8005064 <PWM_Init+0x284>)
 8005020:	f7fe fa52 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <PWM_Init+0x24e>
	{
		Error_PWM_Handler();
 800502a:	f000 f91f 	bl	800526c <Error_PWM_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htimpwm2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 800502e:	f107 0310 	add.w	r3, r7, #16
 8005032:	2204      	movs	r2, #4
 8005034:	4619      	mov	r1, r3
 8005036:	480b      	ldr	r0, [pc, #44]	; (8005064 <PWM_Init+0x284>)
 8005038:	f7fe fa46 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <PWM_Init+0x266>
	{
			Error_PWM_Handler();
 8005042:	f000 f913 	bl	800526c <Error_PWM_Handler>
	}

}
 8005046:	bf00      	nop
 8005048:	3778      	adds	r7, #120	; 0x78
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	2000000e 	.word	0x2000000e
 8005058:	20000804 	.word	0x20000804
 800505c:	40000800 	.word	0x40000800
 8005060:	20000010 	.word	0x20000010
 8005064:	200002bc 	.word	0x200002bc

08005068 <PWM_Open>:


void PWM_Open(PWM Pwm, float Percent)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	6039      	str	r1, [r7, #0]
 8005072:	71fb      	strb	r3, [r7, #7]
	//PWM buffer set
	uint16_t PWM_buffer;
	PWM_buffer = Duty_calculate(Percent);
 8005074:	6838      	ldr	r0, [r7, #0]
 8005076:	f000 f8d5 	bl	8005224 <Duty_calculate>
 800507a:	4603      	mov	r3, r0
 800507c:	81fb      	strh	r3, [r7, #14]
	//Seclect Channel and Duty set
	switch(Pwm)
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b05      	cmp	r3, #5
 8005082:	d845      	bhi.n	8005110 <PWM_Open+0xa8>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <PWM_Open+0x24>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050a5 	.word	0x080050a5
 8005090:	080050b7 	.word	0x080050b7
 8005094:	080050c9 	.word	0x080050c9
 8005098:	080050db 	.word	0x080050db
 800509c:	080050ed 	.word	0x080050ed
 80050a0:	080050ff 	.word	0x080050ff
	{
		case PWM1_1:
			__HAL_TIM_SET_COMPARE(&htimpwm1,TIM_CHANNEL_1 ,PWM_buffer); // PWM Input Duty
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <PWM_Open+0xb4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	89fa      	ldrh	r2, [r7, #14]
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htimpwm1, TIM_CHANNEL_1);
 80050ac:	2100      	movs	r1, #0
 80050ae:	481b      	ldr	r0, [pc, #108]	; (800511c <PWM_Open+0xb4>)
 80050b0:	f7fd ff26 	bl	8002f00 <HAL_TIM_PWM_Start>
			break;
 80050b4:	e02d      	b.n	8005112 <PWM_Open+0xaa>
		case PWM1_2:
			__HAL_TIM_SET_COMPARE(&htimpwm1,TIM_CHANNEL_2,PWM_buffer);
 80050b6:	4b19      	ldr	r3, [pc, #100]	; (800511c <PWM_Open+0xb4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	89fa      	ldrh	r2, [r7, #14]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htimpwm1, TIM_CHANNEL_2);
 80050be:	2104      	movs	r1, #4
 80050c0:	4816      	ldr	r0, [pc, #88]	; (800511c <PWM_Open+0xb4>)
 80050c2:	f7fd ff1d 	bl	8002f00 <HAL_TIM_PWM_Start>
			break;
 80050c6:	e024      	b.n	8005112 <PWM_Open+0xaa>
		case PWM1_3:
			__HAL_TIM_SET_COMPARE(&htimpwm1,TIM_CHANNEL_3,PWM_buffer);
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <PWM_Open+0xb4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	89fa      	ldrh	r2, [r7, #14]
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(&htimpwm1, TIM_CHANNEL_3);
 80050d0:	2108      	movs	r1, #8
 80050d2:	4812      	ldr	r0, [pc, #72]	; (800511c <PWM_Open+0xb4>)
 80050d4:	f7fd ff14 	bl	8002f00 <HAL_TIM_PWM_Start>
			break;
 80050d8:	e01b      	b.n	8005112 <PWM_Open+0xaa>
		case PWM1_4:
			__HAL_TIM_SET_COMPARE(&htimpwm1,TIM_CHANNEL_4,PWM_buffer);
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <PWM_Open+0xb4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	89fa      	ldrh	r2, [r7, #14]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(&htimpwm1, TIM_CHANNEL_4);
 80050e2:	210c      	movs	r1, #12
 80050e4:	480d      	ldr	r0, [pc, #52]	; (800511c <PWM_Open+0xb4>)
 80050e6:	f7fd ff0b 	bl	8002f00 <HAL_TIM_PWM_Start>
			break;
 80050ea:	e012      	b.n	8005112 <PWM_Open+0xaa>
		case PWM2_1:
			__HAL_TIM_SET_COMPARE(&htimpwm2,TIM_CHANNEL_1,PWM_buffer); // PWM Input Duty
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <PWM_Open+0xb8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	89fa      	ldrh	r2, [r7, #14]
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htimpwm2, TIM_CHANNEL_1);
 80050f4:	2100      	movs	r1, #0
 80050f6:	480a      	ldr	r0, [pc, #40]	; (8005120 <PWM_Open+0xb8>)
 80050f8:	f7fd ff02 	bl	8002f00 <HAL_TIM_PWM_Start>
			break;
 80050fc:	e009      	b.n	8005112 <PWM_Open+0xaa>
		case PWM2_2:
			__HAL_TIM_SET_COMPARE(&htimpwm2,TIM_CHANNEL_2,PWM_buffer); // PWM Input Duty
 80050fe:	4b08      	ldr	r3, [pc, #32]	; (8005120 <PWM_Open+0xb8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	89fa      	ldrh	r2, [r7, #14]
 8005104:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htimpwm2, TIM_CHANNEL_2);
 8005106:	2104      	movs	r1, #4
 8005108:	4805      	ldr	r0, [pc, #20]	; (8005120 <PWM_Open+0xb8>)
 800510a:	f7fd fef9 	bl	8002f00 <HAL_TIM_PWM_Start>
			break;
 800510e:	e000      	b.n	8005112 <PWM_Open+0xaa>
		default:
			break;
 8005110:	bf00      	nop
	}

}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000804 	.word	0x20000804
 8005120:	200002bc 	.word	0x200002bc

08005124 <PWM_GPIO_Init>:
	}
}


static void PWM_GPIO_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b090      	sub	sp, #64	; 0x40
 8005128:	af00      	add	r7, sp, #0
	// GPIO Structure
	GPIO_InitTypeDef GPIO_InitStruct1 = {0};
 800512a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	60da      	str	r2, [r3, #12]
	GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 8005138:	f107 0320 	add.w	r3, r7, #32
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	60da      	str	r2, [r3, #12]
	GPIO_InitTypeDef GPIO_InitStruct3 = {0};
 8005146:	f107 0310 	add.w	r3, r7, #16
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	609a      	str	r2, [r3, #8]
 8005152:	60da      	str	r2, [r3, #12]
	//GPIO Clock Set
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005154:	4b2f      	ldr	r3, [pc, #188]	; (8005214 <PWM_GPIO_Init+0xf0>)
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <PWM_GPIO_Init+0xf0>)
 800515a:	f043 0308 	orr.w	r3, r3, #8
 800515e:	6193      	str	r3, [r2, #24]
 8005160:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <PWM_GPIO_Init+0xf0>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <PWM_GPIO_Init+0xf0>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	4a28      	ldr	r2, [pc, #160]	; (8005214 <PWM_GPIO_Init+0xf0>)
 8005172:	f043 0304 	orr.w	r3, r3, #4
 8005176:	6193      	str	r3, [r2, #24]
 8005178:	4b26      	ldr	r3, [pc, #152]	; (8005214 <PWM_GPIO_Init+0xf0>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <PWM_GPIO_Init+0xf0>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	4a22      	ldr	r2, [pc, #136]	; (8005214 <PWM_GPIO_Init+0xf0>)
 800518a:	f043 0310 	orr.w	r3, r3, #16
 800518e:	6193      	str	r3, [r2, #24]
 8005190:	4b20      	ldr	r3, [pc, #128]	; (8005214 <PWM_GPIO_Init+0xf0>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	687b      	ldr	r3, [r7, #4]

	//GPIO Pin Reset
	HAL_GPIO_WritePin(GPIOB, PWM1_1_Pin|PWM1_2_Pin|PWM1_3_Pin|PWM1_4_Pin, GPIO_PIN_RESET);
 800519c:	2200      	movs	r2, #0
 800519e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80051a2:	481d      	ldr	r0, [pc, #116]	; (8005218 <PWM_GPIO_Init+0xf4>)
 80051a4:	f7fd f978 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PWM2_1_Pin|PWM2_2_Pin, GPIO_PIN_RESET);
 80051a8:	2200      	movs	r2, #0
 80051aa:	2103      	movs	r1, #3
 80051ac:	481b      	ldr	r0, [pc, #108]	; (800521c <PWM_GPIO_Init+0xf8>)
 80051ae:	f7fd f973 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, PWM_DIR1_Pin|PWM_DIR2_Pin, GPIO_PIN_RESET);
 80051b2:	2200      	movs	r2, #0
 80051b4:	2130      	movs	r1, #48	; 0x30
 80051b6:	481a      	ldr	r0, [pc, #104]	; (8005220 <PWM_GPIO_Init+0xfc>)
 80051b8:	f7fd f96e 	bl	8002498 <HAL_GPIO_WritePin>

	//GPIO Init
	GPIO_InitStruct1.Pin = PWM1_1_Pin|PWM1_2_Pin|PWM1_3_Pin|PWM1_4_Pin;
 80051bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80051c0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct1.Mode = GPIO_MODE_AF_PP;
 80051c2:	2302      	movs	r3, #2
 80051c4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct1.Speed = GPIO_SPEED_FREQ_LOW;
 80051c6:	2302      	movs	r3, #2
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB,&GPIO_InitStruct1);
 80051ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051ce:	4619      	mov	r1, r3
 80051d0:	4811      	ldr	r0, [pc, #68]	; (8005218 <PWM_GPIO_Init+0xf4>)
 80051d2:	f7fc ffdd 	bl	8002190 <HAL_GPIO_Init>

	GPIO_InitStruct2.Pin = PWM2_1_Pin|PWM2_2_Pin;
 80051d6:	2303      	movs	r3, #3
 80051d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct2.Mode = GPIO_MODE_AF_PP;
 80051da:	2302      	movs	r3, #2
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 80051de:	2302      	movs	r3, #2
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct2);
 80051e2:	f107 0320 	add.w	r3, r7, #32
 80051e6:	4619      	mov	r1, r3
 80051e8:	480c      	ldr	r0, [pc, #48]	; (800521c <PWM_GPIO_Init+0xf8>)
 80051ea:	f7fc ffd1 	bl	8002190 <HAL_GPIO_Init>

	//Dir PIN
	GPIO_InitStruct3.Pin = PWM_DIR1_Pin|PWM_DIR2_Pin;
 80051ee:	2330      	movs	r3, #48	; 0x30
 80051f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct3.Mode = GPIO_MODE_OUTPUT_PP;
 80051f2:	2301      	movs	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct3.Pull = GPIO_NOPULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct3.Speed = GPIO_SPEED_FREQ_LOW;
 80051fa:	2302      	movs	r3, #2
 80051fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC,&GPIO_InitStruct3);
 80051fe:	f107 0310 	add.w	r3, r7, #16
 8005202:	4619      	mov	r1, r3
 8005204:	4806      	ldr	r0, [pc, #24]	; (8005220 <PWM_GPIO_Init+0xfc>)
 8005206:	f7fc ffc3 	bl	8002190 <HAL_GPIO_Init>

}
 800520a:	bf00      	nop
 800520c:	3740      	adds	r7, #64	; 0x40
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	40010c00 	.word	0x40010c00
 800521c:	40010800 	.word	0x40010800
 8005220:	40011000 	.word	0x40011000

08005224 <Duty_calculate>:
	return (angle*INCLINATION)+BIAS;
}


uint16_t Duty_calculate(float Persent)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	//  펄스를 퍼센트 계산하여 듀터 퍼센트로 변환
	return (uint16_t)((PWM1_TIM_Period*Persent)/100)-1;
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <Duty_calculate+0x40>)
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fb fd3d 	bl	8000cb0 <__aeabi_i2f>
 8005236:	4603      	mov	r3, r0
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fb fd8c 	bl	8000d58 <__aeabi_fmul>
 8005240:	4603      	mov	r3, r0
 8005242:	4909      	ldr	r1, [pc, #36]	; (8005268 <Duty_calculate+0x44>)
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb fe3b 	bl	8000ec0 <__aeabi_fdiv>
 800524a:	4603      	mov	r3, r0
 800524c:	4618      	mov	r0, r3
 800524e:	f7fb ff49 	bl	80010e4 <__aeabi_f2uiz>
 8005252:	4603      	mov	r3, r0
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29b      	uxth	r3, r3
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2000000e 	.word	0x2000000e
 8005268:	42c80000 	.word	0x42c80000

0800526c <Error_PWM_Handler>:
}



void Error_PWM_Handler(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005270:	b672      	cpsid	i
}
 8005272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005274:	e7fe      	b.n	8005274 <Error_PWM_Handler+0x8>
	...

08005278 <QEP_Reset>:
	//Save present value
	Encoder = TIM1->CNT;
}

void QEP_Reset(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800527c:	b672      	cpsid	i
}
 800527e:	bf00      	nop
	//Interrupt Cutoff
	 __disable_irq();
	//Reset Value
	oldEncoder = 0;
 8005280:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <QEP_Reset+0x30>)
 8005282:	2200      	movs	r2, #0
 8005284:	801a      	strh	r2, [r3, #0]
	CountTotal = 0;
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <QEP_Reset+0x34>)
 8005288:	2200      	movs	r2, #0
 800528a:	801a      	strh	r2, [r3, #0]
	Encoder = 0;
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <QEP_Reset+0x38>)
 800528e:	2200      	movs	r2, #0
 8005290:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <QEP_Reset+0x3c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 800529a:	b662      	cpsie	i
}
 800529c:	bf00      	nop
	//Interrupt On
	__enable_irq();
}
 800529e:	bf00      	nop
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	2000026c 	.word	0x2000026c
 80052ac:	20000c7e 	.word	0x20000c7e
 80052b0:	2000026e 	.word	0x2000026e
 80052b4:	200007bc 	.word	0x200007bc

080052b8 <QEP_Get>:

int16_t QEP_Get(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
	// 현재 엔코더 카운트값
	return Encoder;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <QEP_Get+0x14>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b21b      	sxth	r3, r3
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	2000026e 	.word	0x2000026e

080052d0 <QEP_Init>:

void QEP_Init(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	; 0x30
 80052d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	  /* USER CODE END TIM1_Init 0 */
	  //TIM_Encoder_InitTypeDef	Structure
	  TIM_Encoder_InitTypeDef sConfig = {0};
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	2224      	movs	r2, #36	; 0x24
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd52 	bl	8005d88 <memset>
	  //TIM_MasterConfigTypeDef	Structure
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	605a      	str	r2, [r3, #4]

	  QEP_GPIO_Init();
 80052ec:	f000 f866 	bl	80053bc <QEP_GPIO_Init>
	  __HAL_RCC_TIM1_CLK_ENABLE();
 80052f0:	4b2f      	ldr	r3, [pc, #188]	; (80053b0 <QEP_Init+0xe0>)
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	4a2e      	ldr	r2, [pc, #184]	; (80053b0 <QEP_Init+0xe0>)
 80052f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052fa:	6193      	str	r3, [r2, #24]
 80052fc:	4b2c      	ldr	r3, [pc, #176]	; (80053b0 <QEP_Init+0xe0>)
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8005308:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <QEP_Init+0xe4>)
 800530a:	4a2b      	ldr	r2, [pc, #172]	; (80053b8 <QEP_Init+0xe8>)
 800530c:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 0;
 800530e:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <QEP_Init+0xe4>)
 8005310:	2200      	movs	r2, #0
 8005312:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <QEP_Init+0xe4>)
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = 65535;
 800531a:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <QEP_Init+0xe4>)
 800531c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005320:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <QEP_Init+0xe4>)
 8005324:	2200      	movs	r2, #0
 8005326:	611a      	str	r2, [r3, #16]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; //TIM_AUTORELOAD_PRELOAD_ENABLE
 8005328:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <QEP_Init+0xe4>)
 800532a:	2280      	movs	r2, #128	; 0x80
 800532c:	619a      	str	r2, [r3, #24]
	  htim1.Init.RepetitionCounter = 0;
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <QEP_Init+0xe4>)
 8005330:	2200      	movs	r2, #0
 8005332:	615a      	str	r2, [r3, #20]

	  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005334:	2301      	movs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
	  sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE; //TIM_INPUTCHANNELPOLARITY_BOTHEDGE
 8005338:	230a      	movs	r3, #10
 800533a:	613b      	str	r3, [r7, #16]
	  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800533c:	2301      	movs	r3, #1
 800533e:	617b      	str	r3, [r7, #20]
	  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
	  sConfig.IC1Filter = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
	  sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8005348:	230a      	movs	r3, #10
 800534a:	623b      	str	r3, [r7, #32]
	  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800534c:	2301      	movs	r3, #1
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005350:	2300      	movs	r3, #0
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfig.IC2Filter = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4619      	mov	r1, r3
 800535e:	4815      	ldr	r0, [pc, #84]	; (80053b4 <QEP_Init+0xe4>)
 8005360:	f7fd fe70 	bl	8003044 <HAL_TIM_Encoder_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <QEP_Init+0x9e>
	  {
	    Error_qep_Handler();
 800536a:	f000 f853 	bl	8005414 <Error_qep_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005376:	1d3b      	adds	r3, r7, #4
 8005378:	4619      	mov	r1, r3
 800537a:	480e      	ldr	r0, [pc, #56]	; (80053b4 <QEP_Init+0xe4>)
 800537c:	f7fe fcf8 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <QEP_Init+0xba>
	  {
		 Error_qep_Handler();
 8005386:	f000 f845 	bl	8005414 <Error_qep_Handler>
	  }

	  // QEP Start max count set
	  __HAL_TIM_SET_AUTORELOAD(&htim1, 65535); //0xffff
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <QEP_Init+0xe4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <QEP_Init+0xe4>)
 8005396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800539a:	60da      	str	r2, [r3, #12]
	  //Encoder start
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800539c:	213c      	movs	r1, #60	; 0x3c
 800539e:	4805      	ldr	r0, [pc, #20]	; (80053b4 <QEP_Init+0xe4>)
 80053a0:	f7fd fefb 	bl	800319a <HAL_TIM_Encoder_Start>

	  QEP_Reset();
 80053a4:	f7ff ff68 	bl	8005278 <QEP_Reset>


}
 80053a8:	bf00      	nop
 80053aa:	3730      	adds	r7, #48	; 0x30
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	200007bc 	.word	0x200007bc
 80053b8:	40012c00 	.word	0x40012c00

080053bc <QEP_GPIO_Init>:

static void QEP_GPIO_Init(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	60da      	str	r2, [r3, #12]



	__HAL_RCC_GPIOA_CLK_ENABLE();
 80053d0:	4b0e      	ldr	r3, [pc, #56]	; (800540c <QEP_GPIO_Init+0x50>)
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	4a0d      	ldr	r2, [pc, #52]	; (800540c <QEP_GPIO_Init+0x50>)
 80053d6:	f043 0304 	orr.w	r3, r3, #4
 80053da:	6193      	str	r3, [r2, #24]
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <QEP_GPIO_Init+0x50>)
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
	/**TIM1 GPIO Configuration
	PA8     ------> TIM1_CH1
	PA9     ------> TIM1_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80053e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f6:	f107 0308 	add.w	r3, r7, #8
 80053fa:	4619      	mov	r1, r3
 80053fc:	4804      	ldr	r0, [pc, #16]	; (8005410 <QEP_GPIO_Init+0x54>)
 80053fe:	f7fc fec7 	bl	8002190 <HAL_GPIO_Init>
}
 8005402:	bf00      	nop
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40021000 	.word	0x40021000
 8005410:	40010800 	.word	0x40010800

08005414 <Error_qep_Handler>:




void Error_qep_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005418:	b672      	cpsid	i
}
 800541a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800541c:	e7fe      	b.n	800541c <Error_qep_Handler+0x8>
	...

08005420 <Segment_Init>:
	    {SegmentB_Port,SegmentB_Pin},
	    {SegmentC_Port,SegmentC_Pin}};


void Segment_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
	//GPOI Init structure
	GPIO_InitTypeDef GPIO_InitStruct_SEG = {0};
 8005426:	f107 0318 	add.w	r3, r7, #24
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	60da      	str	r2, [r3, #12]
	GPIO_InitTypeDef GPIO_InitStruct_ENB = {0};
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005442:	4b29      	ldr	r3, [pc, #164]	; (80054e8 <Segment_Init+0xc8>)
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	4a28      	ldr	r2, [pc, #160]	; (80054e8 <Segment_Init+0xc8>)
 8005448:	f043 0310 	orr.w	r3, r3, #16
 800544c:	6193      	str	r3, [r2, #24]
 800544e:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <Segment_Init+0xc8>)
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800545a:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <Segment_Init+0xc8>)
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	4a22      	ldr	r2, [pc, #136]	; (80054e8 <Segment_Init+0xc8>)
 8005460:	f043 0304 	orr.w	r3, r3, #4
 8005464:	6193      	str	r3, [r2, #24]
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <Segment_Init+0xc8>)
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	683b      	ldr	r3, [r7, #0]

	// 세그먼트 핀 기본 설정
	HAL_GPIO_WritePin(Segment1_Port, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin|Segment8_Pin, GPIO_PIN_RESET);
 8005472:	2200      	movs	r2, #0
 8005474:	f240 31cf 	movw	r1, #975	; 0x3cf
 8005478:	481c      	ldr	r0, [pc, #112]	; (80054ec <Segment_Init+0xcc>)
 800547a:	f7fd f80d 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SegmentA_Port, SegmentA_Pin|SegmentB_Pin|SegmentC_Pin,GPIO_PIN_RESET);
 800547e:	2200      	movs	r2, #0
 8005480:	21e0      	movs	r1, #224	; 0xe0
 8005482:	481b      	ldr	r0, [pc, #108]	; (80054f0 <Segment_Init+0xd0>)
 8005484:	f7fd f808 	bl	8002498 <HAL_GPIO_WritePin>
	// 세그먼트 기능 설정
	GPIO_InitStruct_SEG.Pin = Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin|Segment8_Pin;
 8005488:	f240 33cf 	movw	r3, #975	; 0x3cf
 800548c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_SEG.Mode = GPIO_MODE_OUTPUT_PP;
 800548e:	2301      	movs	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct_SEG.Pull = GPIO_NOPULL;
 8005492:	2300      	movs	r3, #0
 8005494:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct_SEG.Speed = GPIO_SPEED_FREQ_LOW;
 8005496:	2302      	movs	r3, #2
 8005498:	627b      	str	r3, [r7, #36]	; 0x24

	GPIO_InitStruct_ENB.Pin = SegmentA_Pin|SegmentB_Pin|SegmentC_Pin;
 800549a:	23e0      	movs	r3, #224	; 0xe0
 800549c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct_ENB.Mode= GPIO_MODE_OUTPUT_PP;
 800549e:	2301      	movs	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_ENB.Pull= GPIO_NOPULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct_ENB.Speed= GPIO_SPEED_FREQ_LOW;
 80054a6:	2302      	movs	r3, #2
 80054a8:	617b      	str	r3, [r7, #20]

	// 세그먼트 핀 정보 입력
	HAL_GPIO_Init(Segment1_Port, &GPIO_InitStruct_SEG);
 80054aa:	f107 0318 	add.w	r3, r7, #24
 80054ae:	4619      	mov	r1, r3
 80054b0:	480e      	ldr	r0, [pc, #56]	; (80054ec <Segment_Init+0xcc>)
 80054b2:	f7fc fe6d 	bl	8002190 <HAL_GPIO_Init>
	HAL_GPIO_Init(SegmentA_Port, &GPIO_InitStruct_ENB);
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	4619      	mov	r1, r3
 80054bc:	480c      	ldr	r0, [pc, #48]	; (80054f0 <Segment_Init+0xd0>)
 80054be:	f7fc fe67 	bl	8002190 <HAL_GPIO_Init>
	// 세그먼트 핀 작동 시작
	HAL_GPIO_WritePin(Segment1_Port, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin|Segment8_Pin, GPIO_PIN_SET);
 80054c2:	2201      	movs	r2, #1
 80054c4:	f240 31cf 	movw	r1, #975	; 0x3cf
 80054c8:	4808      	ldr	r0, [pc, #32]	; (80054ec <Segment_Init+0xcc>)
 80054ca:	f7fc ffe5 	bl	8002498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SegmentA_Port, SegmentA_Pin|SegmentB_Pin|SegmentC_Pin,GPIO_PIN_SET);
 80054ce:	2201      	movs	r2, #1
 80054d0:	21e0      	movs	r1, #224	; 0xe0
 80054d2:	4807      	ldr	r0, [pc, #28]	; (80054f0 <Segment_Init+0xd0>)
 80054d4:	f7fc ffe0 	bl	8002498 <HAL_GPIO_WritePin>
	// 초기값 설정
	Segment_Set_Value(0);
 80054d8:	2000      	movs	r0, #0
 80054da:	f000 f83f 	bl	800555c <Segment_Set_Value>
}
 80054de:	bf00      	nop
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40011000 	.word	0x40011000
 80054f0:	40010800 	.word	0x40010800

080054f4 <Segment_On>:


void Segment_On(uint8_t u8_segnum)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUM_LED; i++)
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	e01f      	b.n	8005544 <Segment_On+0x50>
	{
		// 세그먼트 비트 ON,OFF 유무 확인
		if((u8_segnum) & 1U)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <Segment_On+0x30>
		{
			// 1인 비트 ON
			HAL_GPIO_WritePin(Segment1_Port,Segment_PortTable[i].pin,SEGMENT_ON);
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	4a10      	ldr	r2, [pc, #64]	; (8005554 <Segment_On+0x60>)
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	889b      	ldrh	r3, [r3, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	4619      	mov	r1, r3
 800551c:	480e      	ldr	r0, [pc, #56]	; (8005558 <Segment_On+0x64>)
 800551e:	f7fc ffbb 	bl	8002498 <HAL_GPIO_WritePin>
 8005522:	e009      	b.n	8005538 <Segment_On+0x44>
		}
		else
		{
			// 0인 비트 OFF
			HAL_GPIO_WritePin(Segment1_Port,Segment_PortTable[i].pin,SEGMENT_OFF);
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <Segment_On+0x60>)
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	889b      	ldrh	r3, [r3, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	4619      	mov	r1, r3
 8005532:	4809      	ldr	r0, [pc, #36]	; (8005558 <Segment_On+0x64>)
 8005534:	f7fc ffb0 	bl	8002498 <HAL_GPIO_WritePin>
		}
		//다음 비트 넘거가기
		u8_segnum = u8_segnum >> 1;
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUM_LED; i++)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	3301      	adds	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b07      	cmp	r3, #7
 8005548:	d9dc      	bls.n	8005504 <Segment_On+0x10>
	}
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000024 	.word	0x20000024
 8005558:	40011000 	.word	0x40011000

0800555c <Segment_Set_Value>:
	// 입력받은 세그먼트 값
	return u16_segmentvalue;
}

void Segment_Set_Value(uint16_t u16_input_segmentvalue)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	80fb      	strh	r3, [r7, #6]
	// 세그먼트 숫자정보 값 할당
	u16_segmentvalue = u16_input_segmentvalue;
 8005566:	4a04      	ldr	r2, [pc, #16]	; (8005578 <Segment_Set_Value+0x1c>)
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	8013      	strh	r3, [r2, #0]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000270 	.word	0x20000270

0800557c <Segment_Power_ON>:

void Segment_Power_ON(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
	// 세그먼트 전원 플레그
   static uint8_t flag_segment =0;
   // 16비트 세그먼트 1000이하  숫자정보값 할당
   u16_segmentvalue = u16_segmentvalue%1000;
 8005580:	4b47      	ldr	r3, [pc, #284]	; (80056a0 <Segment_Power_ON+0x124>)
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	4a47      	ldr	r2, [pc, #284]	; (80056a4 <Segment_Power_ON+0x128>)
 8005586:	fba2 1203 	umull	r1, r2, r2, r3
 800558a:	0992      	lsrs	r2, r2, #6
 800558c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005590:	fb01 f202 	mul.w	r2, r1, r2
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	b29a      	uxth	r2, r3
 8005598:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <Segment_Power_ON+0x124>)
 800559a:	801a      	strh	r2, [r3, #0]
      if(flag_segment ==0)
 800559c:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <Segment_Power_ON+0x12c>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d124      	bne.n	80055ee <Segment_Power_ON+0x72>
      {
         HAL_GPIO_WritePin(SegmentA_Port, SegmentA_Pin, GPIO_PIN_SET);
 80055a4:	2201      	movs	r2, #1
 80055a6:	2120      	movs	r1, #32
 80055a8:	4840      	ldr	r0, [pc, #256]	; (80056ac <Segment_Power_ON+0x130>)
 80055aa:	f7fc ff75 	bl	8002498 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(SegmentB_Port, SegmentB_Pin, GPIO_PIN_RESET);
 80055ae:	2200      	movs	r2, #0
 80055b0:	2140      	movs	r1, #64	; 0x40
 80055b2:	483e      	ldr	r0, [pc, #248]	; (80056ac <Segment_Power_ON+0x130>)
 80055b4:	f7fc ff70 	bl	8002498 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(SegmentC_Port, SegmentC_Pin, GPIO_PIN_RESET);
 80055b8:	2200      	movs	r2, #0
 80055ba:	2180      	movs	r1, #128	; 0x80
 80055bc:	483b      	ldr	r0, [pc, #236]	; (80056ac <Segment_Power_ON+0x130>)
 80055be:	f7fc ff6b 	bl	8002498 <HAL_GPIO_WritePin>
         Segment_On(Segment_Pin_Open[u16_segmentvalue%10]);
 80055c2:	4b37      	ldr	r3, [pc, #220]	; (80056a0 <Segment_Power_ON+0x124>)
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	4b3a      	ldr	r3, [pc, #232]	; (80056b0 <Segment_Power_ON+0x134>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	08d9      	lsrs	r1, r3, #3
 80055ce:	460b      	mov	r3, r1
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	b29b      	uxth	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <Segment_Power_ON+0x138>)
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff87 	bl	80054f4 <Segment_On>
         flag_segment =1;
 80055e6:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <Segment_Power_ON+0x12c>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(SegmentB_Port, SegmentB_Pin, GPIO_PIN_RESET);
		 HAL_GPIO_WritePin(SegmentC_Port, SegmentC_Pin, GPIO_PIN_SET);
         Segment_On(Segment_Pin_Open[u16_segmentvalue/100%10]);
         flag_segment = 0;
      }
}
 80055ec:	e056      	b.n	800569c <Segment_Power_ON+0x120>
      else if(flag_segment ==1)
 80055ee:	4b2e      	ldr	r3, [pc, #184]	; (80056a8 <Segment_Power_ON+0x12c>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d129      	bne.n	800564a <Segment_Power_ON+0xce>
		 HAL_GPIO_WritePin(SegmentA_Port, SegmentA_Pin, GPIO_PIN_RESET);
 80055f6:	2200      	movs	r2, #0
 80055f8:	2120      	movs	r1, #32
 80055fa:	482c      	ldr	r0, [pc, #176]	; (80056ac <Segment_Power_ON+0x130>)
 80055fc:	f7fc ff4c 	bl	8002498 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SegmentB_Port, SegmentB_Pin, GPIO_PIN_SET);
 8005600:	2201      	movs	r2, #1
 8005602:	2140      	movs	r1, #64	; 0x40
 8005604:	4829      	ldr	r0, [pc, #164]	; (80056ac <Segment_Power_ON+0x130>)
 8005606:	f7fc ff47 	bl	8002498 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SegmentC_Port, SegmentC_Pin, GPIO_PIN_RESET);
 800560a:	2200      	movs	r2, #0
 800560c:	2180      	movs	r1, #128	; 0x80
 800560e:	4827      	ldr	r0, [pc, #156]	; (80056ac <Segment_Power_ON+0x130>)
 8005610:	f7fc ff42 	bl	8002498 <HAL_GPIO_WritePin>
         Segment_On(Segment_Pin_Open[u16_segmentvalue/10%10]);
 8005614:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <Segment_Power_ON+0x124>)
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	4a25      	ldr	r2, [pc, #148]	; (80056b0 <Segment_Power_ON+0x134>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	b29a      	uxth	r2, r3
 8005622:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <Segment_Power_ON+0x134>)
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	08d9      	lsrs	r1, r3, #3
 800562a:	460b      	mov	r3, r1
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <Segment_Power_ON+0x138>)
 800563a:	5c9b      	ldrb	r3, [r3, r2]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ff59 	bl	80054f4 <Segment_On>
         flag_segment = 2;
 8005642:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <Segment_Power_ON+0x12c>)
 8005644:	2202      	movs	r2, #2
 8005646:	701a      	strb	r2, [r3, #0]
}
 8005648:	e028      	b.n	800569c <Segment_Power_ON+0x120>
    	 HAL_GPIO_WritePin(SegmentA_Port, SegmentA_Pin, GPIO_PIN_RESET);
 800564a:	2200      	movs	r2, #0
 800564c:	2120      	movs	r1, #32
 800564e:	4817      	ldr	r0, [pc, #92]	; (80056ac <Segment_Power_ON+0x130>)
 8005650:	f7fc ff22 	bl	8002498 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SegmentB_Port, SegmentB_Pin, GPIO_PIN_RESET);
 8005654:	2200      	movs	r2, #0
 8005656:	2140      	movs	r1, #64	; 0x40
 8005658:	4814      	ldr	r0, [pc, #80]	; (80056ac <Segment_Power_ON+0x130>)
 800565a:	f7fc ff1d 	bl	8002498 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SegmentC_Port, SegmentC_Pin, GPIO_PIN_SET);
 800565e:	2201      	movs	r2, #1
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	4812      	ldr	r0, [pc, #72]	; (80056ac <Segment_Power_ON+0x130>)
 8005664:	f7fc ff18 	bl	8002498 <HAL_GPIO_WritePin>
         Segment_On(Segment_Pin_Open[u16_segmentvalue/100%10]);
 8005668:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <Segment_Power_ON+0x124>)
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <Segment_Power_ON+0x13c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	b29a      	uxth	r2, r3
 8005676:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <Segment_Power_ON+0x134>)
 8005678:	fba3 1302 	umull	r1, r3, r3, r2
 800567c:	08d9      	lsrs	r1, r3, #3
 800567e:	460b      	mov	r3, r1
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	b29b      	uxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <Segment_Power_ON+0x138>)
 800568e:	5c9b      	ldrb	r3, [r3, r2]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ff2f 	bl	80054f4 <Segment_On>
         flag_segment = 0;
 8005696:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <Segment_Power_ON+0x12c>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000270 	.word	0x20000270
 80056a4:	10624dd3 	.word	0x10624dd3
 80056a8:	20000272 	.word	0x20000272
 80056ac:	40010800 	.word	0x40010800
 80056b0:	cccccccd 	.word	0xcccccccd
 80056b4:	20000014 	.word	0x20000014
 80056b8:	51eb851f 	.word	0x51eb851f

080056bc <Serial1_Init>:
const uint8_t *HexaString = "0123456789ABCDEF";

uint8_t uart2_tx[10] = "123456";

void Serial1_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
	//시리얼 GPIO INIT
	USART2_GPIO_Init();
 80056c0:	f000 f946 	bl	8005950 <USART2_GPIO_Init>
	// 시리얼 INIT
	huart2.Instance = USART2;
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <Serial1_Init+0x50>)
 80056c6:	4a12      	ldr	r2, [pc, #72]	; (8005710 <Serial1_Init+0x54>)
 80056c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <Serial1_Init+0x50>)
 80056cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056d2:	4b0e      	ldr	r3, [pc, #56]	; (800570c <Serial1_Init+0x50>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <Serial1_Init+0x50>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <Serial1_Init+0x50>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <Serial1_Init+0x50>)
 80056e6:	220c      	movs	r2, #12
 80056e8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ea:	4b08      	ldr	r3, [pc, #32]	; (800570c <Serial1_Init+0x50>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <Serial1_Init+0x50>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80056f6:	4805      	ldr	r0, [pc, #20]	; (800570c <Serial1_Init+0x50>)
 80056f8:	f7fe fbaa 	bl	8003e50 <HAL_UART_Init>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <Serial1_Init+0x4a>
	{
		Error_Serial_Handler();
 8005702:	f000 f9c3 	bl	8005a8c <Error_Serial_Handler>
	}
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2000084c 	.word	0x2000084c
 8005710:	40004400 	.word	0x40004400

08005714 <Serial2_Init>:
void Serial2_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
	//시리얼 GPIO INIT
	USART3_GPIO_Init();
 8005718:	f000 f968 	bl	80059ec <USART3_GPIO_Init>

	// 시리얼 INIT
	huart3.Instance = USART3;
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <Serial2_Init+0x50>)
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <Serial2_Init+0x54>)
 8005720:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <Serial2_Init+0x50>)
 8005724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005728:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <Serial2_Init+0x50>)
 800572c:	2200      	movs	r2, #0
 800572e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <Serial2_Init+0x50>)
 8005732:	2200      	movs	r2, #0
 8005734:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <Serial2_Init+0x50>)
 8005738:	2200      	movs	r2, #0
 800573a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <Serial2_Init+0x50>)
 800573e:	220c      	movs	r2, #12
 8005740:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005742:	4b08      	ldr	r3, [pc, #32]	; (8005764 <Serial2_Init+0x50>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <Serial2_Init+0x50>)
 800574a:	2200      	movs	r2, #0
 800574c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800574e:	4805      	ldr	r0, [pc, #20]	; (8005764 <Serial2_Init+0x50>)
 8005750:	f7fe fb7e 	bl	8003e50 <HAL_UART_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <Serial2_Init+0x4a>
	{
		Error_Serial_Handler();
 800575a:	f000 f997 	bl	8005a8c <Error_Serial_Handler>
	}
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000304 	.word	0x20000304
 8005768:	40004800 	.word	0x40004800

0800576c <Serial_Open>:




void Serial_Open(SERIAL_PORT Port, uint32_t Baudrate, SERIAL_CALLBACK Callback)  //SERIAL_CALLBACK Callback
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	73fb      	strb	r3, [r7, #15]
	// 시리얼 포트 확인
	if(Port == SERIAL_PORT1)
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d118      	bne.n	80057b2 <Serial_Open+0x46>
	{
		// 시리얼 보드레이트
		huart2.Init.BaudRate = Baudrate;
 8005780:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <Serial_Open+0x90>)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6053      	str	r3, [r2, #4]
		if (HAL_UART_Init(&huart2) != HAL_OK)
 8005786:	481d      	ldr	r0, [pc, #116]	; (80057fc <Serial_Open+0x90>)
 8005788:	f7fe fb62 	bl	8003e50 <HAL_UART_Init>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <Serial_Open+0x2a>
		{
			Error_Serial_Handler();
 8005792:	f000 f97b 	bl	8005a8c <Error_Serial_Handler>
		}
		// 시리얼 인터럽드 순위 설정
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005796:	2200      	movs	r2, #0
 8005798:	2100      	movs	r1, #0
 800579a:	2026      	movs	r0, #38	; 0x26
 800579c:	f7fc fc03 	bl	8001fa6 <HAL_NVIC_SetPriority>
		// 시리얼 인터럽트 활성화
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057a0:	2026      	movs	r0, #38	; 0x26
 80057a2:	f7fc fc1c 	bl	8001fde <HAL_NVIC_EnableIRQ>
		// 시리얼 수신 인터럽트 활성화
		HAL_UART_Receive_IT(&huart2, &Rx1_buffer, 1);
 80057a6:	2201      	movs	r2, #1
 80057a8:	4915      	ldr	r1, [pc, #84]	; (8005800 <Serial_Open+0x94>)
 80057aa:	4814      	ldr	r0, [pc, #80]	; (80057fc <Serial_Open+0x90>)
 80057ac:	f7fe fc38 	bl	8004020 <HAL_UART_Receive_IT>
 80057b0:	e01a      	b.n	80057e8 <Serial_Open+0x7c>
	}
	else if(Port == SERIAL_PORT2)
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d117      	bne.n	80057e8 <Serial_Open+0x7c>
	{
		huart3.Init.BaudRate = Baudrate;
 80057b8:	4a12      	ldr	r2, [pc, #72]	; (8005804 <Serial_Open+0x98>)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6053      	str	r3, [r2, #4]
		if (HAL_UART_Init(&huart3) != HAL_OK)
 80057be:	4811      	ldr	r0, [pc, #68]	; (8005804 <Serial_Open+0x98>)
 80057c0:	f7fe fb46 	bl	8003e50 <HAL_UART_Init>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <Serial_Open+0x62>
		{
			Error_Serial_Handler();
 80057ca:	f000 f95f 	bl	8005a8c <Error_Serial_Handler>
		}
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 80057ce:	2201      	movs	r2, #1
 80057d0:	2100      	movs	r1, #0
 80057d2:	2027      	movs	r0, #39	; 0x27
 80057d4:	f7fc fbe7 	bl	8001fa6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 80057d8:	2027      	movs	r0, #39	; 0x27
 80057da:	f7fc fc00 	bl	8001fde <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart3, &Rx2_buffer, 1);
 80057de:	2201      	movs	r2, #1
 80057e0:	4909      	ldr	r1, [pc, #36]	; (8005808 <Serial_Open+0x9c>)
 80057e2:	4808      	ldr	r0, [pc, #32]	; (8005804 <Serial_Open+0x98>)
 80057e4:	f7fe fc1c 	bl	8004020 <HAL_UART_Receive_IT>
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
		HAL_NVIC_EnableIRQ(USART3_IRQn);

	}*/

	SerialCallbackTable[Port] = Callback;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	4908      	ldr	r1, [pc, #32]	; (800580c <Serial_Open+0xa0>)
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	2000084c 	.word	0x2000084c
 8005800:	20000c80 	.word	0x20000c80
 8005804:	20000304 	.word	0x20000304
 8005808:	20000c83 	.word	0x20000c83
 800580c:	20000274 	.word	0x20000274

08005810 <HAL_UART_RxCpltCallback>:

}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a12      	ldr	r2, [pc, #72]	; (8005868 <HAL_UART_RxCpltCallback+0x58>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10c      	bne.n	800583c <HAL_UART_RxCpltCallback+0x2c>
		// 시리얼 CR1 레지스터 RXNEIE(RX NOT ENABLE INTERRUPT) 비활성화 확인 ,데이터 1개를 수신하면 인터럽트를 발생시킨다.
		if((USART2->CR1 & USART_CR1_RXNEIE) == RESET )
 8005822:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_UART_RxCpltCallback+0x58>)
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_UART_RxCpltCallback+0x2c>
		{
				// 콜백 함수 유무 확인
				if(SerialCallbackTable[SERIAL_PORT1] != (void *)0)
 800582e:	4b0f      	ldr	r3, [pc, #60]	; (800586c <HAL_UART_RxCpltCallback+0x5c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_UART_RxCpltCallback+0x2c>
				{
					// 콜백함수 실행
					SerialCallbackTable[SERIAL_PORT1]();
 8005836:	4b0d      	ldr	r3, [pc, #52]	; (800586c <HAL_UART_RxCpltCallback+0x5c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4798      	blx	r3
				}
		}
	}
	if (huart->Instance == USART3) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0b      	ldr	r2, [pc, #44]	; (8005870 <HAL_UART_RxCpltCallback+0x60>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d10c      	bne.n	8005860 <HAL_UART_RxCpltCallback+0x50>
		if((USART3->CR1 & USART_CR1_RXNEIE) == RESET )
 8005846:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_UART_RxCpltCallback+0x60>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_UART_RxCpltCallback+0x50>
		{
			// 콜백 함수 유무 확인
			if(SerialCallbackTable[SERIAL_PORT2] != (void *)0)
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_UART_RxCpltCallback+0x5c>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_UART_RxCpltCallback+0x50>
				{
					// 콜백함수 실행
					SerialCallbackTable[SERIAL_PORT2]();
 800585a:	4b04      	ldr	r3, [pc, #16]	; (800586c <HAL_UART_RxCpltCallback+0x5c>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4798      	blx	r3
				}
		}

	}
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40004400 	.word	0x40004400
 800586c:	20000274 	.word	0x20000274
 8005870:	40004800 	.word	0x40004800

08005874 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
	// USART2 인터럽트 작동
	HAL_UART_IRQHandler(&huart2);
 8005878:	4804      	ldr	r0, [pc, #16]	; (800588c <USART2_IRQHandler+0x18>)
 800587a:	f7fe fc01 	bl	8004080 <HAL_UART_IRQHandler>

	// 인터럽트 종료후 수신 대기 인터럽드 작동
	HAL_UART_Receive_IT(&huart2,&Rx1_buffer, 1);
 800587e:	2201      	movs	r2, #1
 8005880:	4903      	ldr	r1, [pc, #12]	; (8005890 <USART2_IRQHandler+0x1c>)
 8005882:	4802      	ldr	r0, [pc, #8]	; (800588c <USART2_IRQHandler+0x18>)
 8005884:	f7fe fbcc 	bl	8004020 <HAL_UART_Receive_IT>

}
 8005888:	bf00      	nop
 800588a:	bd80      	pop	{r7, pc}
 800588c:	2000084c 	.word	0x2000084c
 8005890:	20000c80 	.word	0x20000c80

08005894 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005898:	4804      	ldr	r0, [pc, #16]	; (80058ac <USART3_IRQHandler+0x18>)
 800589a:	f7fe fbf1 	bl	8004080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3,&Rx2_buffer, 1);
 800589e:	2201      	movs	r2, #1
 80058a0:	4903      	ldr	r1, [pc, #12]	; (80058b0 <USART3_IRQHandler+0x1c>)
 80058a2:	4802      	ldr	r0, [pc, #8]	; (80058ac <USART3_IRQHandler+0x18>)
 80058a4:	f7fe fbbc 	bl	8004020 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 80058a8:	bf00      	nop
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000304 	.word	0x20000304
 80058b0:	20000c83 	.word	0x20000c83

080058b4 <Serial_Data_GET>:

uint8_t Serial_Data_GET(SERIAL_PORT Port)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
	// 시리얼 데이터 리턴
	switch(Port)
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d817      	bhi.n	80058f4 <Serial_Data_GET+0x40>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <Serial_Data_GET+0x18>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058e3 	.word	0x080058e3
 80058d4:	080058e9 	.word	0x080058e9
 80058d8:	080058ef 	.word	0x080058ef
	{	case SERIAL_PORT1:
		return Rx1_buffer;
 80058dc:	4b08      	ldr	r3, [pc, #32]	; (8005900 <Serial_Data_GET+0x4c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	e009      	b.n	80058f6 <Serial_Data_GET+0x42>
		case SERIAL_PORT2:
		return Rx2_buffer;
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <Serial_Data_GET+0x50>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	e006      	b.n	80058f6 <Serial_Data_GET+0x42>
		case SERIAL_PORT3:
		return Rx3_buffer;
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <Serial_Data_GET+0x54>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	e003      	b.n	80058f6 <Serial_Data_GET+0x42>
		case SERIAL_PORT4:
		return Rx4_buffer;
 80058ee:	4b07      	ldr	r3, [pc, #28]	; (800590c <Serial_Data_GET+0x58>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	e000      	b.n	80058f6 <Serial_Data_GET+0x42>
		default:
		break;
 80058f4:	bf00      	nop
	}

}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr
 8005900:	20000c80 	.word	0x20000c80
 8005904:	20000c83 	.word	0x20000c83
 8005908:	20000c82 	.word	0x20000c82
 800590c:	20000c81 	.word	0x20000c81

08005910 <Serial_Send>:

void Serial_Send(SERIAL_PORT Port , uint8_t *Data, uint16_t Size)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	6039      	str	r1, [r7, #0]
 800591a:	71fb      	strb	r3, [r7, #7]
 800591c:	4613      	mov	r3, r2
 800591e:	80bb      	strh	r3, [r7, #4]
	// 시리얼 데이터 전송
	if(Port ==0)
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <Serial_Send+0x24>
	HAL_UART_Transmit(&huart2, Data, Size,100);
 8005926:	88ba      	ldrh	r2, [r7, #4]
 8005928:	2364      	movs	r3, #100	; 0x64
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	4806      	ldr	r0, [pc, #24]	; (8005948 <Serial_Send+0x38>)
 800592e:	f7fe fae5 	bl	8003efc <HAL_UART_Transmit>
	else
	HAL_UART_Transmit(&huart3, Data, Size, 100);
}
 8005932:	e005      	b.n	8005940 <Serial_Send+0x30>
	HAL_UART_Transmit(&huart3, Data, Size, 100);
 8005934:	88ba      	ldrh	r2, [r7, #4]
 8005936:	2364      	movs	r3, #100	; 0x64
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	4804      	ldr	r0, [pc, #16]	; (800594c <Serial_Send+0x3c>)
 800593c:	f7fe fade 	bl	8003efc <HAL_UART_Transmit>
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	2000084c 	.word	0x2000084c
 800594c:	20000304 	.word	0x20000304

08005950 <USART2_GPIO_Init>:




static void USART2_GPIO_Init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	; 0x28
 8005954:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct_usart2_tx = {0};
 8005956:	f107 0318 	add.w	r3, r7, #24
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	609a      	str	r2, [r3, #8]
 8005962:	60da      	str	r2, [r3, #12]
	GPIO_InitTypeDef GPIO_InitStruct_usart2_rx = {0};
 8005964:	f107 0308 	add.w	r3, r7, #8
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	609a      	str	r2, [r3, #8]
 8005970:	60da      	str	r2, [r3, #12]

	/* Peripheral clock enable */
	__HAL_RCC_USART2_CLK_ENABLE();
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <USART2_GPIO_Init+0x94>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <USART2_GPIO_Init+0x94>)
 8005978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597c:	61d3      	str	r3, [r2, #28]
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <USART2_GPIO_Init+0x94>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800598a:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <USART2_GPIO_Init+0x94>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <USART2_GPIO_Init+0x94>)
 8005990:	f043 0304 	orr.w	r3, r3, #4
 8005994:	6193      	str	r3, [r2, #24]
 8005996:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <USART2_GPIO_Init+0x94>)
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
	/**USART2 GPIO Configuration
	PA2     ------> USART2_TX
	PA3     ------> USART2_RX
	*/
	GPIO_InitStruct_usart2_tx.Pin = GPIO_PIN_2;
 80059a2:	2304      	movs	r3, #4
 80059a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_usart2_tx.Mode = GPIO_MODE_AF_PP;  //GPIO_MODE_AF_PP
 80059a6:	2302      	movs	r3, #2
 80059a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct_usart2_tx.Speed = GPIO_SPEED_FREQ_HIGH; //GPIO_SPEED_FREQ_MEDIUM GPIO_SPEED_FREQ_HIGH
 80059aa:	2303      	movs	r3, #3
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct_usart2_tx.Pull = GPIO_PULLUP;
 80059ae:	2301      	movs	r3, #1
 80059b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_usart2_tx);
 80059b2:	f107 0318 	add.w	r3, r7, #24
 80059b6:	4619      	mov	r1, r3
 80059b8:	480b      	ldr	r0, [pc, #44]	; (80059e8 <USART2_GPIO_Init+0x98>)
 80059ba:	f7fc fbe9 	bl	8002190 <HAL_GPIO_Init>

	GPIO_InitStruct_usart2_rx.Pin = GPIO_PIN_3;
 80059be:	2308      	movs	r3, #8
 80059c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct_usart2_rx.Mode = GPIO_MODE_INPUT;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_usart2_rx.Pull = GPIO_PULLUP;
 80059c6:	2301      	movs	r3, #1
 80059c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct_usart2_rx.Speed = GPIO_SPEED_FREQ_HIGH;
 80059ca:	2303      	movs	r3, #3
 80059cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_usart2_rx);
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4619      	mov	r1, r3
 80059d4:	4804      	ldr	r0, [pc, #16]	; (80059e8 <USART2_GPIO_Init+0x98>)
 80059d6:	f7fc fbdb 	bl	8002190 <HAL_GPIO_Init>

}
 80059da:	bf00      	nop
 80059dc:	3728      	adds	r7, #40	; 0x28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40010800 	.word	0x40010800

080059ec <USART3_GPIO_Init>:
static void USART3_GPIO_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct_usart3_tx = {0};
 80059f2:	f107 0318 	add.w	r3, r7, #24
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	60da      	str	r2, [r3, #12]
	GPIO_InitTypeDef GPIO_InitStruct_usart3_rx = {0};
 8005a00:	f107 0308 	add.w	r3, r7, #8
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
 8005a0c:	60da      	str	r2, [r3, #12]

	__HAL_RCC_USART3_CLK_ENABLE();
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <USART3_GPIO_Init+0x98>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <USART3_GPIO_Init+0x98>)
 8005a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a18:	61d3      	str	r3, [r2, #28]
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <USART3_GPIO_Init+0x98>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a22:	607b      	str	r3, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005a26:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <USART3_GPIO_Init+0x98>)
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <USART3_GPIO_Init+0x98>)
 8005a2c:	f043 0308 	orr.w	r3, r3, #8
 8005a30:	6193      	str	r3, [r2, #24]
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <USART3_GPIO_Init+0x98>)
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
	/**USART3 GPIO Configuration
	PB10     ------> USART3_TX
	PB11     ------> USART3_RX
	*/
	GPIO_InitStruct_usart3_tx.Pin = GPIO_PIN_10;
 8005a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_usart3_tx.Mode = GPIO_MODE_AF_PP;
 8005a44:	2302      	movs	r3, #2
 8005a46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct_usart3_tx.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct_usart3_tx.Pull = GPIO_PULLUP;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_usart3_tx);
 8005a50:	f107 0318 	add.w	r3, r7, #24
 8005a54:	4619      	mov	r1, r3
 8005a56:	480c      	ldr	r0, [pc, #48]	; (8005a88 <USART3_GPIO_Init+0x9c>)
 8005a58:	f7fc fb9a 	bl	8002190 <HAL_GPIO_Init>

	GPIO_InitStruct_usart3_rx.Pin = GPIO_PIN_11;
 8005a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a60:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct_usart3_rx.Mode = GPIO_MODE_INPUT;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_usart3_rx.Pull = GPIO_PULLUP;
 8005a66:	2301      	movs	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct_usart3_rx.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_usart3_rx);
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4619      	mov	r1, r3
 8005a74:	4804      	ldr	r0, [pc, #16]	; (8005a88 <USART3_GPIO_Init+0x9c>)
 8005a76:	f7fc fb8b 	bl	8002190 <HAL_GPIO_Init>


}
 8005a7a:	bf00      	nop
 8005a7c:	3728      	adds	r7, #40	; 0x28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40010c00 	.word	0x40010c00

08005a8c <Error_Serial_Handler>:




void Error_Serial_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005a90:	b672      	cpsid	i
}
 8005a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a94:	e7fe      	b.n	8005a94 <Error_Serial_Handler+0x8>

08005a96 <System_Clock_Config>:
#include "system_config.h"



void System_Clock_Config(void)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b090      	sub	sp, #64	; 0x40
 8005a9a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	2228      	movs	r2, #40	; 0x28
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f96f 	bl	8005d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005aaa:	1d3b      	adds	r3, r7, #4
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ac0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005aca:	2302      	movs	r3, #2
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005ad4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fc fcf2 	bl	80024c8 <HAL_RCC_OscConfig>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <System_Clock_Config+0x58>
  {
	  Error_System_Handler();
 8005aea:	f000 f819 	bl	8005b20 <Error_System_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005aee:	230f      	movs	r3, #15
 8005af0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005af2:	2302      	movs	r3, #2
 8005af4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	2102      	movs	r1, #2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fc ff5d 	bl	80029c8 <HAL_RCC_ClockConfig>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <System_Clock_Config+0x82>
  {
	  Error_System_Handler();
 8005b14:	f000 f804 	bl	8005b20 <Error_System_Handler>
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3740      	adds	r7, #64	; 0x40
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <Error_System_Handler>:



void Error_System_Handler(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005b24:	b672      	cpsid	i
}
 8005b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b28:	e7fe      	b.n	8005b28 <Error_System_Handler+0x8>
	...

08005b2c <Timer_Init>:
static uint16_t AlarmPeriodTable[ALARM_MAX] = {0, };



void Timer_Init(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
	//TIM_MasterConfigTypeDef structure
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b32:	f107 0318 	add.w	r3, r7, #24
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	605a      	str	r2, [r3, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	60da      	str	r2, [r3, #12]
	//Tim Init
	__HAL_RCC_TIM3_CLK_ENABLE();
 8005b4a:	4b2b      	ldr	r3, [pc, #172]	; (8005bf8 <Timer_Init+0xcc>)
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <Timer_Init+0xcc>)
 8005b50:	f043 0302 	orr.w	r3, r3, #2
 8005b54:	61d3      	str	r3, [r2, #28]
 8005b56:	4b28      	ldr	r3, [pc, #160]	; (8005bf8 <Timer_Init+0xcc>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]

	htim3.Instance = BASE_TIM;
 8005b62:	4b26      	ldr	r3, [pc, #152]	; (8005bfc <Timer_Init+0xd0>)
 8005b64:	4a26      	ldr	r2, [pc, #152]	; (8005c00 <Timer_Init+0xd4>)
 8005b66:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = BASE_TIM_Prescaler-1;   				//840-1
 8005b68:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <Timer_Init+0xd0>)
 8005b6a:	223f      	movs	r2, #63	; 0x3f
 8005b6c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b6e:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <Timer_Init+0xd0>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = BASE_TIM_Period;		//100-1
 8005b74:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <Timer_Init+0xd0>)
 8005b76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b7a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7c:	4b1f      	ldr	r3, [pc, #124]	; (8005bfc <Timer_Init+0xd0>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b82:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <Timer_Init+0xd0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005b88:	481c      	ldr	r0, [pc, #112]	; (8005bfc <Timer_Init+0xd0>)
 8005b8a:	f7fd f8b7 	bl	8002cfc <HAL_TIM_Base_Init>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <Timer_Init+0x6c>
	{
		Error_Timer_Handler();
 8005b94:	f000 f892 	bl	8005cbc <Error_Timer_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b9c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005b9e:	f107 0308 	add.w	r3, r7, #8
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4815      	ldr	r0, [pc, #84]	; (8005bfc <Timer_Init+0xd0>)
 8005ba6:	f7fd fd4d 	bl	8003644 <HAL_TIM_ConfigClockSource>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <Timer_Init+0x88>
	{
		Error_Timer_Handler();
 8005bb0:	f000 f884 	bl	8005cbc <Error_Timer_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005bbc:	f107 0318 	add.w	r3, r7, #24
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	480e      	ldr	r0, [pc, #56]	; (8005bfc <Timer_Init+0xd0>)
 8005bc4:	f7fe f8d4 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <Timer_Init+0xa6>
	{
		Error_Timer_Handler();
 8005bce:	f000 f875 	bl	8005cbc <Error_Timer_Handler>
	}

	// Timer Interrupt Enable
	HAL_NVIC_EnableIRQ(BAES_TIM_IRQn);
 8005bd2:	201d      	movs	r0, #29
 8005bd4:	f7fc fa03 	bl	8001fde <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(BAES_TIM_IRQn, BAES_TIM_IT_PreemptionPriority, BAES_TIM_IT_SubPriority);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2102      	movs	r1, #2
 8005bdc:	201d      	movs	r0, #29
 8005bde:	f7fc f9e2 	bl	8001fa6 <HAL_NVIC_SetPriority>
	HAL_NVIC_GetActive(BAES_TIM_IRQn);
 8005be2:	201d      	movs	r0, #29
 8005be4:	f7fc fa15 	bl	8002012 <HAL_NVIC_GetActive>

	//timer start
	HAL_TIM_Base_Start_IT(&htim3);
 8005be8:	4804      	ldr	r0, [pc, #16]	; (8005bfc <Timer_Init+0xd0>)
 8005bea:	f7fd f8df 	bl	8002dac <HAL_TIM_Base_Start_IT>
}
 8005bee:	bf00      	nop
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	20000348 	.word	0x20000348
 8005c00:	40000400 	.word	0x40000400

08005c04 <Alarm_Open>:


void Alarm_Open(ALARM Alarm, uint16_t msPeriod, ALARM_CALLBACK Callback)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	603a      	str	r2, [r7, #0]
 8005c0e:	71fb      	strb	r3, [r7, #7]
 8005c10:	460b      	mov	r3, r1
 8005c12:	80bb      	strh	r3, [r7, #4]
	// 알람 Period 설정
	AlarmPeriodTable[Alarm] = msPeriod;
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	4907      	ldr	r1, [pc, #28]	; (8005c34 <Alarm_Open+0x30>)
 8005c18:	88ba      	ldrh	r2, [r7, #4]
 8005c1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// 알람 콜백 함수 저장
	AlarmCallbackTable[Alarm] = Callback;
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	4905      	ldr	r1, [pc, #20]	; (8005c38 <Alarm_Open+0x34>)
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	200002a0 	.word	0x200002a0
 8005c38:	20000284 	.word	0x20000284

08005c3c <TIM3_IRQHandler>:
}


// 타이머 인터럽트 함수
void TIM3_IRQHandler(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
	static uint32_t Time = 0;
	uint8_t i;
	Time++;
 8005c42:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <TIM3_IRQHandler+0x70>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a18      	ldr	r2, [pc, #96]	; (8005cac <TIM3_IRQHandler+0x70>)
 8005c4a:	6013      	str	r3, [r2, #0]

	// Clear the Timer Update pending bit
	HAL_TIM_IRQHandler(&htim3);
 8005c4c:	4818      	ldr	r0, [pc, #96]	; (8005cb0 <TIM3_IRQHandler+0x74>)
 8005c4e:	f7fd fb32 	bl	80032b6 <HAL_TIM_IRQHandler>

	for(i = 0;i < ALARM_MAX;i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	71fb      	strb	r3, [r7, #7]
 8005c56:	e020      	b.n	8005c9a <TIM3_IRQHandler+0x5e>
	{
		// 알람 함수 유무 확인
		if(AlarmPeriodTable[i] != 0)
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <TIM3_IRQHandler+0x78>)
 8005c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d017      	beq.n	8005c94 <TIM3_IRQHandler+0x58>
		{
			// 알람 번호 순차 실행 확인
			if((Time % AlarmPeriodTable[i]) == 0)
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <TIM3_IRQHandler+0x70>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	79fa      	ldrb	r2, [r7, #7]
 8005c6a:	4912      	ldr	r1, [pc, #72]	; (8005cb4 <TIM3_IRQHandler+0x78>)
 8005c6c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005c70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c74:	fb02 f201 	mul.w	r2, r2, r1
 8005c78:	1a9b      	subs	r3, r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <TIM3_IRQHandler+0x58>
			{
				// 알람 배열안에 함수 유무 확인
				if(AlarmCallbackTable[i] != (void *)0)
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <TIM3_IRQHandler+0x7c>)
 8005c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <TIM3_IRQHandler+0x58>
				{
					// 함수 실행
					AlarmCallbackTable[i]();
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <TIM3_IRQHandler+0x7c>)
 8005c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c92:	4798      	blx	r3
	for(i = 0;i < ALARM_MAX;i++)
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	3301      	adds	r3, #1
 8005c98:	71fb      	strb	r3, [r7, #7]
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d9db      	bls.n	8005c58 <TIM3_IRQHandler+0x1c>
				}
			}
		}
	}
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	200002b0 	.word	0x200002b0
 8005cb0:	20000348 	.word	0x20000348
 8005cb4:	200002a0 	.word	0x200002a0
 8005cb8:	20000284 	.word	0x20000284

08005cbc <Error_Timer_Handler>:



void Error_Timer_Handler(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005cc0:	b672      	cpsid	i
}
 8005cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <Error_Timer_Handler+0x8>

08005cc6 <atof>:
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f000 bf32 	b.w	8006b30 <strtod>

08005ccc <gcvt>:
 8005ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cce:	461c      	mov	r4, r3
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460f      	mov	r7, r1
 8005cdc:	f7fa fe6e 	bl	80009bc <__aeabi_dcmplt>
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	b118      	cbz	r0, 8005cec <gcvt+0x20>
 8005ce4:	222d      	movs	r2, #45	; 0x2d
 8005ce6:	3d01      	subs	r5, #1
 8005ce8:	f803 2b01 	strb.w	r2, [r3], #1
 8005cec:	2267      	movs	r2, #103	; 0x67
 8005cee:	2100      	movs	r1, #0
 8005cf0:	e9cd 5300 	strd	r5, r3, [sp]
 8005cf4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8005cf8:	4905      	ldr	r1, [pc, #20]	; (8005d10 <gcvt+0x44>)
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	6808      	ldr	r0, [r1, #0]
 8005d00:	f000 ff9a 	bl	8006c38 <_gcvt>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	bf14      	ite	ne
 8005d08:	4620      	movne	r0, r4
 8005d0a:	2000      	moveq	r0, #0
 8005d0c:	b005      	add	sp, #20
 8005d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d10:	20000064 	.word	0x20000064

08005d14 <__errno>:
 8005d14:	4b01      	ldr	r3, [pc, #4]	; (8005d1c <__errno+0x8>)
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000064 	.word	0x20000064

08005d20 <__libc_init_array>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	2600      	movs	r6, #0
 8005d24:	4d0c      	ldr	r5, [pc, #48]	; (8005d58 <__libc_init_array+0x38>)
 8005d26:	4c0d      	ldr	r4, [pc, #52]	; (8005d5c <__libc_init_array+0x3c>)
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	d109      	bne.n	8005d44 <__libc_init_array+0x24>
 8005d30:	f003 fe64 	bl	80099fc <_init>
 8005d34:	2600      	movs	r6, #0
 8005d36:	4d0a      	ldr	r5, [pc, #40]	; (8005d60 <__libc_init_array+0x40>)
 8005d38:	4c0a      	ldr	r4, [pc, #40]	; (8005d64 <__libc_init_array+0x44>)
 8005d3a:	1b64      	subs	r4, r4, r5
 8005d3c:	10a4      	asrs	r4, r4, #2
 8005d3e:	42a6      	cmp	r6, r4
 8005d40:	d105      	bne.n	8005d4e <__libc_init_array+0x2e>
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d48:	4798      	blx	r3
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7ee      	b.n	8005d2c <__libc_init_array+0xc>
 8005d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d52:	4798      	blx	r3
 8005d54:	3601      	adds	r6, #1
 8005d56:	e7f2      	b.n	8005d3e <__libc_init_array+0x1e>
 8005d58:	08009f2c 	.word	0x08009f2c
 8005d5c:	08009f2c 	.word	0x08009f2c
 8005d60:	08009f2c 	.word	0x08009f2c
 8005d64:	08009f30 	.word	0x08009f30

08005d68 <malloc>:
 8005d68:	4b02      	ldr	r3, [pc, #8]	; (8005d74 <malloc+0xc>)
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f000 b85f 	b.w	8005e30 <_malloc_r>
 8005d72:	bf00      	nop
 8005d74:	20000064 	.word	0x20000064

08005d78 <free>:
 8005d78:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <free+0xc>)
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f000 b80b 	b.w	8005d98 <_free_r>
 8005d82:	bf00      	nop
 8005d84:	20000064 	.word	0x20000064

08005d88 <memset>:
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4402      	add	r2, r0
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d100      	bne.n	8005d92 <memset+0xa>
 8005d90:	4770      	bx	lr
 8005d92:	f803 1b01 	strb.w	r1, [r3], #1
 8005d96:	e7f9      	b.n	8005d8c <memset+0x4>

08005d98 <_free_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d043      	beq.n	8005e28 <_free_r+0x90>
 8005da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da4:	1f0c      	subs	r4, r1, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	bfb8      	it	lt
 8005daa:	18e4      	addlt	r4, r4, r3
 8005dac:	f001 fb8a 	bl	80074c4 <__malloc_lock>
 8005db0:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <_free_r+0x94>)
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	4610      	mov	r0, r2
 8005db6:	b933      	cbnz	r3, 8005dc6 <_free_r+0x2e>
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	6014      	str	r4, [r2, #0]
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dc2:	f001 bb85 	b.w	80074d0 <__malloc_unlock>
 8005dc6:	42a3      	cmp	r3, r4
 8005dc8:	d90a      	bls.n	8005de0 <_free_r+0x48>
 8005dca:	6821      	ldr	r1, [r4, #0]
 8005dcc:	1862      	adds	r2, r4, r1
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	bf01      	itttt	eq
 8005dd2:	681a      	ldreq	r2, [r3, #0]
 8005dd4:	685b      	ldreq	r3, [r3, #4]
 8005dd6:	1852      	addeq	r2, r2, r1
 8005dd8:	6022      	streq	r2, [r4, #0]
 8005dda:	6063      	str	r3, [r4, #4]
 8005ddc:	6004      	str	r4, [r0, #0]
 8005dde:	e7ed      	b.n	8005dbc <_free_r+0x24>
 8005de0:	461a      	mov	r2, r3
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	b10b      	cbz	r3, 8005dea <_free_r+0x52>
 8005de6:	42a3      	cmp	r3, r4
 8005de8:	d9fa      	bls.n	8005de0 <_free_r+0x48>
 8005dea:	6811      	ldr	r1, [r2, #0]
 8005dec:	1850      	adds	r0, r2, r1
 8005dee:	42a0      	cmp	r0, r4
 8005df0:	d10b      	bne.n	8005e0a <_free_r+0x72>
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	4401      	add	r1, r0
 8005df6:	1850      	adds	r0, r2, r1
 8005df8:	4283      	cmp	r3, r0
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	d1de      	bne.n	8005dbc <_free_r+0x24>
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4401      	add	r1, r0
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	6053      	str	r3, [r2, #4]
 8005e08:	e7d8      	b.n	8005dbc <_free_r+0x24>
 8005e0a:	d902      	bls.n	8005e12 <_free_r+0x7a>
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	e7d4      	b.n	8005dbc <_free_r+0x24>
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	1821      	adds	r1, r4, r0
 8005e16:	428b      	cmp	r3, r1
 8005e18:	bf01      	itttt	eq
 8005e1a:	6819      	ldreq	r1, [r3, #0]
 8005e1c:	685b      	ldreq	r3, [r3, #4]
 8005e1e:	1809      	addeq	r1, r1, r0
 8005e20:	6021      	streq	r1, [r4, #0]
 8005e22:	6063      	str	r3, [r4, #4]
 8005e24:	6054      	str	r4, [r2, #4]
 8005e26:	e7c9      	b.n	8005dbc <_free_r+0x24>
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200002b4 	.word	0x200002b4

08005e30 <_malloc_r>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	1ccd      	adds	r5, r1, #3
 8005e34:	f025 0503 	bic.w	r5, r5, #3
 8005e38:	3508      	adds	r5, #8
 8005e3a:	2d0c      	cmp	r5, #12
 8005e3c:	bf38      	it	cc
 8005e3e:	250c      	movcc	r5, #12
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	4606      	mov	r6, r0
 8005e44:	db01      	blt.n	8005e4a <_malloc_r+0x1a>
 8005e46:	42a9      	cmp	r1, r5
 8005e48:	d903      	bls.n	8005e52 <_malloc_r+0x22>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	6033      	str	r3, [r6, #0]
 8005e4e:	2000      	movs	r0, #0
 8005e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e52:	f001 fb37 	bl	80074c4 <__malloc_lock>
 8005e56:	4921      	ldr	r1, [pc, #132]	; (8005edc <_malloc_r+0xac>)
 8005e58:	680a      	ldr	r2, [r1, #0]
 8005e5a:	4614      	mov	r4, r2
 8005e5c:	b99c      	cbnz	r4, 8005e86 <_malloc_r+0x56>
 8005e5e:	4f20      	ldr	r7, [pc, #128]	; (8005ee0 <_malloc_r+0xb0>)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	b923      	cbnz	r3, 8005e6e <_malloc_r+0x3e>
 8005e64:	4621      	mov	r1, r4
 8005e66:	4630      	mov	r0, r6
 8005e68:	f000 f83c 	bl	8005ee4 <_sbrk_r>
 8005e6c:	6038      	str	r0, [r7, #0]
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 f837 	bl	8005ee4 <_sbrk_r>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	d123      	bne.n	8005ec2 <_malloc_r+0x92>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	6033      	str	r3, [r6, #0]
 8005e80:	f001 fb26 	bl	80074d0 <__malloc_unlock>
 8005e84:	e7e3      	b.n	8005e4e <_malloc_r+0x1e>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	1b5b      	subs	r3, r3, r5
 8005e8a:	d417      	bmi.n	8005ebc <_malloc_r+0x8c>
 8005e8c:	2b0b      	cmp	r3, #11
 8005e8e:	d903      	bls.n	8005e98 <_malloc_r+0x68>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	441c      	add	r4, r3
 8005e94:	6025      	str	r5, [r4, #0]
 8005e96:	e004      	b.n	8005ea2 <_malloc_r+0x72>
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	42a2      	cmp	r2, r4
 8005e9c:	bf0c      	ite	eq
 8005e9e:	600b      	streq	r3, [r1, #0]
 8005ea0:	6053      	strne	r3, [r2, #4]
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f001 fb14 	bl	80074d0 <__malloc_unlock>
 8005ea8:	f104 000b 	add.w	r0, r4, #11
 8005eac:	1d23      	adds	r3, r4, #4
 8005eae:	f020 0007 	bic.w	r0, r0, #7
 8005eb2:	1ac2      	subs	r2, r0, r3
 8005eb4:	d0cc      	beq.n	8005e50 <_malloc_r+0x20>
 8005eb6:	1a1b      	subs	r3, r3, r0
 8005eb8:	50a3      	str	r3, [r4, r2]
 8005eba:	e7c9      	b.n	8005e50 <_malloc_r+0x20>
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	6864      	ldr	r4, [r4, #4]
 8005ec0:	e7cc      	b.n	8005e5c <_malloc_r+0x2c>
 8005ec2:	1cc4      	adds	r4, r0, #3
 8005ec4:	f024 0403 	bic.w	r4, r4, #3
 8005ec8:	42a0      	cmp	r0, r4
 8005eca:	d0e3      	beq.n	8005e94 <_malloc_r+0x64>
 8005ecc:	1a21      	subs	r1, r4, r0
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f000 f808 	bl	8005ee4 <_sbrk_r>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d1dd      	bne.n	8005e94 <_malloc_r+0x64>
 8005ed8:	e7cf      	b.n	8005e7a <_malloc_r+0x4a>
 8005eda:	bf00      	nop
 8005edc:	200002b4 	.word	0x200002b4
 8005ee0:	200002b8 	.word	0x200002b8

08005ee4 <_sbrk_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4d05      	ldr	r5, [pc, #20]	; (8005f00 <_sbrk_r+0x1c>)
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	f7fb fe7a 	bl	8001be8 <_sbrk>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_sbrk_r+0x1a>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_sbrk_r+0x1a>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	20000c84 	.word	0x20000c84

08005f04 <sulp>:
 8005f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f08:	460f      	mov	r7, r1
 8005f0a:	4690      	mov	r8, r2
 8005f0c:	f001 fe56 	bl	8007bbc <__ulp>
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	f1b8 0f00 	cmp.w	r8, #0
 8005f18:	d011      	beq.n	8005f3e <sulp+0x3a>
 8005f1a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005f1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dd0b      	ble.n	8005f3e <sulp+0x3a>
 8005f26:	2400      	movs	r4, #0
 8005f28:	051b      	lsls	r3, r3, #20
 8005f2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f32:	4622      	mov	r2, r4
 8005f34:	462b      	mov	r3, r5
 8005f36:	f7fa facf 	bl	80004d8 <__aeabi_dmul>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	460d      	mov	r5, r1
 8005f3e:	4620      	mov	r0, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005f48 <_strtod_l>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	469b      	mov	fp, r3
 8005f4e:	2300      	movs	r3, #0
 8005f50:	b0a1      	sub	sp, #132	; 0x84
 8005f52:	931c      	str	r3, [sp, #112]	; 0x70
 8005f54:	4ba1      	ldr	r3, [pc, #644]	; (80061dc <_strtod_l+0x294>)
 8005f56:	4682      	mov	sl, r0
 8005f58:	681f      	ldr	r7, [r3, #0]
 8005f5a:	460e      	mov	r6, r1
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f60:	f7fa f8f6 	bl	8000150 <strlen>
 8005f64:	f04f 0800 	mov.w	r8, #0
 8005f68:	4604      	mov	r4, r0
 8005f6a:	f04f 0900 	mov.w	r9, #0
 8005f6e:	961b      	str	r6, [sp, #108]	; 0x6c
 8005f70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	2a2b      	cmp	r2, #43	; 0x2b
 8005f76:	d04c      	beq.n	8006012 <_strtod_l+0xca>
 8005f78:	d83a      	bhi.n	8005ff0 <_strtod_l+0xa8>
 8005f7a:	2a0d      	cmp	r2, #13
 8005f7c:	d833      	bhi.n	8005fe6 <_strtod_l+0x9e>
 8005f7e:	2a08      	cmp	r2, #8
 8005f80:	d833      	bhi.n	8005fea <_strtod_l+0xa2>
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	d03d      	beq.n	8006002 <_strtod_l+0xba>
 8005f86:	2300      	movs	r3, #0
 8005f88:	930c      	str	r3, [sp, #48]	; 0x30
 8005f8a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005f8c:	782b      	ldrb	r3, [r5, #0]
 8005f8e:	2b30      	cmp	r3, #48	; 0x30
 8005f90:	f040 80af 	bne.w	80060f2 <_strtod_l+0x1aa>
 8005f94:	786b      	ldrb	r3, [r5, #1]
 8005f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f9a:	2b58      	cmp	r3, #88	; 0x58
 8005f9c:	d16c      	bne.n	8006078 <_strtod_l+0x130>
 8005f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa0:	4650      	mov	r0, sl
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	ab1c      	add	r3, sp, #112	; 0x70
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	4a8d      	ldr	r2, [pc, #564]	; (80061e0 <_strtod_l+0x298>)
 8005faa:	f8cd b008 	str.w	fp, [sp, #8]
 8005fae:	ab1d      	add	r3, sp, #116	; 0x74
 8005fb0:	a91b      	add	r1, sp, #108	; 0x6c
 8005fb2:	f000 ff69 	bl	8006e88 <__gethex>
 8005fb6:	f010 0607 	ands.w	r6, r0, #7
 8005fba:	4604      	mov	r4, r0
 8005fbc:	d005      	beq.n	8005fca <_strtod_l+0x82>
 8005fbe:	2e06      	cmp	r6, #6
 8005fc0:	d129      	bne.n	8006016 <_strtod_l+0xce>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	3501      	adds	r5, #1
 8005fc6:	951b      	str	r5, [sp, #108]	; 0x6c
 8005fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8005fca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f040 8596 	bne.w	8006afe <_strtod_l+0xbb6>
 8005fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fd4:	b1d3      	cbz	r3, 800600c <_strtod_l+0xc4>
 8005fd6:	4642      	mov	r2, r8
 8005fd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4619      	mov	r1, r3
 8005fe0:	b021      	add	sp, #132	; 0x84
 8005fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe6:	2a20      	cmp	r2, #32
 8005fe8:	d1cd      	bne.n	8005f86 <_strtod_l+0x3e>
 8005fea:	3301      	adds	r3, #1
 8005fec:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fee:	e7bf      	b.n	8005f70 <_strtod_l+0x28>
 8005ff0:	2a2d      	cmp	r2, #45	; 0x2d
 8005ff2:	d1c8      	bne.n	8005f86 <_strtod_l+0x3e>
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	920c      	str	r2, [sp, #48]	; 0x30
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1c3      	bne.n	8005f8a <_strtod_l+0x42>
 8006002:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006004:	961b      	str	r6, [sp, #108]	; 0x6c
 8006006:	2b00      	cmp	r3, #0
 8006008:	f040 8577 	bne.w	8006afa <_strtod_l+0xbb2>
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	e7e4      	b.n	8005fdc <_strtod_l+0x94>
 8006012:	2200      	movs	r2, #0
 8006014:	e7ef      	b.n	8005ff6 <_strtod_l+0xae>
 8006016:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006018:	b13a      	cbz	r2, 800602a <_strtod_l+0xe2>
 800601a:	2135      	movs	r1, #53	; 0x35
 800601c:	a81e      	add	r0, sp, #120	; 0x78
 800601e:	f001 feed 	bl	8007dfc <__copybits>
 8006022:	4650      	mov	r0, sl
 8006024:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006026:	f001 fa99 	bl	800755c <_Bfree>
 800602a:	3e01      	subs	r6, #1
 800602c:	2e05      	cmp	r6, #5
 800602e:	d807      	bhi.n	8006040 <_strtod_l+0xf8>
 8006030:	e8df f006 	tbb	[pc, r6]
 8006034:	1d180b0e 	.word	0x1d180b0e
 8006038:	030e      	.short	0x030e
 800603a:	f04f 0900 	mov.w	r9, #0
 800603e:	46c8      	mov	r8, r9
 8006040:	0721      	lsls	r1, r4, #28
 8006042:	d5c2      	bpl.n	8005fca <_strtod_l+0x82>
 8006044:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006048:	e7bf      	b.n	8005fca <_strtod_l+0x82>
 800604a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800604e:	e7f7      	b.n	8006040 <_strtod_l+0xf8>
 8006050:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006052:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8006056:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800605a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800605e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006062:	e7ed      	b.n	8006040 <_strtod_l+0xf8>
 8006064:	f04f 0800 	mov.w	r8, #0
 8006068:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80061e4 <_strtod_l+0x29c>
 800606c:	e7e8      	b.n	8006040 <_strtod_l+0xf8>
 800606e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006072:	f04f 38ff 	mov.w	r8, #4294967295
 8006076:	e7e3      	b.n	8006040 <_strtod_l+0xf8>
 8006078:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	921b      	str	r2, [sp, #108]	; 0x6c
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	d0f9      	beq.n	8006078 <_strtod_l+0x130>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0a0      	beq.n	8005fca <_strtod_l+0x82>
 8006088:	2301      	movs	r3, #1
 800608a:	9307      	str	r3, [sp, #28]
 800608c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800608e:	220a      	movs	r2, #10
 8006090:	9308      	str	r3, [sp, #32]
 8006092:	2300      	movs	r3, #0
 8006094:	469b      	mov	fp, r3
 8006096:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800609a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800609c:	7805      	ldrb	r5, [r0, #0]
 800609e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80060a2:	b2d9      	uxtb	r1, r3
 80060a4:	2909      	cmp	r1, #9
 80060a6:	d926      	bls.n	80060f6 <_strtod_l+0x1ae>
 80060a8:	4622      	mov	r2, r4
 80060aa:	4639      	mov	r1, r7
 80060ac:	f001 ff06 	bl	8007ebc <strncmp>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d032      	beq.n	800611a <_strtod_l+0x1d2>
 80060b4:	2000      	movs	r0, #0
 80060b6:	462b      	mov	r3, r5
 80060b8:	465c      	mov	r4, fp
 80060ba:	4602      	mov	r2, r0
 80060bc:	9004      	str	r0, [sp, #16]
 80060be:	2b65      	cmp	r3, #101	; 0x65
 80060c0:	d001      	beq.n	80060c6 <_strtod_l+0x17e>
 80060c2:	2b45      	cmp	r3, #69	; 0x45
 80060c4:	d113      	bne.n	80060ee <_strtod_l+0x1a6>
 80060c6:	b91c      	cbnz	r4, 80060d0 <_strtod_l+0x188>
 80060c8:	9b07      	ldr	r3, [sp, #28]
 80060ca:	4303      	orrs	r3, r0
 80060cc:	d099      	beq.n	8006002 <_strtod_l+0xba>
 80060ce:	2400      	movs	r4, #0
 80060d0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80060d2:	1c73      	adds	r3, r6, #1
 80060d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80060d6:	7873      	ldrb	r3, [r6, #1]
 80060d8:	2b2b      	cmp	r3, #43	; 0x2b
 80060da:	d078      	beq.n	80061ce <_strtod_l+0x286>
 80060dc:	2b2d      	cmp	r3, #45	; 0x2d
 80060de:	d07b      	beq.n	80061d8 <_strtod_l+0x290>
 80060e0:	2700      	movs	r7, #0
 80060e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80060e6:	2909      	cmp	r1, #9
 80060e8:	f240 8082 	bls.w	80061f0 <_strtod_l+0x2a8>
 80060ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80060ee:	2500      	movs	r5, #0
 80060f0:	e09e      	b.n	8006230 <_strtod_l+0x2e8>
 80060f2:	2300      	movs	r3, #0
 80060f4:	e7c9      	b.n	800608a <_strtod_l+0x142>
 80060f6:	f1bb 0f08 	cmp.w	fp, #8
 80060fa:	bfd5      	itete	le
 80060fc:	9906      	ldrle	r1, [sp, #24]
 80060fe:	9905      	ldrgt	r1, [sp, #20]
 8006100:	fb02 3301 	mlale	r3, r2, r1, r3
 8006104:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006108:	f100 0001 	add.w	r0, r0, #1
 800610c:	bfd4      	ite	le
 800610e:	9306      	strle	r3, [sp, #24]
 8006110:	9305      	strgt	r3, [sp, #20]
 8006112:	f10b 0b01 	add.w	fp, fp, #1
 8006116:	901b      	str	r0, [sp, #108]	; 0x6c
 8006118:	e7bf      	b.n	800609a <_strtod_l+0x152>
 800611a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800611c:	191a      	adds	r2, r3, r4
 800611e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006120:	5d1b      	ldrb	r3, [r3, r4]
 8006122:	f1bb 0f00 	cmp.w	fp, #0
 8006126:	d036      	beq.n	8006196 <_strtod_l+0x24e>
 8006128:	465c      	mov	r4, fp
 800612a:	9004      	str	r0, [sp, #16]
 800612c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006130:	2a09      	cmp	r2, #9
 8006132:	d912      	bls.n	800615a <_strtod_l+0x212>
 8006134:	2201      	movs	r2, #1
 8006136:	e7c2      	b.n	80060be <_strtod_l+0x176>
 8006138:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800613a:	3001      	adds	r0, #1
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b30      	cmp	r3, #48	; 0x30
 8006144:	d0f8      	beq.n	8006138 <_strtod_l+0x1f0>
 8006146:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800614a:	2a08      	cmp	r2, #8
 800614c:	f200 84dc 	bhi.w	8006b08 <_strtod_l+0xbc0>
 8006150:	9004      	str	r0, [sp, #16]
 8006152:	2000      	movs	r0, #0
 8006154:	4604      	mov	r4, r0
 8006156:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006158:	9208      	str	r2, [sp, #32]
 800615a:	3b30      	subs	r3, #48	; 0x30
 800615c:	f100 0201 	add.w	r2, r0, #1
 8006160:	d013      	beq.n	800618a <_strtod_l+0x242>
 8006162:	9904      	ldr	r1, [sp, #16]
 8006164:	1905      	adds	r5, r0, r4
 8006166:	4411      	add	r1, r2
 8006168:	9104      	str	r1, [sp, #16]
 800616a:	4622      	mov	r2, r4
 800616c:	210a      	movs	r1, #10
 800616e:	42aa      	cmp	r2, r5
 8006170:	d113      	bne.n	800619a <_strtod_l+0x252>
 8006172:	1822      	adds	r2, r4, r0
 8006174:	2a08      	cmp	r2, #8
 8006176:	f104 0401 	add.w	r4, r4, #1
 800617a:	4404      	add	r4, r0
 800617c:	dc1b      	bgt.n	80061b6 <_strtod_l+0x26e>
 800617e:	220a      	movs	r2, #10
 8006180:	9906      	ldr	r1, [sp, #24]
 8006182:	fb02 3301 	mla	r3, r2, r1, r3
 8006186:	9306      	str	r3, [sp, #24]
 8006188:	2200      	movs	r2, #0
 800618a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800618c:	4610      	mov	r0, r2
 800618e:	1c59      	adds	r1, r3, #1
 8006190:	911b      	str	r1, [sp, #108]	; 0x6c
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	e7ca      	b.n	800612c <_strtod_l+0x1e4>
 8006196:	4658      	mov	r0, fp
 8006198:	e7d3      	b.n	8006142 <_strtod_l+0x1fa>
 800619a:	2a08      	cmp	r2, #8
 800619c:	dc04      	bgt.n	80061a8 <_strtod_l+0x260>
 800619e:	9f06      	ldr	r7, [sp, #24]
 80061a0:	434f      	muls	r7, r1
 80061a2:	9706      	str	r7, [sp, #24]
 80061a4:	3201      	adds	r2, #1
 80061a6:	e7e2      	b.n	800616e <_strtod_l+0x226>
 80061a8:	1c57      	adds	r7, r2, #1
 80061aa:	2f10      	cmp	r7, #16
 80061ac:	bfde      	ittt	le
 80061ae:	9f05      	ldrle	r7, [sp, #20]
 80061b0:	434f      	mulle	r7, r1
 80061b2:	9705      	strle	r7, [sp, #20]
 80061b4:	e7f6      	b.n	80061a4 <_strtod_l+0x25c>
 80061b6:	2c10      	cmp	r4, #16
 80061b8:	bfdf      	itttt	le
 80061ba:	220a      	movle	r2, #10
 80061bc:	9905      	ldrle	r1, [sp, #20]
 80061be:	fb02 3301 	mlale	r3, r2, r1, r3
 80061c2:	9305      	strle	r3, [sp, #20]
 80061c4:	e7e0      	b.n	8006188 <_strtod_l+0x240>
 80061c6:	2300      	movs	r3, #0
 80061c8:	2201      	movs	r2, #1
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	e77c      	b.n	80060c8 <_strtod_l+0x180>
 80061ce:	2700      	movs	r7, #0
 80061d0:	1cb3      	adds	r3, r6, #2
 80061d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80061d4:	78b3      	ldrb	r3, [r6, #2]
 80061d6:	e784      	b.n	80060e2 <_strtod_l+0x19a>
 80061d8:	2701      	movs	r7, #1
 80061da:	e7f9      	b.n	80061d0 <_strtod_l+0x288>
 80061dc:	08009b64 	.word	0x08009b64
 80061e0:	08009a98 	.word	0x08009a98
 80061e4:	7ff00000 	.word	0x7ff00000
 80061e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	911b      	str	r1, [sp, #108]	; 0x6c
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	2b30      	cmp	r3, #48	; 0x30
 80061f2:	d0f9      	beq.n	80061e8 <_strtod_l+0x2a0>
 80061f4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80061f8:	2908      	cmp	r1, #8
 80061fa:	f63f af78 	bhi.w	80060ee <_strtod_l+0x1a6>
 80061fe:	f04f 0e0a 	mov.w	lr, #10
 8006202:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8006206:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006208:	9309      	str	r3, [sp, #36]	; 0x24
 800620a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800620c:	1c59      	adds	r1, r3, #1
 800620e:	911b      	str	r1, [sp, #108]	; 0x6c
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006216:	2d09      	cmp	r5, #9
 8006218:	d935      	bls.n	8006286 <_strtod_l+0x33e>
 800621a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800621c:	1b49      	subs	r1, r1, r5
 800621e:	2908      	cmp	r1, #8
 8006220:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006224:	dc02      	bgt.n	800622c <_strtod_l+0x2e4>
 8006226:	4565      	cmp	r5, ip
 8006228:	bfa8      	it	ge
 800622a:	4665      	movge	r5, ip
 800622c:	b107      	cbz	r7, 8006230 <_strtod_l+0x2e8>
 800622e:	426d      	negs	r5, r5
 8006230:	2c00      	cmp	r4, #0
 8006232:	d14c      	bne.n	80062ce <_strtod_l+0x386>
 8006234:	9907      	ldr	r1, [sp, #28]
 8006236:	4301      	orrs	r1, r0
 8006238:	f47f aec7 	bne.w	8005fca <_strtod_l+0x82>
 800623c:	2a00      	cmp	r2, #0
 800623e:	f47f aee0 	bne.w	8006002 <_strtod_l+0xba>
 8006242:	2b69      	cmp	r3, #105	; 0x69
 8006244:	d026      	beq.n	8006294 <_strtod_l+0x34c>
 8006246:	dc23      	bgt.n	8006290 <_strtod_l+0x348>
 8006248:	2b49      	cmp	r3, #73	; 0x49
 800624a:	d023      	beq.n	8006294 <_strtod_l+0x34c>
 800624c:	2b4e      	cmp	r3, #78	; 0x4e
 800624e:	f47f aed8 	bne.w	8006002 <_strtod_l+0xba>
 8006252:	499c      	ldr	r1, [pc, #624]	; (80064c4 <_strtod_l+0x57c>)
 8006254:	a81b      	add	r0, sp, #108	; 0x6c
 8006256:	f001 f865 	bl	8007324 <__match>
 800625a:	2800      	cmp	r0, #0
 800625c:	f43f aed1 	beq.w	8006002 <_strtod_l+0xba>
 8006260:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b28      	cmp	r3, #40	; 0x28
 8006266:	d12c      	bne.n	80062c2 <_strtod_l+0x37a>
 8006268:	4997      	ldr	r1, [pc, #604]	; (80064c8 <_strtod_l+0x580>)
 800626a:	aa1e      	add	r2, sp, #120	; 0x78
 800626c:	a81b      	add	r0, sp, #108	; 0x6c
 800626e:	f001 f86d 	bl	800734c <__hexnan>
 8006272:	2805      	cmp	r0, #5
 8006274:	d125      	bne.n	80062c2 <_strtod_l+0x37a>
 8006276:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006278:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800627c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006280:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006284:	e6a1      	b.n	8005fca <_strtod_l+0x82>
 8006286:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800628a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800628e:	e7bc      	b.n	800620a <_strtod_l+0x2c2>
 8006290:	2b6e      	cmp	r3, #110	; 0x6e
 8006292:	e7dc      	b.n	800624e <_strtod_l+0x306>
 8006294:	498d      	ldr	r1, [pc, #564]	; (80064cc <_strtod_l+0x584>)
 8006296:	a81b      	add	r0, sp, #108	; 0x6c
 8006298:	f001 f844 	bl	8007324 <__match>
 800629c:	2800      	cmp	r0, #0
 800629e:	f43f aeb0 	beq.w	8006002 <_strtod_l+0xba>
 80062a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062a4:	498a      	ldr	r1, [pc, #552]	; (80064d0 <_strtod_l+0x588>)
 80062a6:	3b01      	subs	r3, #1
 80062a8:	a81b      	add	r0, sp, #108	; 0x6c
 80062aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80062ac:	f001 f83a 	bl	8007324 <__match>
 80062b0:	b910      	cbnz	r0, 80062b8 <_strtod_l+0x370>
 80062b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062b4:	3301      	adds	r3, #1
 80062b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80062b8:	f04f 0800 	mov.w	r8, #0
 80062bc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80064e0 <_strtod_l+0x598>
 80062c0:	e683      	b.n	8005fca <_strtod_l+0x82>
 80062c2:	4884      	ldr	r0, [pc, #528]	; (80064d4 <_strtod_l+0x58c>)
 80062c4:	f001 fdec 	bl	8007ea0 <nan>
 80062c8:	4680      	mov	r8, r0
 80062ca:	4689      	mov	r9, r1
 80062cc:	e67d      	b.n	8005fca <_strtod_l+0x82>
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	f1bb 0f00 	cmp.w	fp, #0
 80062d4:	bf08      	it	eq
 80062d6:	46a3      	moveq	fp, r4
 80062d8:	1aeb      	subs	r3, r5, r3
 80062da:	2c10      	cmp	r4, #16
 80062dc:	9806      	ldr	r0, [sp, #24]
 80062de:	4626      	mov	r6, r4
 80062e0:	9307      	str	r3, [sp, #28]
 80062e2:	bfa8      	it	ge
 80062e4:	2610      	movge	r6, #16
 80062e6:	f7fa f87d 	bl	80003e4 <__aeabi_ui2d>
 80062ea:	2c09      	cmp	r4, #9
 80062ec:	4680      	mov	r8, r0
 80062ee:	4689      	mov	r9, r1
 80062f0:	dd13      	ble.n	800631a <_strtod_l+0x3d2>
 80062f2:	4b79      	ldr	r3, [pc, #484]	; (80064d8 <_strtod_l+0x590>)
 80062f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062fc:	f7fa f8ec 	bl	80004d8 <__aeabi_dmul>
 8006300:	4680      	mov	r8, r0
 8006302:	9805      	ldr	r0, [sp, #20]
 8006304:	4689      	mov	r9, r1
 8006306:	f7fa f86d 	bl	80003e4 <__aeabi_ui2d>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7f9 ff2b 	bl	800016c <__adddf3>
 8006316:	4680      	mov	r8, r0
 8006318:	4689      	mov	r9, r1
 800631a:	2c0f      	cmp	r4, #15
 800631c:	dc36      	bgt.n	800638c <_strtod_l+0x444>
 800631e:	9b07      	ldr	r3, [sp, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f43f ae52 	beq.w	8005fca <_strtod_l+0x82>
 8006326:	dd22      	ble.n	800636e <_strtod_l+0x426>
 8006328:	2b16      	cmp	r3, #22
 800632a:	dc09      	bgt.n	8006340 <_strtod_l+0x3f8>
 800632c:	4c6a      	ldr	r4, [pc, #424]	; (80064d8 <_strtod_l+0x590>)
 800632e:	4642      	mov	r2, r8
 8006330:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8006334:	464b      	mov	r3, r9
 8006336:	e9d4 0100 	ldrd	r0, r1, [r4]
 800633a:	f7fa f8cd 	bl	80004d8 <__aeabi_dmul>
 800633e:	e7c3      	b.n	80062c8 <_strtod_l+0x380>
 8006340:	9a07      	ldr	r2, [sp, #28]
 8006342:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006346:	4293      	cmp	r3, r2
 8006348:	db20      	blt.n	800638c <_strtod_l+0x444>
 800634a:	4d63      	ldr	r5, [pc, #396]	; (80064d8 <_strtod_l+0x590>)
 800634c:	f1c4 040f 	rsb	r4, r4, #15
 8006350:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006354:	4642      	mov	r2, r8
 8006356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635a:	464b      	mov	r3, r9
 800635c:	f7fa f8bc 	bl	80004d8 <__aeabi_dmul>
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	1b1c      	subs	r4, r3, r4
 8006364:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800636c:	e7e5      	b.n	800633a <_strtod_l+0x3f2>
 800636e:	9b07      	ldr	r3, [sp, #28]
 8006370:	3316      	adds	r3, #22
 8006372:	db0b      	blt.n	800638c <_strtod_l+0x444>
 8006374:	9b04      	ldr	r3, [sp, #16]
 8006376:	4a58      	ldr	r2, [pc, #352]	; (80064d8 <_strtod_l+0x590>)
 8006378:	1b5d      	subs	r5, r3, r5
 800637a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800637e:	4640      	mov	r0, r8
 8006380:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006384:	4649      	mov	r1, r9
 8006386:	f7fa f9d1 	bl	800072c <__aeabi_ddiv>
 800638a:	e79d      	b.n	80062c8 <_strtod_l+0x380>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	1ba6      	subs	r6, r4, r6
 8006390:	441e      	add	r6, r3
 8006392:	2e00      	cmp	r6, #0
 8006394:	dd71      	ble.n	800647a <_strtod_l+0x532>
 8006396:	f016 030f 	ands.w	r3, r6, #15
 800639a:	d00a      	beq.n	80063b2 <_strtod_l+0x46a>
 800639c:	494e      	ldr	r1, [pc, #312]	; (80064d8 <_strtod_l+0x590>)
 800639e:	4642      	mov	r2, r8
 80063a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a8:	464b      	mov	r3, r9
 80063aa:	f7fa f895 	bl	80004d8 <__aeabi_dmul>
 80063ae:	4680      	mov	r8, r0
 80063b0:	4689      	mov	r9, r1
 80063b2:	f036 060f 	bics.w	r6, r6, #15
 80063b6:	d050      	beq.n	800645a <_strtod_l+0x512>
 80063b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80063bc:	dd27      	ble.n	800640e <_strtod_l+0x4c6>
 80063be:	f04f 0b00 	mov.w	fp, #0
 80063c2:	f8cd b010 	str.w	fp, [sp, #16]
 80063c6:	f8cd b020 	str.w	fp, [sp, #32]
 80063ca:	f8cd b018 	str.w	fp, [sp, #24]
 80063ce:	2322      	movs	r3, #34	; 0x22
 80063d0:	f04f 0800 	mov.w	r8, #0
 80063d4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80064e0 <_strtod_l+0x598>
 80063d8:	f8ca 3000 	str.w	r3, [sl]
 80063dc:	9b08      	ldr	r3, [sp, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f43f adf3 	beq.w	8005fca <_strtod_l+0x82>
 80063e4:	4650      	mov	r0, sl
 80063e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80063e8:	f001 f8b8 	bl	800755c <_Bfree>
 80063ec:	4650      	mov	r0, sl
 80063ee:	9906      	ldr	r1, [sp, #24]
 80063f0:	f001 f8b4 	bl	800755c <_Bfree>
 80063f4:	4650      	mov	r0, sl
 80063f6:	9904      	ldr	r1, [sp, #16]
 80063f8:	f001 f8b0 	bl	800755c <_Bfree>
 80063fc:	4650      	mov	r0, sl
 80063fe:	9908      	ldr	r1, [sp, #32]
 8006400:	f001 f8ac 	bl	800755c <_Bfree>
 8006404:	4659      	mov	r1, fp
 8006406:	4650      	mov	r0, sl
 8006408:	f001 f8a8 	bl	800755c <_Bfree>
 800640c:	e5dd      	b.n	8005fca <_strtod_l+0x82>
 800640e:	2300      	movs	r3, #0
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	461f      	mov	r7, r3
 8006416:	1136      	asrs	r6, r6, #4
 8006418:	2e01      	cmp	r6, #1
 800641a:	dc21      	bgt.n	8006460 <_strtod_l+0x518>
 800641c:	b10b      	cbz	r3, 8006422 <_strtod_l+0x4da>
 800641e:	4680      	mov	r8, r0
 8006420:	4689      	mov	r9, r1
 8006422:	4b2e      	ldr	r3, [pc, #184]	; (80064dc <_strtod_l+0x594>)
 8006424:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006428:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800642c:	4642      	mov	r2, r8
 800642e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006432:	464b      	mov	r3, r9
 8006434:	f7fa f850 	bl	80004d8 <__aeabi_dmul>
 8006438:	4b29      	ldr	r3, [pc, #164]	; (80064e0 <_strtod_l+0x598>)
 800643a:	460a      	mov	r2, r1
 800643c:	400b      	ands	r3, r1
 800643e:	4929      	ldr	r1, [pc, #164]	; (80064e4 <_strtod_l+0x59c>)
 8006440:	4680      	mov	r8, r0
 8006442:	428b      	cmp	r3, r1
 8006444:	d8bb      	bhi.n	80063be <_strtod_l+0x476>
 8006446:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800644a:	428b      	cmp	r3, r1
 800644c:	bf86      	itte	hi
 800644e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006452:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80064e8 <_strtod_l+0x5a0>
 8006456:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800645a:	2300      	movs	r3, #0
 800645c:	9305      	str	r3, [sp, #20]
 800645e:	e07e      	b.n	800655e <_strtod_l+0x616>
 8006460:	07f2      	lsls	r2, r6, #31
 8006462:	d507      	bpl.n	8006474 <_strtod_l+0x52c>
 8006464:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <_strtod_l+0x594>)
 8006466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f833 	bl	80004d8 <__aeabi_dmul>
 8006472:	2301      	movs	r3, #1
 8006474:	3701      	adds	r7, #1
 8006476:	1076      	asrs	r6, r6, #1
 8006478:	e7ce      	b.n	8006418 <_strtod_l+0x4d0>
 800647a:	d0ee      	beq.n	800645a <_strtod_l+0x512>
 800647c:	4276      	negs	r6, r6
 800647e:	f016 020f 	ands.w	r2, r6, #15
 8006482:	d00a      	beq.n	800649a <_strtod_l+0x552>
 8006484:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <_strtod_l+0x590>)
 8006486:	4640      	mov	r0, r8
 8006488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800648c:	4649      	mov	r1, r9
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7fa f94b 	bl	800072c <__aeabi_ddiv>
 8006496:	4680      	mov	r8, r0
 8006498:	4689      	mov	r9, r1
 800649a:	1136      	asrs	r6, r6, #4
 800649c:	d0dd      	beq.n	800645a <_strtod_l+0x512>
 800649e:	2e1f      	cmp	r6, #31
 80064a0:	dd24      	ble.n	80064ec <_strtod_l+0x5a4>
 80064a2:	f04f 0b00 	mov.w	fp, #0
 80064a6:	f8cd b010 	str.w	fp, [sp, #16]
 80064aa:	f8cd b020 	str.w	fp, [sp, #32]
 80064ae:	f8cd b018 	str.w	fp, [sp, #24]
 80064b2:	2322      	movs	r3, #34	; 0x22
 80064b4:	f04f 0800 	mov.w	r8, #0
 80064b8:	f04f 0900 	mov.w	r9, #0
 80064bc:	f8ca 3000 	str.w	r3, [sl]
 80064c0:	e78c      	b.n	80063dc <_strtod_l+0x494>
 80064c2:	bf00      	nop
 80064c4:	08009a93 	.word	0x08009a93
 80064c8:	08009aac 	.word	0x08009aac
 80064cc:	08009a90 	.word	0x08009a90
 80064d0:	08009e2c 	.word	0x08009e2c
 80064d4:	08009d27 	.word	0x08009d27
 80064d8:	08009c18 	.word	0x08009c18
 80064dc:	08009bf0 	.word	0x08009bf0
 80064e0:	7ff00000 	.word	0x7ff00000
 80064e4:	7ca00000 	.word	0x7ca00000
 80064e8:	7fefffff 	.word	0x7fefffff
 80064ec:	f016 0310 	ands.w	r3, r6, #16
 80064f0:	bf18      	it	ne
 80064f2:	236a      	movne	r3, #106	; 0x6a
 80064f4:	4640      	mov	r0, r8
 80064f6:	9305      	str	r3, [sp, #20]
 80064f8:	4649      	mov	r1, r9
 80064fa:	2300      	movs	r3, #0
 80064fc:	4fb2      	ldr	r7, [pc, #712]	; (80067c8 <_strtod_l+0x880>)
 80064fe:	07f2      	lsls	r2, r6, #31
 8006500:	d504      	bpl.n	800650c <_strtod_l+0x5c4>
 8006502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006506:	f7f9 ffe7 	bl	80004d8 <__aeabi_dmul>
 800650a:	2301      	movs	r3, #1
 800650c:	1076      	asrs	r6, r6, #1
 800650e:	f107 0708 	add.w	r7, r7, #8
 8006512:	d1f4      	bne.n	80064fe <_strtod_l+0x5b6>
 8006514:	b10b      	cbz	r3, 800651a <_strtod_l+0x5d2>
 8006516:	4680      	mov	r8, r0
 8006518:	4689      	mov	r9, r1
 800651a:	9b05      	ldr	r3, [sp, #20]
 800651c:	b1bb      	cbz	r3, 800654e <_strtod_l+0x606>
 800651e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006522:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006526:	2b00      	cmp	r3, #0
 8006528:	4649      	mov	r1, r9
 800652a:	dd10      	ble.n	800654e <_strtod_l+0x606>
 800652c:	2b1f      	cmp	r3, #31
 800652e:	f340 812b 	ble.w	8006788 <_strtod_l+0x840>
 8006532:	2b34      	cmp	r3, #52	; 0x34
 8006534:	bfd8      	it	le
 8006536:	f04f 32ff 	movle.w	r2, #4294967295
 800653a:	f04f 0800 	mov.w	r8, #0
 800653e:	bfcf      	iteee	gt
 8006540:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006544:	3b20      	suble	r3, #32
 8006546:	fa02 f303 	lslle.w	r3, r2, r3
 800654a:	ea03 0901 	andle.w	r9, r3, r1
 800654e:	2200      	movs	r2, #0
 8006550:	2300      	movs	r3, #0
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7fa fa27 	bl	80009a8 <__aeabi_dcmpeq>
 800655a:	2800      	cmp	r0, #0
 800655c:	d1a1      	bne.n	80064a2 <_strtod_l+0x55a>
 800655e:	9b06      	ldr	r3, [sp, #24]
 8006560:	465a      	mov	r2, fp
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	4650      	mov	r0, sl
 8006566:	4623      	mov	r3, r4
 8006568:	9908      	ldr	r1, [sp, #32]
 800656a:	f001 f863 	bl	8007634 <__s2b>
 800656e:	9008      	str	r0, [sp, #32]
 8006570:	2800      	cmp	r0, #0
 8006572:	f43f af24 	beq.w	80063be <_strtod_l+0x476>
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	f04f 0b00 	mov.w	fp, #0
 800657c:	1b5d      	subs	r5, r3, r5
 800657e:	9b07      	ldr	r3, [sp, #28]
 8006580:	f8cd b010 	str.w	fp, [sp, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfb4      	ite	lt
 8006588:	462b      	movlt	r3, r5
 800658a:	2300      	movge	r3, #0
 800658c:	930e      	str	r3, [sp, #56]	; 0x38
 800658e:	9b07      	ldr	r3, [sp, #28]
 8006590:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006594:	9316      	str	r3, [sp, #88]	; 0x58
 8006596:	9b08      	ldr	r3, [sp, #32]
 8006598:	4650      	mov	r0, sl
 800659a:	6859      	ldr	r1, [r3, #4]
 800659c:	f000 ff9e 	bl	80074dc <_Balloc>
 80065a0:	9006      	str	r0, [sp, #24]
 80065a2:	2800      	cmp	r0, #0
 80065a4:	f43f af13 	beq.w	80063ce <_strtod_l+0x486>
 80065a8:	9b08      	ldr	r3, [sp, #32]
 80065aa:	300c      	adds	r0, #12
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	f103 010c 	add.w	r1, r3, #12
 80065b2:	3202      	adds	r2, #2
 80065b4:	0092      	lsls	r2, r2, #2
 80065b6:	f000 ff77 	bl	80074a8 <memcpy>
 80065ba:	ab1e      	add	r3, sp, #120	; 0x78
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	ab1d      	add	r3, sp, #116	; 0x74
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	4642      	mov	r2, r8
 80065c4:	464b      	mov	r3, r9
 80065c6:	4650      	mov	r0, sl
 80065c8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80065cc:	f001 fb70 	bl	8007cb0 <__d2b>
 80065d0:	901c      	str	r0, [sp, #112]	; 0x70
 80065d2:	2800      	cmp	r0, #0
 80065d4:	f43f aefb 	beq.w	80063ce <_strtod_l+0x486>
 80065d8:	2101      	movs	r1, #1
 80065da:	4650      	mov	r0, sl
 80065dc:	f001 f8c2 	bl	8007764 <__i2b>
 80065e0:	4603      	mov	r3, r0
 80065e2:	9004      	str	r0, [sp, #16]
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f43f aef2 	beq.w	80063ce <_strtod_l+0x486>
 80065ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80065ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	bfab      	itete	ge
 80065f2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80065f4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80065f6:	18ee      	addge	r6, r5, r3
 80065f8:	1b5c      	sublt	r4, r3, r5
 80065fa:	9b05      	ldr	r3, [sp, #20]
 80065fc:	bfa8      	it	ge
 80065fe:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006600:	eba5 0503 	sub.w	r5, r5, r3
 8006604:	4415      	add	r5, r2
 8006606:	4b71      	ldr	r3, [pc, #452]	; (80067cc <_strtod_l+0x884>)
 8006608:	f105 35ff 	add.w	r5, r5, #4294967295
 800660c:	bfb8      	it	lt
 800660e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006610:	429d      	cmp	r5, r3
 8006612:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006616:	f280 80c9 	bge.w	80067ac <_strtod_l+0x864>
 800661a:	1b5b      	subs	r3, r3, r5
 800661c:	2b1f      	cmp	r3, #31
 800661e:	f04f 0701 	mov.w	r7, #1
 8006622:	eba2 0203 	sub.w	r2, r2, r3
 8006626:	f300 80b6 	bgt.w	8006796 <_strtod_l+0x84e>
 800662a:	2500      	movs	r5, #0
 800662c:	fa07 f303 	lsl.w	r3, r7, r3
 8006630:	930f      	str	r3, [sp, #60]	; 0x3c
 8006632:	18b7      	adds	r7, r6, r2
 8006634:	9b05      	ldr	r3, [sp, #20]
 8006636:	42be      	cmp	r6, r7
 8006638:	4414      	add	r4, r2
 800663a:	441c      	add	r4, r3
 800663c:	4633      	mov	r3, r6
 800663e:	bfa8      	it	ge
 8006640:	463b      	movge	r3, r7
 8006642:	42a3      	cmp	r3, r4
 8006644:	bfa8      	it	ge
 8006646:	4623      	movge	r3, r4
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfc2      	ittt	gt
 800664c:	1aff      	subgt	r7, r7, r3
 800664e:	1ae4      	subgt	r4, r4, r3
 8006650:	1af6      	subgt	r6, r6, r3
 8006652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006654:	2b00      	cmp	r3, #0
 8006656:	dd17      	ble.n	8006688 <_strtod_l+0x740>
 8006658:	461a      	mov	r2, r3
 800665a:	4650      	mov	r0, sl
 800665c:	9904      	ldr	r1, [sp, #16]
 800665e:	f001 f93b 	bl	80078d8 <__pow5mult>
 8006662:	9004      	str	r0, [sp, #16]
 8006664:	2800      	cmp	r0, #0
 8006666:	f43f aeb2 	beq.w	80063ce <_strtod_l+0x486>
 800666a:	4601      	mov	r1, r0
 800666c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800666e:	4650      	mov	r0, sl
 8006670:	f001 f88e 	bl	8007790 <__multiply>
 8006674:	9009      	str	r0, [sp, #36]	; 0x24
 8006676:	2800      	cmp	r0, #0
 8006678:	f43f aea9 	beq.w	80063ce <_strtod_l+0x486>
 800667c:	4650      	mov	r0, sl
 800667e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006680:	f000 ff6c 	bl	800755c <_Bfree>
 8006684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006686:	931c      	str	r3, [sp, #112]	; 0x70
 8006688:	2f00      	cmp	r7, #0
 800668a:	f300 8093 	bgt.w	80067b4 <_strtod_l+0x86c>
 800668e:	9b07      	ldr	r3, [sp, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	dd08      	ble.n	80066a6 <_strtod_l+0x75e>
 8006694:	4650      	mov	r0, sl
 8006696:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006698:	9906      	ldr	r1, [sp, #24]
 800669a:	f001 f91d 	bl	80078d8 <__pow5mult>
 800669e:	9006      	str	r0, [sp, #24]
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f43f ae94 	beq.w	80063ce <_strtod_l+0x486>
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	dd08      	ble.n	80066bc <_strtod_l+0x774>
 80066aa:	4622      	mov	r2, r4
 80066ac:	4650      	mov	r0, sl
 80066ae:	9906      	ldr	r1, [sp, #24]
 80066b0:	f001 f96c 	bl	800798c <__lshift>
 80066b4:	9006      	str	r0, [sp, #24]
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f ae89 	beq.w	80063ce <_strtod_l+0x486>
 80066bc:	2e00      	cmp	r6, #0
 80066be:	dd08      	ble.n	80066d2 <_strtod_l+0x78a>
 80066c0:	4632      	mov	r2, r6
 80066c2:	4650      	mov	r0, sl
 80066c4:	9904      	ldr	r1, [sp, #16]
 80066c6:	f001 f961 	bl	800798c <__lshift>
 80066ca:	9004      	str	r0, [sp, #16]
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f43f ae7e 	beq.w	80063ce <_strtod_l+0x486>
 80066d2:	4650      	mov	r0, sl
 80066d4:	9a06      	ldr	r2, [sp, #24]
 80066d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066d8:	f001 f9e0 	bl	8007a9c <__mdiff>
 80066dc:	4683      	mov	fp, r0
 80066de:	2800      	cmp	r0, #0
 80066e0:	f43f ae75 	beq.w	80063ce <_strtod_l+0x486>
 80066e4:	2400      	movs	r4, #0
 80066e6:	68c3      	ldr	r3, [r0, #12]
 80066e8:	9904      	ldr	r1, [sp, #16]
 80066ea:	60c4      	str	r4, [r0, #12]
 80066ec:	930d      	str	r3, [sp, #52]	; 0x34
 80066ee:	f001 f9b9 	bl	8007a64 <__mcmp>
 80066f2:	42a0      	cmp	r0, r4
 80066f4:	da70      	bge.n	80067d8 <_strtod_l+0x890>
 80066f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066f8:	ea53 0308 	orrs.w	r3, r3, r8
 80066fc:	f040 8096 	bne.w	800682c <_strtod_l+0x8e4>
 8006700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8091 	bne.w	800682c <_strtod_l+0x8e4>
 800670a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800670e:	0d1b      	lsrs	r3, r3, #20
 8006710:	051b      	lsls	r3, r3, #20
 8006712:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006716:	f240 8089 	bls.w	800682c <_strtod_l+0x8e4>
 800671a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800671e:	b923      	cbnz	r3, 800672a <_strtod_l+0x7e2>
 8006720:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006724:	2b01      	cmp	r3, #1
 8006726:	f340 8081 	ble.w	800682c <_strtod_l+0x8e4>
 800672a:	4659      	mov	r1, fp
 800672c:	2201      	movs	r2, #1
 800672e:	4650      	mov	r0, sl
 8006730:	f001 f92c 	bl	800798c <__lshift>
 8006734:	9904      	ldr	r1, [sp, #16]
 8006736:	4683      	mov	fp, r0
 8006738:	f001 f994 	bl	8007a64 <__mcmp>
 800673c:	2800      	cmp	r0, #0
 800673e:	dd75      	ble.n	800682c <_strtod_l+0x8e4>
 8006740:	9905      	ldr	r1, [sp, #20]
 8006742:	464b      	mov	r3, r9
 8006744:	4a22      	ldr	r2, [pc, #136]	; (80067d0 <_strtod_l+0x888>)
 8006746:	2900      	cmp	r1, #0
 8006748:	f000 8091 	beq.w	800686e <_strtod_l+0x926>
 800674c:	ea02 0109 	and.w	r1, r2, r9
 8006750:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006754:	f300 808b 	bgt.w	800686e <_strtod_l+0x926>
 8006758:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800675c:	f77f aea9 	ble.w	80064b2 <_strtod_l+0x56a>
 8006760:	2300      	movs	r3, #0
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <_strtod_l+0x88c>)
 8006764:	4640      	mov	r0, r8
 8006766:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800676a:	4649      	mov	r1, r9
 800676c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006770:	f7f9 feb2 	bl	80004d8 <__aeabi_dmul>
 8006774:	460b      	mov	r3, r1
 8006776:	4303      	orrs	r3, r0
 8006778:	bf08      	it	eq
 800677a:	2322      	moveq	r3, #34	; 0x22
 800677c:	4680      	mov	r8, r0
 800677e:	4689      	mov	r9, r1
 8006780:	bf08      	it	eq
 8006782:	f8ca 3000 	streq.w	r3, [sl]
 8006786:	e62d      	b.n	80063e4 <_strtod_l+0x49c>
 8006788:	f04f 32ff 	mov.w	r2, #4294967295
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	ea03 0808 	and.w	r8, r3, r8
 8006794:	e6db      	b.n	800654e <_strtod_l+0x606>
 8006796:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800679a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800679e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80067a2:	35e2      	adds	r5, #226	; 0xe2
 80067a4:	fa07 f505 	lsl.w	r5, r7, r5
 80067a8:	970f      	str	r7, [sp, #60]	; 0x3c
 80067aa:	e742      	b.n	8006632 <_strtod_l+0x6ea>
 80067ac:	2301      	movs	r3, #1
 80067ae:	2500      	movs	r5, #0
 80067b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80067b2:	e73e      	b.n	8006632 <_strtod_l+0x6ea>
 80067b4:	463a      	mov	r2, r7
 80067b6:	4650      	mov	r0, sl
 80067b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067ba:	f001 f8e7 	bl	800798c <__lshift>
 80067be:	901c      	str	r0, [sp, #112]	; 0x70
 80067c0:	2800      	cmp	r0, #0
 80067c2:	f47f af64 	bne.w	800668e <_strtod_l+0x746>
 80067c6:	e602      	b.n	80063ce <_strtod_l+0x486>
 80067c8:	08009ac0 	.word	0x08009ac0
 80067cc:	fffffc02 	.word	0xfffffc02
 80067d0:	7ff00000 	.word	0x7ff00000
 80067d4:	39500000 	.word	0x39500000
 80067d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067dc:	d166      	bne.n	80068ac <_strtod_l+0x964>
 80067de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067e4:	b35a      	cbz	r2, 800683e <_strtod_l+0x8f6>
 80067e6:	4a9c      	ldr	r2, [pc, #624]	; (8006a58 <_strtod_l+0xb10>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d12c      	bne.n	8006846 <_strtod_l+0x8fe>
 80067ec:	9b05      	ldr	r3, [sp, #20]
 80067ee:	4640      	mov	r0, r8
 80067f0:	b303      	cbz	r3, 8006834 <_strtod_l+0x8ec>
 80067f2:	464b      	mov	r3, r9
 80067f4:	4a99      	ldr	r2, [pc, #612]	; (8006a5c <_strtod_l+0xb14>)
 80067f6:	f04f 31ff 	mov.w	r1, #4294967295
 80067fa:	401a      	ands	r2, r3
 80067fc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006800:	d81b      	bhi.n	800683a <_strtod_l+0x8f2>
 8006802:	0d12      	lsrs	r2, r2, #20
 8006804:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006808:	fa01 f303 	lsl.w	r3, r1, r3
 800680c:	4298      	cmp	r0, r3
 800680e:	d11a      	bne.n	8006846 <_strtod_l+0x8fe>
 8006810:	4b93      	ldr	r3, [pc, #588]	; (8006a60 <_strtod_l+0xb18>)
 8006812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006814:	429a      	cmp	r2, r3
 8006816:	d102      	bne.n	800681e <_strtod_l+0x8d6>
 8006818:	3001      	adds	r0, #1
 800681a:	f43f add8 	beq.w	80063ce <_strtod_l+0x486>
 800681e:	f04f 0800 	mov.w	r8, #0
 8006822:	4b8e      	ldr	r3, [pc, #568]	; (8006a5c <_strtod_l+0xb14>)
 8006824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006826:	401a      	ands	r2, r3
 8006828:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800682c:	9b05      	ldr	r3, [sp, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d196      	bne.n	8006760 <_strtod_l+0x818>
 8006832:	e5d7      	b.n	80063e4 <_strtod_l+0x49c>
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	e7e8      	b.n	800680c <_strtod_l+0x8c4>
 800683a:	460b      	mov	r3, r1
 800683c:	e7e6      	b.n	800680c <_strtod_l+0x8c4>
 800683e:	ea53 0308 	orrs.w	r3, r3, r8
 8006842:	f43f af7d 	beq.w	8006740 <_strtod_l+0x7f8>
 8006846:	b1e5      	cbz	r5, 8006882 <_strtod_l+0x93a>
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	421d      	tst	r5, r3
 800684c:	d0ee      	beq.n	800682c <_strtod_l+0x8e4>
 800684e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006850:	4640      	mov	r0, r8
 8006852:	4649      	mov	r1, r9
 8006854:	9a05      	ldr	r2, [sp, #20]
 8006856:	b1c3      	cbz	r3, 800688a <_strtod_l+0x942>
 8006858:	f7ff fb54 	bl	8005f04 <sulp>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006864:	f7f9 fc82 	bl	800016c <__adddf3>
 8006868:	4680      	mov	r8, r0
 800686a:	4689      	mov	r9, r1
 800686c:	e7de      	b.n	800682c <_strtod_l+0x8e4>
 800686e:	4013      	ands	r3, r2
 8006870:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006874:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006878:	f04f 38ff 	mov.w	r8, #4294967295
 800687c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006880:	e7d4      	b.n	800682c <_strtod_l+0x8e4>
 8006882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006884:	ea13 0f08 	tst.w	r3, r8
 8006888:	e7e0      	b.n	800684c <_strtod_l+0x904>
 800688a:	f7ff fb3b 	bl	8005f04 <sulp>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006896:	f7f9 fc67 	bl	8000168 <__aeabi_dsub>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4680      	mov	r8, r0
 80068a0:	4689      	mov	r9, r1
 80068a2:	f7fa f881 	bl	80009a8 <__aeabi_dcmpeq>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d0c0      	beq.n	800682c <_strtod_l+0x8e4>
 80068aa:	e602      	b.n	80064b2 <_strtod_l+0x56a>
 80068ac:	4658      	mov	r0, fp
 80068ae:	9904      	ldr	r1, [sp, #16]
 80068b0:	f001 fa5a 	bl	8007d68 <__ratio>
 80068b4:	2200      	movs	r2, #0
 80068b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068ba:	4606      	mov	r6, r0
 80068bc:	460f      	mov	r7, r1
 80068be:	f7fa f887 	bl	80009d0 <__aeabi_dcmple>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d075      	beq.n	80069b2 <_strtod_l+0xa6a>
 80068c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d047      	beq.n	800695c <_strtod_l+0xa14>
 80068cc:	2600      	movs	r6, #0
 80068ce:	4f65      	ldr	r7, [pc, #404]	; (8006a64 <_strtod_l+0xb1c>)
 80068d0:	4d64      	ldr	r5, [pc, #400]	; (8006a64 <_strtod_l+0xb1c>)
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068d8:	0d1b      	lsrs	r3, r3, #20
 80068da:	051b      	lsls	r3, r3, #20
 80068dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80068de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068e0:	4b61      	ldr	r3, [pc, #388]	; (8006a68 <_strtod_l+0xb20>)
 80068e2:	429a      	cmp	r2, r3
 80068e4:	f040 80c8 	bne.w	8006a78 <_strtod_l+0xb30>
 80068e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068ec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80068f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f2:	4640      	mov	r0, r8
 80068f4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80068f8:	4649      	mov	r1, r9
 80068fa:	f001 f95f 	bl	8007bbc <__ulp>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4630      	mov	r0, r6
 8006904:	4639      	mov	r1, r7
 8006906:	f7f9 fde7 	bl	80004d8 <__aeabi_dmul>
 800690a:	4642      	mov	r2, r8
 800690c:	464b      	mov	r3, r9
 800690e:	f7f9 fc2d 	bl	800016c <__adddf3>
 8006912:	460b      	mov	r3, r1
 8006914:	4951      	ldr	r1, [pc, #324]	; (8006a5c <_strtod_l+0xb14>)
 8006916:	4a55      	ldr	r2, [pc, #340]	; (8006a6c <_strtod_l+0xb24>)
 8006918:	4019      	ands	r1, r3
 800691a:	4291      	cmp	r1, r2
 800691c:	4680      	mov	r8, r0
 800691e:	d95e      	bls.n	80069de <_strtod_l+0xa96>
 8006920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006922:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006926:	4293      	cmp	r3, r2
 8006928:	d103      	bne.n	8006932 <_strtod_l+0x9ea>
 800692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692c:	3301      	adds	r3, #1
 800692e:	f43f ad4e 	beq.w	80063ce <_strtod_l+0x486>
 8006932:	f04f 38ff 	mov.w	r8, #4294967295
 8006936:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006a60 <_strtod_l+0xb18>
 800693a:	4650      	mov	r0, sl
 800693c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800693e:	f000 fe0d 	bl	800755c <_Bfree>
 8006942:	4650      	mov	r0, sl
 8006944:	9906      	ldr	r1, [sp, #24]
 8006946:	f000 fe09 	bl	800755c <_Bfree>
 800694a:	4650      	mov	r0, sl
 800694c:	9904      	ldr	r1, [sp, #16]
 800694e:	f000 fe05 	bl	800755c <_Bfree>
 8006952:	4659      	mov	r1, fp
 8006954:	4650      	mov	r0, sl
 8006956:	f000 fe01 	bl	800755c <_Bfree>
 800695a:	e61c      	b.n	8006596 <_strtod_l+0x64e>
 800695c:	f1b8 0f00 	cmp.w	r8, #0
 8006960:	d119      	bne.n	8006996 <_strtod_l+0xa4e>
 8006962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006968:	b9e3      	cbnz	r3, 80069a4 <_strtod_l+0xa5c>
 800696a:	2200      	movs	r2, #0
 800696c:	4630      	mov	r0, r6
 800696e:	4639      	mov	r1, r7
 8006970:	4b3c      	ldr	r3, [pc, #240]	; (8006a64 <_strtod_l+0xb1c>)
 8006972:	f7fa f823 	bl	80009bc <__aeabi_dcmplt>
 8006976:	b9c8      	cbnz	r0, 80069ac <_strtod_l+0xa64>
 8006978:	2200      	movs	r2, #0
 800697a:	4630      	mov	r0, r6
 800697c:	4639      	mov	r1, r7
 800697e:	4b3c      	ldr	r3, [pc, #240]	; (8006a70 <_strtod_l+0xb28>)
 8006980:	f7f9 fdaa 	bl	80004d8 <__aeabi_dmul>
 8006984:	4604      	mov	r4, r0
 8006986:	460d      	mov	r5, r1
 8006988:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800698c:	9418      	str	r4, [sp, #96]	; 0x60
 800698e:	9319      	str	r3, [sp, #100]	; 0x64
 8006990:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006994:	e79d      	b.n	80068d2 <_strtod_l+0x98a>
 8006996:	f1b8 0f01 	cmp.w	r8, #1
 800699a:	d103      	bne.n	80069a4 <_strtod_l+0xa5c>
 800699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f43f ad87 	beq.w	80064b2 <_strtod_l+0x56a>
 80069a4:	2600      	movs	r6, #0
 80069a6:	2400      	movs	r4, #0
 80069a8:	4f32      	ldr	r7, [pc, #200]	; (8006a74 <_strtod_l+0xb2c>)
 80069aa:	e791      	b.n	80068d0 <_strtod_l+0x988>
 80069ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80069ae:	4d30      	ldr	r5, [pc, #192]	; (8006a70 <_strtod_l+0xb28>)
 80069b0:	e7ea      	b.n	8006988 <_strtod_l+0xa40>
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <_strtod_l+0xb28>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7f9 fd8d 	bl	80004d8 <__aeabi_dmul>
 80069be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c0:	4604      	mov	r4, r0
 80069c2:	460d      	mov	r5, r1
 80069c4:	b933      	cbnz	r3, 80069d4 <_strtod_l+0xa8c>
 80069c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ca:	9010      	str	r0, [sp, #64]	; 0x40
 80069cc:	9311      	str	r3, [sp, #68]	; 0x44
 80069ce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069d2:	e77e      	b.n	80068d2 <_strtod_l+0x98a>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80069dc:	e7f7      	b.n	80069ce <_strtod_l+0xa86>
 80069de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80069e2:	9b05      	ldr	r3, [sp, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1a8      	bne.n	800693a <_strtod_l+0x9f2>
 80069e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069ee:	0d1b      	lsrs	r3, r3, #20
 80069f0:	051b      	lsls	r3, r3, #20
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d1a1      	bne.n	800693a <_strtod_l+0x9f2>
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7fa fb93 	bl	8001124 <__aeabi_d2lz>
 80069fe:	f7f9 fd3d 	bl	800047c <__aeabi_l2d>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7f9 fbad 	bl	8000168 <__aeabi_dsub>
 8006a0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a14:	ea43 0308 	orr.w	r3, r3, r8
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	460d      	mov	r5, r1
 8006a1e:	d066      	beq.n	8006aee <_strtod_l+0xba6>
 8006a20:	a309      	add	r3, pc, #36	; (adr r3, 8006a48 <_strtod_l+0xb00>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 ffc9 	bl	80009bc <__aeabi_dcmplt>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f47f acda 	bne.w	80063e4 <_strtod_l+0x49c>
 8006a30:	a307      	add	r3, pc, #28	; (adr r3, 8006a50 <_strtod_l+0xb08>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7f9 ffdd 	bl	80009f8 <__aeabi_dcmpgt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f43f af7b 	beq.w	800693a <_strtod_l+0x9f2>
 8006a44:	e4ce      	b.n	80063e4 <_strtod_l+0x49c>
 8006a46:	bf00      	nop
 8006a48:	94a03595 	.word	0x94a03595
 8006a4c:	3fdfffff 	.word	0x3fdfffff
 8006a50:	35afe535 	.word	0x35afe535
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	000fffff 	.word	0x000fffff
 8006a5c:	7ff00000 	.word	0x7ff00000
 8006a60:	7fefffff 	.word	0x7fefffff
 8006a64:	3ff00000 	.word	0x3ff00000
 8006a68:	7fe00000 	.word	0x7fe00000
 8006a6c:	7c9fffff 	.word	0x7c9fffff
 8006a70:	3fe00000 	.word	0x3fe00000
 8006a74:	bff00000 	.word	0xbff00000
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	b313      	cbz	r3, 8006ac2 <_strtod_l+0xb7a>
 8006a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a82:	d81e      	bhi.n	8006ac2 <_strtod_l+0xb7a>
 8006a84:	a326      	add	r3, pc, #152	; (adr r3, 8006b20 <_strtod_l+0xbd8>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7f9 ff9f 	bl	80009d0 <__aeabi_dcmple>
 8006a92:	b190      	cbz	r0, 8006aba <_strtod_l+0xb72>
 8006a94:	4629      	mov	r1, r5
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7f9 ffe0 	bl	8000a5c <__aeabi_d2uiz>
 8006a9c:	2801      	cmp	r0, #1
 8006a9e:	bf38      	it	cc
 8006aa0:	2001      	movcc	r0, #1
 8006aa2:	f7f9 fc9f 	bl	80003e4 <__aeabi_ui2d>
 8006aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	460d      	mov	r5, r1
 8006aac:	b9d3      	cbnz	r3, 8006ae4 <_strtod_l+0xb9c>
 8006aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ab2:	9012      	str	r0, [sp, #72]	; 0x48
 8006ab4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ab6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006abc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006ac0:	1a9f      	subs	r7, r3, r2
 8006ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ac6:	f001 f879 	bl	8007bbc <__ulp>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fd01 	bl	80004d8 <__aeabi_dmul>
 8006ad6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ada:	f7f9 fb47 	bl	800016c <__adddf3>
 8006ade:	4680      	mov	r8, r0
 8006ae0:	4689      	mov	r9, r1
 8006ae2:	e77e      	b.n	80069e2 <_strtod_l+0xa9a>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006aec:	e7e3      	b.n	8006ab6 <_strtod_l+0xb6e>
 8006aee:	a30e      	add	r3, pc, #56	; (adr r3, 8006b28 <_strtod_l+0xbe0>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f7f9 ff62 	bl	80009bc <__aeabi_dcmplt>
 8006af8:	e7a1      	b.n	8006a3e <_strtod_l+0xaf6>
 8006afa:	2300      	movs	r3, #0
 8006afc:	930c      	str	r3, [sp, #48]	; 0x30
 8006afe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	f7ff ba65 	b.w	8005fd2 <_strtod_l+0x8a>
 8006b08:	2b65      	cmp	r3, #101	; 0x65
 8006b0a:	f43f ab5c 	beq.w	80061c6 <_strtod_l+0x27e>
 8006b0e:	2b45      	cmp	r3, #69	; 0x45
 8006b10:	f43f ab59 	beq.w	80061c6 <_strtod_l+0x27e>
 8006b14:	2201      	movs	r2, #1
 8006b16:	f7ff bb8d 	b.w	8006234 <_strtod_l+0x2ec>
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w
 8006b20:	ffc00000 	.word	0xffc00000
 8006b24:	41dfffff 	.word	0x41dfffff
 8006b28:	94a03595 	.word	0x94a03595
 8006b2c:	3fcfffff 	.word	0x3fcfffff

08006b30 <strtod>:
 8006b30:	460a      	mov	r2, r1
 8006b32:	4601      	mov	r1, r0
 8006b34:	4802      	ldr	r0, [pc, #8]	; (8006b40 <strtod+0x10>)
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <strtod+0x14>)
 8006b38:	6800      	ldr	r0, [r0, #0]
 8006b3a:	f7ff ba05 	b.w	8005f48 <_strtod_l>
 8006b3e:	bf00      	nop
 8006b40:	20000064 	.word	0x20000064
 8006b44:	200000cc 	.word	0x200000cc

08006b48 <print_e>:
 8006b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4a:	b08b      	sub	sp, #44	; 0x2c
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	a908      	add	r1, sp, #32
 8006b50:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006b52:	9104      	str	r1, [sp, #16]
 8006b54:	a907      	add	r1, sp, #28
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	a909      	add	r1, sp, #36	; 0x24
 8006b5a:	9102      	str	r1, [sp, #8]
 8006b5c:	1c71      	adds	r1, r6, #1
 8006b5e:	9101      	str	r1, [sp, #4]
 8006b60:	2102      	movs	r1, #2
 8006b62:	9100      	str	r1, [sp, #0]
 8006b64:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8006b68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006b6a:	f001 fa75 	bl	8008058 <_dtoa_r>
 8006b6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b74:	4601      	mov	r1, r0
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d104      	bne.n	8006b84 <print_e+0x3c>
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f001 f996 	bl	8007eac <strcpy>
 8006b80:	b00b      	add	sp, #44	; 0x2c
 8006b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b84:	462b      	mov	r3, r5
 8006b86:	7800      	ldrb	r0, [r0, #0]
 8006b88:	2e00      	cmp	r6, #0
 8006b8a:	f803 0b01 	strb.w	r0, [r3], #1
 8006b8e:	bfc8      	it	gt
 8006b90:	2401      	movgt	r4, #1
 8006b92:	4608      	mov	r0, r1
 8006b94:	212e      	movs	r1, #46	; 0x2e
 8006b96:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006b9a:	b10d      	cbz	r5, 8006ba0 <print_e+0x58>
 8006b9c:	2e00      	cmp	r6, #0
 8006b9e:	dc36      	bgt.n	8006c0e <print_e+0xc6>
 8006ba0:	2f67      	cmp	r7, #103	; 0x67
 8006ba2:	d045      	beq.n	8006c30 <print_e+0xe8>
 8006ba4:	2f47      	cmp	r7, #71	; 0x47
 8006ba6:	d045      	beq.n	8006c34 <print_e+0xec>
 8006ba8:	212e      	movs	r1, #46	; 0x2e
 8006baa:	2030      	movs	r0, #48	; 0x30
 8006bac:	2e00      	cmp	r6, #0
 8006bae:	dc37      	bgt.n	8006c20 <print_e+0xd8>
 8006bb0:	1e51      	subs	r1, r2, #1
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	bfb7      	itett	lt
 8006bba:	212d      	movlt	r1, #45	; 0x2d
 8006bbc:	222b      	movge	r2, #43	; 0x2b
 8006bbe:	f1c2 0201 	rsblt	r2, r2, #1
 8006bc2:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006bc4:	f800 7b02 	strb.w	r7, [r0], #2
 8006bc8:	bfb8      	it	lt
 8006bca:	7059      	strblt	r1, [r3, #1]
 8006bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bce:	bfa8      	it	ge
 8006bd0:	705a      	strbge	r2, [r3, #1]
 8006bd2:	2963      	cmp	r1, #99	; 0x63
 8006bd4:	dd0b      	ble.n	8006bee <print_e+0xa6>
 8006bd6:	2264      	movs	r2, #100	; 0x64
 8006bd8:	fb91 f2f2 	sdiv	r2, r1, r2
 8006bdc:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8006be0:	1cd8      	adds	r0, r3, #3
 8006be2:	709c      	strb	r4, [r3, #2]
 8006be4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006be8:	fb03 1202 	mla	r2, r3, r2, r1
 8006bec:	9209      	str	r2, [sp, #36]	; 0x24
 8006bee:	230a      	movs	r3, #10
 8006bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006bf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bfa:	7001      	strb	r1, [r0, #0]
 8006bfc:	f06f 0109 	mvn.w	r1, #9
 8006c00:	fb01 2303 	mla	r3, r1, r3, r2
 8006c04:	3330      	adds	r3, #48	; 0x30
 8006c06:	7043      	strb	r3, [r0, #1]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	7083      	strb	r3, [r0, #2]
 8006c0c:	e7b8      	b.n	8006b80 <print_e+0x38>
 8006c0e:	b10c      	cbz	r4, 8006c14 <print_e+0xcc>
 8006c10:	f803 1b01 	strb.w	r1, [r3], #1
 8006c14:	7804      	ldrb	r4, [r0, #0]
 8006c16:	3e01      	subs	r6, #1
 8006c18:	f803 4b01 	strb.w	r4, [r3], #1
 8006c1c:	2400      	movs	r4, #0
 8006c1e:	e7ba      	b.n	8006b96 <print_e+0x4e>
 8006c20:	b10c      	cbz	r4, 8006c26 <print_e+0xde>
 8006c22:	f803 1b01 	strb.w	r1, [r3], #1
 8006c26:	2400      	movs	r4, #0
 8006c28:	f803 0b01 	strb.w	r0, [r3], #1
 8006c2c:	3e01      	subs	r6, #1
 8006c2e:	e7bd      	b.n	8006bac <print_e+0x64>
 8006c30:	2765      	movs	r7, #101	; 0x65
 8006c32:	e7bd      	b.n	8006bb0 <print_e+0x68>
 8006c34:	2745      	movs	r7, #69	; 0x45
 8006c36:	e7bb      	b.n	8006bb0 <print_e+0x68>

08006c38 <_gcvt>:
 8006c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c3c:	4690      	mov	r8, r2
 8006c3e:	461c      	mov	r4, r3
 8006c40:	b08b      	sub	sp, #44	; 0x2c
 8006c42:	4681      	mov	r9, r0
 8006c44:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4621      	mov	r1, r4
 8006c50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006c52:	f7f9 feb3 	bl	80009bc <__aeabi_dcmplt>
 8006c56:	b108      	cbz	r0, 8006c5c <_gcvt+0x24>
 8006c58:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4640      	mov	r0, r8
 8006c62:	4621      	mov	r1, r4
 8006c64:	f7f9 fea0 	bl	80009a8 <__aeabi_dcmpeq>
 8006c68:	b138      	cbz	r0, 8006c7a <_gcvt+0x42>
 8006c6a:	2330      	movs	r3, #48	; 0x30
 8006c6c:	702b      	strb	r3, [r5, #0]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	706b      	strb	r3, [r5, #1]
 8006c72:	4628      	mov	r0, r5
 8006c74:	b00b      	add	sp, #44	; 0x2c
 8006c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	a34c      	add	r3, pc, #304	; (adr r3, 8006db0 <_gcvt+0x178>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	4621      	mov	r1, r4
 8006c84:	f7f9 fea4 	bl	80009d0 <__aeabi_dcmple>
 8006c88:	b160      	cbz	r0, 8006ca4 <_gcvt+0x6c>
 8006c8a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8006c8e:	3f01      	subs	r7, #1
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	4642      	mov	r2, r8
 8006c94:	4623      	mov	r3, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	4648      	mov	r0, r9
 8006c9a:	9602      	str	r6, [sp, #8]
 8006c9c:	9700      	str	r7, [sp, #0]
 8006c9e:	f7ff ff53 	bl	8006b48 <print_e>
 8006ca2:	e7e6      	b.n	8006c72 <_gcvt+0x3a>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f001 f88d 	bl	8007dc4 <_mprec_log10>
 8006caa:	4642      	mov	r2, r8
 8006cac:	4623      	mov	r3, r4
 8006cae:	f7f9 fe8f 	bl	80009d0 <__aeabi_dcmple>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d1e9      	bne.n	8006c8a <_gcvt+0x52>
 8006cb6:	ab09      	add	r3, sp, #36	; 0x24
 8006cb8:	9304      	str	r3, [sp, #16]
 8006cba:	ab08      	add	r3, sp, #32
 8006cbc:	9303      	str	r3, [sp, #12]
 8006cbe:	ab07      	add	r3, sp, #28
 8006cc0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4648      	mov	r0, r9
 8006ccc:	4623      	mov	r3, r4
 8006cce:	f001 f9c3 	bl	8008058 <_dtoa_r>
 8006cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cd6:	9a07      	ldr	r2, [sp, #28]
 8006cd8:	4601      	mov	r1, r0
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d00f      	beq.n	8006cfe <_gcvt+0xc6>
 8006cde:	462b      	mov	r3, r5
 8006ce0:	442f      	add	r7, r5
 8006ce2:	4608      	mov	r0, r1
 8006ce4:	f811 cb01 	ldrb.w	ip, [r1], #1
 8006ce8:	9a07      	ldr	r2, [sp, #28]
 8006cea:	1afc      	subs	r4, r7, r3
 8006cec:	f1bc 0f00 	cmp.w	ip, #0
 8006cf0:	d001      	beq.n	8006cf6 <_gcvt+0xbe>
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	dc07      	bgt.n	8006d06 <_gcvt+0xce>
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8006cfc:	e00c      	b.n	8006d18 <_gcvt+0xe0>
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f001 f8d4 	bl	8007eac <strcpy>
 8006d04:	e7b5      	b.n	8006c72 <_gcvt+0x3a>
 8006d06:	3a01      	subs	r2, #1
 8006d08:	f803 cb01 	strb.w	ip, [r3], #1
 8006d0c:	9207      	str	r2, [sp, #28]
 8006d0e:	e7e8      	b.n	8006ce2 <_gcvt+0xaa>
 8006d10:	2101      	movs	r1, #1
 8006d12:	f803 cb01 	strb.w	ip, [r3], #1
 8006d16:	3c01      	subs	r4, #1
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	4617      	mov	r7, r2
 8006d1c:	dc2a      	bgt.n	8006d74 <_gcvt+0x13c>
 8006d1e:	b101      	cbz	r1, 8006d22 <_gcvt+0xea>
 8006d20:	9207      	str	r2, [sp, #28]
 8006d22:	b90e      	cbnz	r6, 8006d28 <_gcvt+0xf0>
 8006d24:	7802      	ldrb	r2, [r0, #0]
 8006d26:	b312      	cbz	r2, 8006d6e <_gcvt+0x136>
 8006d28:	42ab      	cmp	r3, r5
 8006d2a:	bf04      	itt	eq
 8006d2c:	2230      	moveq	r2, #48	; 0x30
 8006d2e:	f803 2b01 	strbeq.w	r2, [r3], #1
 8006d32:	222e      	movs	r2, #46	; 0x2e
 8006d34:	4619      	mov	r1, r3
 8006d36:	2700      	movs	r7, #0
 8006d38:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	9a07      	ldr	r2, [sp, #28]
 8006d40:	eba2 0c03 	sub.w	ip, r2, r3
 8006d44:	eb1c 0f01 	cmn.w	ip, r1
 8006d48:	d41c      	bmi.n	8006d84 <_gcvt+0x14c>
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	f1c2 0100 	rsb	r1, r2, #0
 8006d50:	bfc8      	it	gt
 8006d52:	2100      	movgt	r1, #0
 8006d54:	f101 0c01 	add.w	ip, r1, #1
 8006d58:	4463      	add	r3, ip
 8006d5a:	440a      	add	r2, r1
 8006d5c:	b107      	cbz	r7, 8006d60 <_gcvt+0x128>
 8006d5e:	9207      	str	r2, [sp, #28]
 8006d60:	1e42      	subs	r2, r0, #1
 8006d62:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006d66:	b109      	cbz	r1, 8006d6c <_gcvt+0x134>
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	dc0f      	bgt.n	8006d8c <_gcvt+0x154>
 8006d6c:	b9de      	cbnz	r6, 8006da6 <_gcvt+0x16e>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	e77e      	b.n	8006c72 <_gcvt+0x3a>
 8006d74:	2c00      	cmp	r4, #0
 8006d76:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d7a:	dcc9      	bgt.n	8006d10 <_gcvt+0xd8>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d0d0      	beq.n	8006d22 <_gcvt+0xea>
 8006d80:	9707      	str	r7, [sp, #28]
 8006d82:	e7ce      	b.n	8006d22 <_gcvt+0xea>
 8006d84:	2701      	movs	r7, #1
 8006d86:	f801 ef01 	strb.w	lr, [r1, #1]!
 8006d8a:	e7db      	b.n	8006d44 <_gcvt+0x10c>
 8006d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d90:	3c01      	subs	r4, #1
 8006d92:	e7e6      	b.n	8006d62 <_gcvt+0x12a>
 8006d94:	f802 6b01 	strb.w	r6, [r2], #1
 8006d98:	1a81      	subs	r1, r0, r2
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	dcfa      	bgt.n	8006d94 <_gcvt+0x15c>
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	bfa8      	it	ge
 8006da2:	191b      	addge	r3, r3, r4
 8006da4:	e7e3      	b.n	8006d6e <_gcvt+0x136>
 8006da6:	461a      	mov	r2, r3
 8006da8:	2630      	movs	r6, #48	; 0x30
 8006daa:	1918      	adds	r0, r3, r4
 8006dac:	e7f4      	b.n	8006d98 <_gcvt+0x160>
 8006dae:	bf00      	nop
 8006db0:	eb1c432d 	.word	0xeb1c432d
 8006db4:	3f1a36e2 	.word	0x3f1a36e2

08006db8 <rshift>:
 8006db8:	6903      	ldr	r3, [r0, #16]
 8006dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006dc2:	f100 0414 	add.w	r4, r0, #20
 8006dc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006dca:	dd46      	ble.n	8006e5a <rshift+0xa2>
 8006dcc:	f011 011f 	ands.w	r1, r1, #31
 8006dd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006dd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006dd8:	d10c      	bne.n	8006df4 <rshift+0x3c>
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f100 0710 	add.w	r7, r0, #16
 8006de0:	42b1      	cmp	r1, r6
 8006de2:	d335      	bcc.n	8006e50 <rshift+0x98>
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	1eea      	subs	r2, r5, #3
 8006dea:	4296      	cmp	r6, r2
 8006dec:	bf38      	it	cc
 8006dee:	2300      	movcc	r3, #0
 8006df0:	4423      	add	r3, r4
 8006df2:	e015      	b.n	8006e20 <rshift+0x68>
 8006df4:	46a1      	mov	r9, r4
 8006df6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006dfa:	f1c1 0820 	rsb	r8, r1, #32
 8006dfe:	40cf      	lsrs	r7, r1
 8006e00:	f105 0e04 	add.w	lr, r5, #4
 8006e04:	4576      	cmp	r6, lr
 8006e06:	46f4      	mov	ip, lr
 8006e08:	d816      	bhi.n	8006e38 <rshift+0x80>
 8006e0a:	1a9b      	subs	r3, r3, r2
 8006e0c:	009a      	lsls	r2, r3, #2
 8006e0e:	3a04      	subs	r2, #4
 8006e10:	3501      	adds	r5, #1
 8006e12:	42ae      	cmp	r6, r5
 8006e14:	bf38      	it	cc
 8006e16:	2200      	movcc	r2, #0
 8006e18:	18a3      	adds	r3, r4, r2
 8006e1a:	50a7      	str	r7, [r4, r2]
 8006e1c:	b107      	cbz	r7, 8006e20 <rshift+0x68>
 8006e1e:	3304      	adds	r3, #4
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	eba3 0204 	sub.w	r2, r3, r4
 8006e26:	bf08      	it	eq
 8006e28:	2300      	moveq	r3, #0
 8006e2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e2e:	6102      	str	r2, [r0, #16]
 8006e30:	bf08      	it	eq
 8006e32:	6143      	streq	r3, [r0, #20]
 8006e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e38:	f8dc c000 	ldr.w	ip, [ip]
 8006e3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e40:	ea4c 0707 	orr.w	r7, ip, r7
 8006e44:	f849 7b04 	str.w	r7, [r9], #4
 8006e48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e4c:	40cf      	lsrs	r7, r1
 8006e4e:	e7d9      	b.n	8006e04 <rshift+0x4c>
 8006e50:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e54:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e58:	e7c2      	b.n	8006de0 <rshift+0x28>
 8006e5a:	4623      	mov	r3, r4
 8006e5c:	e7e0      	b.n	8006e20 <rshift+0x68>

08006e5e <__hexdig_fun>:
 8006e5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006e62:	2b09      	cmp	r3, #9
 8006e64:	d802      	bhi.n	8006e6c <__hexdig_fun+0xe>
 8006e66:	3820      	subs	r0, #32
 8006e68:	b2c0      	uxtb	r0, r0
 8006e6a:	4770      	bx	lr
 8006e6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d801      	bhi.n	8006e78 <__hexdig_fun+0x1a>
 8006e74:	3847      	subs	r0, #71	; 0x47
 8006e76:	e7f7      	b.n	8006e68 <__hexdig_fun+0xa>
 8006e78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e7c:	2b05      	cmp	r3, #5
 8006e7e:	d801      	bhi.n	8006e84 <__hexdig_fun+0x26>
 8006e80:	3827      	subs	r0, #39	; 0x27
 8006e82:	e7f1      	b.n	8006e68 <__hexdig_fun+0xa>
 8006e84:	2000      	movs	r0, #0
 8006e86:	4770      	bx	lr

08006e88 <__gethex>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	b08b      	sub	sp, #44	; 0x2c
 8006e8e:	9306      	str	r3, [sp, #24]
 8006e90:	4bb9      	ldr	r3, [pc, #740]	; (8007178 <__gethex+0x2f0>)
 8006e92:	9002      	str	r0, [sp, #8]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	468b      	mov	fp, r1
 8006e98:	4618      	mov	r0, r3
 8006e9a:	4690      	mov	r8, r2
 8006e9c:	9303      	str	r3, [sp, #12]
 8006e9e:	f7f9 f957 	bl	8000150 <strlen>
 8006ea2:	4682      	mov	sl, r0
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	f8db 2000 	ldr.w	r2, [fp]
 8006eaa:	4403      	add	r3, r0
 8006eac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006eb0:	9307      	str	r3, [sp, #28]
 8006eb2:	1c93      	adds	r3, r2, #2
 8006eb4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006eb8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006ebc:	32fe      	adds	r2, #254	; 0xfe
 8006ebe:	18d1      	adds	r1, r2, r3
 8006ec0:	461f      	mov	r7, r3
 8006ec2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006ec6:	9101      	str	r1, [sp, #4]
 8006ec8:	2830      	cmp	r0, #48	; 0x30
 8006eca:	d0f8      	beq.n	8006ebe <__gethex+0x36>
 8006ecc:	f7ff ffc7 	bl	8006e5e <__hexdig_fun>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d13a      	bne.n	8006f4c <__gethex+0xc4>
 8006ed6:	4652      	mov	r2, sl
 8006ed8:	4638      	mov	r0, r7
 8006eda:	9903      	ldr	r1, [sp, #12]
 8006edc:	f000 ffee 	bl	8007ebc <strncmp>
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d166      	bne.n	8006fb4 <__gethex+0x12c>
 8006ee6:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006eea:	eb07 060a 	add.w	r6, r7, sl
 8006eee:	f7ff ffb6 	bl	8006e5e <__hexdig_fun>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d060      	beq.n	8006fb8 <__gethex+0x130>
 8006ef6:	4633      	mov	r3, r6
 8006ef8:	7818      	ldrb	r0, [r3, #0]
 8006efa:	461f      	mov	r7, r3
 8006efc:	2830      	cmp	r0, #48	; 0x30
 8006efe:	f103 0301 	add.w	r3, r3, #1
 8006f02:	d0f9      	beq.n	8006ef8 <__gethex+0x70>
 8006f04:	f7ff ffab 	bl	8006e5e <__hexdig_fun>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	fab0 f480 	clz	r4, r0
 8006f0e:	4635      	mov	r5, r6
 8006f10:	0964      	lsrs	r4, r4, #5
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	463a      	mov	r2, r7
 8006f16:	4616      	mov	r6, r2
 8006f18:	7830      	ldrb	r0, [r6, #0]
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	f7ff ff9f 	bl	8006e5e <__hexdig_fun>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d1f8      	bne.n	8006f16 <__gethex+0x8e>
 8006f24:	4652      	mov	r2, sl
 8006f26:	4630      	mov	r0, r6
 8006f28:	9903      	ldr	r1, [sp, #12]
 8006f2a:	f000 ffc7 	bl	8007ebc <strncmp>
 8006f2e:	b980      	cbnz	r0, 8006f52 <__gethex+0xca>
 8006f30:	b94d      	cbnz	r5, 8006f46 <__gethex+0xbe>
 8006f32:	eb06 050a 	add.w	r5, r6, sl
 8006f36:	462a      	mov	r2, r5
 8006f38:	4616      	mov	r6, r2
 8006f3a:	7830      	ldrb	r0, [r6, #0]
 8006f3c:	3201      	adds	r2, #1
 8006f3e:	f7ff ff8e 	bl	8006e5e <__hexdig_fun>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d1f8      	bne.n	8006f38 <__gethex+0xb0>
 8006f46:	1bad      	subs	r5, r5, r6
 8006f48:	00ad      	lsls	r5, r5, #2
 8006f4a:	e004      	b.n	8006f56 <__gethex+0xce>
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	4625      	mov	r5, r4
 8006f50:	e7e0      	b.n	8006f14 <__gethex+0x8c>
 8006f52:	2d00      	cmp	r5, #0
 8006f54:	d1f7      	bne.n	8006f46 <__gethex+0xbe>
 8006f56:	7833      	ldrb	r3, [r6, #0]
 8006f58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f5c:	2b50      	cmp	r3, #80	; 0x50
 8006f5e:	d139      	bne.n	8006fd4 <__gethex+0x14c>
 8006f60:	7873      	ldrb	r3, [r6, #1]
 8006f62:	2b2b      	cmp	r3, #43	; 0x2b
 8006f64:	d02a      	beq.n	8006fbc <__gethex+0x134>
 8006f66:	2b2d      	cmp	r3, #45	; 0x2d
 8006f68:	d02c      	beq.n	8006fc4 <__gethex+0x13c>
 8006f6a:	f04f 0900 	mov.w	r9, #0
 8006f6e:	1c71      	adds	r1, r6, #1
 8006f70:	7808      	ldrb	r0, [r1, #0]
 8006f72:	f7ff ff74 	bl	8006e5e <__hexdig_fun>
 8006f76:	1e43      	subs	r3, r0, #1
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b18      	cmp	r3, #24
 8006f7c:	d82a      	bhi.n	8006fd4 <__gethex+0x14c>
 8006f7e:	f1a0 0210 	sub.w	r2, r0, #16
 8006f82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f86:	f7ff ff6a 	bl	8006e5e <__hexdig_fun>
 8006f8a:	1e43      	subs	r3, r0, #1
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b18      	cmp	r3, #24
 8006f90:	d91b      	bls.n	8006fca <__gethex+0x142>
 8006f92:	f1b9 0f00 	cmp.w	r9, #0
 8006f96:	d000      	beq.n	8006f9a <__gethex+0x112>
 8006f98:	4252      	negs	r2, r2
 8006f9a:	4415      	add	r5, r2
 8006f9c:	f8cb 1000 	str.w	r1, [fp]
 8006fa0:	b1d4      	cbz	r4, 8006fd8 <__gethex+0x150>
 8006fa2:	9b01      	ldr	r3, [sp, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf14      	ite	ne
 8006fa8:	2700      	movne	r7, #0
 8006faa:	2706      	moveq	r7, #6
 8006fac:	4638      	mov	r0, r7
 8006fae:	b00b      	add	sp, #44	; 0x2c
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	463e      	mov	r6, r7
 8006fb6:	4625      	mov	r5, r4
 8006fb8:	2401      	movs	r4, #1
 8006fba:	e7cc      	b.n	8006f56 <__gethex+0xce>
 8006fbc:	f04f 0900 	mov.w	r9, #0
 8006fc0:	1cb1      	adds	r1, r6, #2
 8006fc2:	e7d5      	b.n	8006f70 <__gethex+0xe8>
 8006fc4:	f04f 0901 	mov.w	r9, #1
 8006fc8:	e7fa      	b.n	8006fc0 <__gethex+0x138>
 8006fca:	230a      	movs	r3, #10
 8006fcc:	fb03 0202 	mla	r2, r3, r2, r0
 8006fd0:	3a10      	subs	r2, #16
 8006fd2:	e7d6      	b.n	8006f82 <__gethex+0xfa>
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	e7e1      	b.n	8006f9c <__gethex+0x114>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	1bf3      	subs	r3, r6, r7
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	dc0a      	bgt.n	8006ff8 <__gethex+0x170>
 8006fe2:	9802      	ldr	r0, [sp, #8]
 8006fe4:	f000 fa7a 	bl	80074dc <_Balloc>
 8006fe8:	4604      	mov	r4, r0
 8006fea:	b940      	cbnz	r0, 8006ffe <__gethex+0x176>
 8006fec:	4602      	mov	r2, r0
 8006fee:	21de      	movs	r1, #222	; 0xde
 8006ff0:	4b62      	ldr	r3, [pc, #392]	; (800717c <__gethex+0x2f4>)
 8006ff2:	4863      	ldr	r0, [pc, #396]	; (8007180 <__gethex+0x2f8>)
 8006ff4:	f000 ff82 	bl	8007efc <__assert_func>
 8006ff8:	3101      	adds	r1, #1
 8006ffa:	105b      	asrs	r3, r3, #1
 8006ffc:	e7ef      	b.n	8006fde <__gethex+0x156>
 8006ffe:	f04f 0b00 	mov.w	fp, #0
 8007002:	f100 0914 	add.w	r9, r0, #20
 8007006:	f1ca 0301 	rsb	r3, sl, #1
 800700a:	f8cd 9010 	str.w	r9, [sp, #16]
 800700e:	f8cd b004 	str.w	fp, [sp, #4]
 8007012:	9308      	str	r3, [sp, #32]
 8007014:	42b7      	cmp	r7, r6
 8007016:	d33f      	bcc.n	8007098 <__gethex+0x210>
 8007018:	9f04      	ldr	r7, [sp, #16]
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	f847 3b04 	str.w	r3, [r7], #4
 8007020:	eba7 0709 	sub.w	r7, r7, r9
 8007024:	10bf      	asrs	r7, r7, #2
 8007026:	6127      	str	r7, [r4, #16]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb4d 	bl	80076c8 <__hi0bits>
 800702e:	017f      	lsls	r7, r7, #5
 8007030:	f8d8 6000 	ldr.w	r6, [r8]
 8007034:	1a3f      	subs	r7, r7, r0
 8007036:	42b7      	cmp	r7, r6
 8007038:	dd62      	ble.n	8007100 <__gethex+0x278>
 800703a:	1bbf      	subs	r7, r7, r6
 800703c:	4639      	mov	r1, r7
 800703e:	4620      	mov	r0, r4
 8007040:	f000 feff 	bl	8007e42 <__any_on>
 8007044:	4682      	mov	sl, r0
 8007046:	b1a8      	cbz	r0, 8007074 <__gethex+0x1ec>
 8007048:	f04f 0a01 	mov.w	sl, #1
 800704c:	1e7b      	subs	r3, r7, #1
 800704e:	1159      	asrs	r1, r3, #5
 8007050:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007054:	f003 021f 	and.w	r2, r3, #31
 8007058:	fa0a f202 	lsl.w	r2, sl, r2
 800705c:	420a      	tst	r2, r1
 800705e:	d009      	beq.n	8007074 <__gethex+0x1ec>
 8007060:	4553      	cmp	r3, sl
 8007062:	dd05      	ble.n	8007070 <__gethex+0x1e8>
 8007064:	4620      	mov	r0, r4
 8007066:	1eb9      	subs	r1, r7, #2
 8007068:	f000 feeb 	bl	8007e42 <__any_on>
 800706c:	2800      	cmp	r0, #0
 800706e:	d144      	bne.n	80070fa <__gethex+0x272>
 8007070:	f04f 0a02 	mov.w	sl, #2
 8007074:	4639      	mov	r1, r7
 8007076:	4620      	mov	r0, r4
 8007078:	f7ff fe9e 	bl	8006db8 <rshift>
 800707c:	443d      	add	r5, r7
 800707e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007082:	42ab      	cmp	r3, r5
 8007084:	da4a      	bge.n	800711c <__gethex+0x294>
 8007086:	4621      	mov	r1, r4
 8007088:	9802      	ldr	r0, [sp, #8]
 800708a:	f000 fa67 	bl	800755c <_Bfree>
 800708e:	2300      	movs	r3, #0
 8007090:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007092:	27a3      	movs	r7, #163	; 0xa3
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	e789      	b.n	8006fac <__gethex+0x124>
 8007098:	1e73      	subs	r3, r6, #1
 800709a:	9a07      	ldr	r2, [sp, #28]
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d019      	beq.n	80070da <__gethex+0x252>
 80070a6:	f1bb 0f20 	cmp.w	fp, #32
 80070aa:	d107      	bne.n	80070bc <__gethex+0x234>
 80070ac:	9b04      	ldr	r3, [sp, #16]
 80070ae:	9a01      	ldr	r2, [sp, #4]
 80070b0:	f843 2b04 	str.w	r2, [r3], #4
 80070b4:	9304      	str	r3, [sp, #16]
 80070b6:	2300      	movs	r3, #0
 80070b8:	469b      	mov	fp, r3
 80070ba:	9301      	str	r3, [sp, #4]
 80070bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80070c0:	f7ff fecd 	bl	8006e5e <__hexdig_fun>
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	f000 000f 	and.w	r0, r0, #15
 80070ca:	fa00 f00b 	lsl.w	r0, r0, fp
 80070ce:	4303      	orrs	r3, r0
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	f10b 0b04 	add.w	fp, fp, #4
 80070d6:	9b05      	ldr	r3, [sp, #20]
 80070d8:	e00d      	b.n	80070f6 <__gethex+0x26e>
 80070da:	9b05      	ldr	r3, [sp, #20]
 80070dc:	9a08      	ldr	r2, [sp, #32]
 80070de:	4413      	add	r3, r2
 80070e0:	42bb      	cmp	r3, r7
 80070e2:	d3e0      	bcc.n	80070a6 <__gethex+0x21e>
 80070e4:	4618      	mov	r0, r3
 80070e6:	4652      	mov	r2, sl
 80070e8:	9903      	ldr	r1, [sp, #12]
 80070ea:	9309      	str	r3, [sp, #36]	; 0x24
 80070ec:	f000 fee6 	bl	8007ebc <strncmp>
 80070f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d1d7      	bne.n	80070a6 <__gethex+0x21e>
 80070f6:	461e      	mov	r6, r3
 80070f8:	e78c      	b.n	8007014 <__gethex+0x18c>
 80070fa:	f04f 0a03 	mov.w	sl, #3
 80070fe:	e7b9      	b.n	8007074 <__gethex+0x1ec>
 8007100:	da09      	bge.n	8007116 <__gethex+0x28e>
 8007102:	1bf7      	subs	r7, r6, r7
 8007104:	4621      	mov	r1, r4
 8007106:	463a      	mov	r2, r7
 8007108:	9802      	ldr	r0, [sp, #8]
 800710a:	f000 fc3f 	bl	800798c <__lshift>
 800710e:	4604      	mov	r4, r0
 8007110:	1bed      	subs	r5, r5, r7
 8007112:	f100 0914 	add.w	r9, r0, #20
 8007116:	f04f 0a00 	mov.w	sl, #0
 800711a:	e7b0      	b.n	800707e <__gethex+0x1f6>
 800711c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007120:	42a8      	cmp	r0, r5
 8007122:	dd71      	ble.n	8007208 <__gethex+0x380>
 8007124:	1b45      	subs	r5, r0, r5
 8007126:	42ae      	cmp	r6, r5
 8007128:	dc34      	bgt.n	8007194 <__gethex+0x30c>
 800712a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d028      	beq.n	8007184 <__gethex+0x2fc>
 8007132:	2b03      	cmp	r3, #3
 8007134:	d02a      	beq.n	800718c <__gethex+0x304>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d115      	bne.n	8007166 <__gethex+0x2de>
 800713a:	42ae      	cmp	r6, r5
 800713c:	d113      	bne.n	8007166 <__gethex+0x2de>
 800713e:	2e01      	cmp	r6, #1
 8007140:	d10b      	bne.n	800715a <__gethex+0x2d2>
 8007142:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007146:	9a06      	ldr	r2, [sp, #24]
 8007148:	2762      	movs	r7, #98	; 0x62
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	2301      	movs	r3, #1
 800714e:	6123      	str	r3, [r4, #16]
 8007150:	f8c9 3000 	str.w	r3, [r9]
 8007154:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007156:	601c      	str	r4, [r3, #0]
 8007158:	e728      	b.n	8006fac <__gethex+0x124>
 800715a:	4620      	mov	r0, r4
 800715c:	1e71      	subs	r1, r6, #1
 800715e:	f000 fe70 	bl	8007e42 <__any_on>
 8007162:	2800      	cmp	r0, #0
 8007164:	d1ed      	bne.n	8007142 <__gethex+0x2ba>
 8007166:	4621      	mov	r1, r4
 8007168:	9802      	ldr	r0, [sp, #8]
 800716a:	f000 f9f7 	bl	800755c <_Bfree>
 800716e:	2300      	movs	r3, #0
 8007170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007172:	2750      	movs	r7, #80	; 0x50
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e719      	b.n	8006fac <__gethex+0x124>
 8007178:	08009b64 	.word	0x08009b64
 800717c:	08009ae8 	.word	0x08009ae8
 8007180:	08009af9 	.word	0x08009af9
 8007184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1ed      	bne.n	8007166 <__gethex+0x2de>
 800718a:	e7da      	b.n	8007142 <__gethex+0x2ba>
 800718c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1d7      	bne.n	8007142 <__gethex+0x2ba>
 8007192:	e7e8      	b.n	8007166 <__gethex+0x2de>
 8007194:	1e6f      	subs	r7, r5, #1
 8007196:	f1ba 0f00 	cmp.w	sl, #0
 800719a:	d132      	bne.n	8007202 <__gethex+0x37a>
 800719c:	b127      	cbz	r7, 80071a8 <__gethex+0x320>
 800719e:	4639      	mov	r1, r7
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fe4e 	bl	8007e42 <__any_on>
 80071a6:	4682      	mov	sl, r0
 80071a8:	2101      	movs	r1, #1
 80071aa:	117b      	asrs	r3, r7, #5
 80071ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80071b0:	f007 071f 	and.w	r7, r7, #31
 80071b4:	fa01 f707 	lsl.w	r7, r1, r7
 80071b8:	421f      	tst	r7, r3
 80071ba:	f04f 0702 	mov.w	r7, #2
 80071be:	4629      	mov	r1, r5
 80071c0:	4620      	mov	r0, r4
 80071c2:	bf18      	it	ne
 80071c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80071c8:	1b76      	subs	r6, r6, r5
 80071ca:	f7ff fdf5 	bl	8006db8 <rshift>
 80071ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80071d2:	f1ba 0f00 	cmp.w	sl, #0
 80071d6:	d048      	beq.n	800726a <__gethex+0x3e2>
 80071d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d015      	beq.n	800720c <__gethex+0x384>
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d017      	beq.n	8007214 <__gethex+0x38c>
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d109      	bne.n	80071fc <__gethex+0x374>
 80071e8:	f01a 0f02 	tst.w	sl, #2
 80071ec:	d006      	beq.n	80071fc <__gethex+0x374>
 80071ee:	f8d9 0000 	ldr.w	r0, [r9]
 80071f2:	ea4a 0a00 	orr.w	sl, sl, r0
 80071f6:	f01a 0f01 	tst.w	sl, #1
 80071fa:	d10e      	bne.n	800721a <__gethex+0x392>
 80071fc:	f047 0710 	orr.w	r7, r7, #16
 8007200:	e033      	b.n	800726a <__gethex+0x3e2>
 8007202:	f04f 0a01 	mov.w	sl, #1
 8007206:	e7cf      	b.n	80071a8 <__gethex+0x320>
 8007208:	2701      	movs	r7, #1
 800720a:	e7e2      	b.n	80071d2 <__gethex+0x34a>
 800720c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800720e:	f1c3 0301 	rsb	r3, r3, #1
 8007212:	9315      	str	r3, [sp, #84]	; 0x54
 8007214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0f0      	beq.n	80071fc <__gethex+0x374>
 800721a:	f04f 0c00 	mov.w	ip, #0
 800721e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007222:	f104 0314 	add.w	r3, r4, #20
 8007226:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800722a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800722e:	4618      	mov	r0, r3
 8007230:	f853 2b04 	ldr.w	r2, [r3], #4
 8007234:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007238:	d01c      	beq.n	8007274 <__gethex+0x3ec>
 800723a:	3201      	adds	r2, #1
 800723c:	6002      	str	r2, [r0, #0]
 800723e:	2f02      	cmp	r7, #2
 8007240:	f104 0314 	add.w	r3, r4, #20
 8007244:	d13d      	bne.n	80072c2 <__gethex+0x43a>
 8007246:	f8d8 2000 	ldr.w	r2, [r8]
 800724a:	3a01      	subs	r2, #1
 800724c:	42b2      	cmp	r2, r6
 800724e:	d10a      	bne.n	8007266 <__gethex+0x3de>
 8007250:	2201      	movs	r2, #1
 8007252:	1171      	asrs	r1, r6, #5
 8007254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007258:	f006 061f 	and.w	r6, r6, #31
 800725c:	fa02 f606 	lsl.w	r6, r2, r6
 8007260:	421e      	tst	r6, r3
 8007262:	bf18      	it	ne
 8007264:	4617      	movne	r7, r2
 8007266:	f047 0720 	orr.w	r7, r7, #32
 800726a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800726c:	601c      	str	r4, [r3, #0]
 800726e:	9b06      	ldr	r3, [sp, #24]
 8007270:	601d      	str	r5, [r3, #0]
 8007272:	e69b      	b.n	8006fac <__gethex+0x124>
 8007274:	4299      	cmp	r1, r3
 8007276:	f843 cc04 	str.w	ip, [r3, #-4]
 800727a:	d8d8      	bhi.n	800722e <__gethex+0x3a6>
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	459b      	cmp	fp, r3
 8007280:	db17      	blt.n	80072b2 <__gethex+0x42a>
 8007282:	6861      	ldr	r1, [r4, #4]
 8007284:	9802      	ldr	r0, [sp, #8]
 8007286:	3101      	adds	r1, #1
 8007288:	f000 f928 	bl	80074dc <_Balloc>
 800728c:	4681      	mov	r9, r0
 800728e:	b918      	cbnz	r0, 8007298 <__gethex+0x410>
 8007290:	4602      	mov	r2, r0
 8007292:	2184      	movs	r1, #132	; 0x84
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <__gethex+0x474>)
 8007296:	e6ac      	b.n	8006ff2 <__gethex+0x16a>
 8007298:	6922      	ldr	r2, [r4, #16]
 800729a:	f104 010c 	add.w	r1, r4, #12
 800729e:	3202      	adds	r2, #2
 80072a0:	0092      	lsls	r2, r2, #2
 80072a2:	300c      	adds	r0, #12
 80072a4:	f000 f900 	bl	80074a8 <memcpy>
 80072a8:	4621      	mov	r1, r4
 80072aa:	9802      	ldr	r0, [sp, #8]
 80072ac:	f000 f956 	bl	800755c <_Bfree>
 80072b0:	464c      	mov	r4, r9
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	6122      	str	r2, [r4, #16]
 80072b8:	2201      	movs	r2, #1
 80072ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072be:	615a      	str	r2, [r3, #20]
 80072c0:	e7bd      	b.n	800723e <__gethex+0x3b6>
 80072c2:	6922      	ldr	r2, [r4, #16]
 80072c4:	455a      	cmp	r2, fp
 80072c6:	dd0b      	ble.n	80072e0 <__gethex+0x458>
 80072c8:	2101      	movs	r1, #1
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7ff fd74 	bl	8006db8 <rshift>
 80072d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072d4:	3501      	adds	r5, #1
 80072d6:	42ab      	cmp	r3, r5
 80072d8:	f6ff aed5 	blt.w	8007086 <__gethex+0x1fe>
 80072dc:	2701      	movs	r7, #1
 80072de:	e7c2      	b.n	8007266 <__gethex+0x3de>
 80072e0:	f016 061f 	ands.w	r6, r6, #31
 80072e4:	d0fa      	beq.n	80072dc <__gethex+0x454>
 80072e6:	449a      	add	sl, r3
 80072e8:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80072ec:	f000 f9ec 	bl	80076c8 <__hi0bits>
 80072f0:	f1c6 0620 	rsb	r6, r6, #32
 80072f4:	42b0      	cmp	r0, r6
 80072f6:	dbe7      	blt.n	80072c8 <__gethex+0x440>
 80072f8:	e7f0      	b.n	80072dc <__gethex+0x454>
 80072fa:	bf00      	nop
 80072fc:	08009ae8 	.word	0x08009ae8

08007300 <L_shift>:
 8007300:	f1c2 0208 	rsb	r2, r2, #8
 8007304:	0092      	lsls	r2, r2, #2
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	f1c2 0620 	rsb	r6, r2, #32
 800730c:	6843      	ldr	r3, [r0, #4]
 800730e:	6804      	ldr	r4, [r0, #0]
 8007310:	fa03 f506 	lsl.w	r5, r3, r6
 8007314:	432c      	orrs	r4, r5
 8007316:	40d3      	lsrs	r3, r2
 8007318:	6004      	str	r4, [r0, #0]
 800731a:	f840 3f04 	str.w	r3, [r0, #4]!
 800731e:	4288      	cmp	r0, r1
 8007320:	d3f4      	bcc.n	800730c <L_shift+0xc>
 8007322:	bd70      	pop	{r4, r5, r6, pc}

08007324 <__match>:
 8007324:	b530      	push	{r4, r5, lr}
 8007326:	6803      	ldr	r3, [r0, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732e:	b914      	cbnz	r4, 8007336 <__match+0x12>
 8007330:	6003      	str	r3, [r0, #0]
 8007332:	2001      	movs	r0, #1
 8007334:	bd30      	pop	{r4, r5, pc}
 8007336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800733e:	2d19      	cmp	r5, #25
 8007340:	bf98      	it	ls
 8007342:	3220      	addls	r2, #32
 8007344:	42a2      	cmp	r2, r4
 8007346:	d0f0      	beq.n	800732a <__match+0x6>
 8007348:	2000      	movs	r0, #0
 800734a:	e7f3      	b.n	8007334 <__match+0x10>

0800734c <__hexnan>:
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	2500      	movs	r5, #0
 8007352:	680b      	ldr	r3, [r1, #0]
 8007354:	4682      	mov	sl, r0
 8007356:	115e      	asrs	r6, r3, #5
 8007358:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800735c:	f013 031f 	ands.w	r3, r3, #31
 8007360:	bf18      	it	ne
 8007362:	3604      	addne	r6, #4
 8007364:	1f37      	subs	r7, r6, #4
 8007366:	4690      	mov	r8, r2
 8007368:	46b9      	mov	r9, r7
 800736a:	463c      	mov	r4, r7
 800736c:	46ab      	mov	fp, r5
 800736e:	b087      	sub	sp, #28
 8007370:	6801      	ldr	r1, [r0, #0]
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	f846 5c04 	str.w	r5, [r6, #-4]
 8007378:	9502      	str	r5, [sp, #8]
 800737a:	784a      	ldrb	r2, [r1, #1]
 800737c:	1c4b      	adds	r3, r1, #1
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	b342      	cbz	r2, 80073d4 <__hexnan+0x88>
 8007382:	4610      	mov	r0, r2
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	9204      	str	r2, [sp, #16]
 8007388:	f7ff fd69 	bl	8006e5e <__hexdig_fun>
 800738c:	2800      	cmp	r0, #0
 800738e:	d14f      	bne.n	8007430 <__hexnan+0xe4>
 8007390:	9a04      	ldr	r2, [sp, #16]
 8007392:	9905      	ldr	r1, [sp, #20]
 8007394:	2a20      	cmp	r2, #32
 8007396:	d818      	bhi.n	80073ca <__hexnan+0x7e>
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	459b      	cmp	fp, r3
 800739c:	dd13      	ble.n	80073c6 <__hexnan+0x7a>
 800739e:	454c      	cmp	r4, r9
 80073a0:	d206      	bcs.n	80073b0 <__hexnan+0x64>
 80073a2:	2d07      	cmp	r5, #7
 80073a4:	dc04      	bgt.n	80073b0 <__hexnan+0x64>
 80073a6:	462a      	mov	r2, r5
 80073a8:	4649      	mov	r1, r9
 80073aa:	4620      	mov	r0, r4
 80073ac:	f7ff ffa8 	bl	8007300 <L_shift>
 80073b0:	4544      	cmp	r4, r8
 80073b2:	d950      	bls.n	8007456 <__hexnan+0x10a>
 80073b4:	2300      	movs	r3, #0
 80073b6:	f1a4 0904 	sub.w	r9, r4, #4
 80073ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80073be:	461d      	mov	r5, r3
 80073c0:	464c      	mov	r4, r9
 80073c2:	f8cd b008 	str.w	fp, [sp, #8]
 80073c6:	9903      	ldr	r1, [sp, #12]
 80073c8:	e7d7      	b.n	800737a <__hexnan+0x2e>
 80073ca:	2a29      	cmp	r2, #41	; 0x29
 80073cc:	d156      	bne.n	800747c <__hexnan+0x130>
 80073ce:	3102      	adds	r1, #2
 80073d0:	f8ca 1000 	str.w	r1, [sl]
 80073d4:	f1bb 0f00 	cmp.w	fp, #0
 80073d8:	d050      	beq.n	800747c <__hexnan+0x130>
 80073da:	454c      	cmp	r4, r9
 80073dc:	d206      	bcs.n	80073ec <__hexnan+0xa0>
 80073de:	2d07      	cmp	r5, #7
 80073e0:	dc04      	bgt.n	80073ec <__hexnan+0xa0>
 80073e2:	462a      	mov	r2, r5
 80073e4:	4649      	mov	r1, r9
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7ff ff8a 	bl	8007300 <L_shift>
 80073ec:	4544      	cmp	r4, r8
 80073ee:	d934      	bls.n	800745a <__hexnan+0x10e>
 80073f0:	4623      	mov	r3, r4
 80073f2:	f1a8 0204 	sub.w	r2, r8, #4
 80073f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80073fa:	429f      	cmp	r7, r3
 80073fc:	f842 1f04 	str.w	r1, [r2, #4]!
 8007400:	d2f9      	bcs.n	80073f6 <__hexnan+0xaa>
 8007402:	1b3b      	subs	r3, r7, r4
 8007404:	f023 0303 	bic.w	r3, r3, #3
 8007408:	3304      	adds	r3, #4
 800740a:	3401      	adds	r4, #1
 800740c:	3e03      	subs	r6, #3
 800740e:	42b4      	cmp	r4, r6
 8007410:	bf88      	it	hi
 8007412:	2304      	movhi	r3, #4
 8007414:	2200      	movs	r2, #0
 8007416:	4443      	add	r3, r8
 8007418:	f843 2b04 	str.w	r2, [r3], #4
 800741c:	429f      	cmp	r7, r3
 800741e:	d2fb      	bcs.n	8007418 <__hexnan+0xcc>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	b91b      	cbnz	r3, 800742c <__hexnan+0xe0>
 8007424:	4547      	cmp	r7, r8
 8007426:	d127      	bne.n	8007478 <__hexnan+0x12c>
 8007428:	2301      	movs	r3, #1
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	2005      	movs	r0, #5
 800742e:	e026      	b.n	800747e <__hexnan+0x132>
 8007430:	3501      	adds	r5, #1
 8007432:	2d08      	cmp	r5, #8
 8007434:	f10b 0b01 	add.w	fp, fp, #1
 8007438:	dd06      	ble.n	8007448 <__hexnan+0xfc>
 800743a:	4544      	cmp	r4, r8
 800743c:	d9c3      	bls.n	80073c6 <__hexnan+0x7a>
 800743e:	2300      	movs	r3, #0
 8007440:	2501      	movs	r5, #1
 8007442:	f844 3c04 	str.w	r3, [r4, #-4]
 8007446:	3c04      	subs	r4, #4
 8007448:	6822      	ldr	r2, [r4, #0]
 800744a:	f000 000f 	and.w	r0, r0, #15
 800744e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007452:	6022      	str	r2, [r4, #0]
 8007454:	e7b7      	b.n	80073c6 <__hexnan+0x7a>
 8007456:	2508      	movs	r5, #8
 8007458:	e7b5      	b.n	80073c6 <__hexnan+0x7a>
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0df      	beq.n	8007420 <__hexnan+0xd4>
 8007460:	f04f 32ff 	mov.w	r2, #4294967295
 8007464:	f1c3 0320 	rsb	r3, r3, #32
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007470:	401a      	ands	r2, r3
 8007472:	f846 2c04 	str.w	r2, [r6, #-4]
 8007476:	e7d3      	b.n	8007420 <__hexnan+0xd4>
 8007478:	3f04      	subs	r7, #4
 800747a:	e7d1      	b.n	8007420 <__hexnan+0xd4>
 800747c:	2004      	movs	r0, #4
 800747e:	b007      	add	sp, #28
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007484 <__ascii_mbtowc>:
 8007484:	b082      	sub	sp, #8
 8007486:	b901      	cbnz	r1, 800748a <__ascii_mbtowc+0x6>
 8007488:	a901      	add	r1, sp, #4
 800748a:	b142      	cbz	r2, 800749e <__ascii_mbtowc+0x1a>
 800748c:	b14b      	cbz	r3, 80074a2 <__ascii_mbtowc+0x1e>
 800748e:	7813      	ldrb	r3, [r2, #0]
 8007490:	600b      	str	r3, [r1, #0]
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	1e10      	subs	r0, r2, #0
 8007496:	bf18      	it	ne
 8007498:	2001      	movne	r0, #1
 800749a:	b002      	add	sp, #8
 800749c:	4770      	bx	lr
 800749e:	4610      	mov	r0, r2
 80074a0:	e7fb      	b.n	800749a <__ascii_mbtowc+0x16>
 80074a2:	f06f 0001 	mvn.w	r0, #1
 80074a6:	e7f8      	b.n	800749a <__ascii_mbtowc+0x16>

080074a8 <memcpy>:
 80074a8:	440a      	add	r2, r1
 80074aa:	4291      	cmp	r1, r2
 80074ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b0:	d100      	bne.n	80074b4 <memcpy+0xc>
 80074b2:	4770      	bx	lr
 80074b4:	b510      	push	{r4, lr}
 80074b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ba:	4291      	cmp	r1, r2
 80074bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074c0:	d1f9      	bne.n	80074b6 <memcpy+0xe>
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <__malloc_lock>:
 80074c4:	4801      	ldr	r0, [pc, #4]	; (80074cc <__malloc_lock+0x8>)
 80074c6:	f001 bbc8 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 80074ca:	bf00      	nop
 80074cc:	20000c8c 	.word	0x20000c8c

080074d0 <__malloc_unlock>:
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <__malloc_unlock+0x8>)
 80074d2:	f001 bbc3 	b.w	8008c5c <__retarget_lock_release_recursive>
 80074d6:	bf00      	nop
 80074d8:	20000c8c 	.word	0x20000c8c

080074dc <_Balloc>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074e0:	4604      	mov	r4, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	b976      	cbnz	r6, 8007504 <_Balloc+0x28>
 80074e6:	2010      	movs	r0, #16
 80074e8:	f7fe fc3e 	bl	8005d68 <malloc>
 80074ec:	4602      	mov	r2, r0
 80074ee:	6260      	str	r0, [r4, #36]	; 0x24
 80074f0:	b920      	cbnz	r0, 80074fc <_Balloc+0x20>
 80074f2:	2166      	movs	r1, #102	; 0x66
 80074f4:	4b17      	ldr	r3, [pc, #92]	; (8007554 <_Balloc+0x78>)
 80074f6:	4818      	ldr	r0, [pc, #96]	; (8007558 <_Balloc+0x7c>)
 80074f8:	f000 fd00 	bl	8007efc <__assert_func>
 80074fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007500:	6006      	str	r6, [r0, #0]
 8007502:	60c6      	str	r6, [r0, #12]
 8007504:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007506:	68f3      	ldr	r3, [r6, #12]
 8007508:	b183      	cbz	r3, 800752c <_Balloc+0x50>
 800750a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007512:	b9b8      	cbnz	r0, 8007544 <_Balloc+0x68>
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f605 	lsl.w	r6, r1, r5
 800751a:	1d72      	adds	r2, r6, #5
 800751c:	4620      	mov	r0, r4
 800751e:	0092      	lsls	r2, r2, #2
 8007520:	f000 fcb0 	bl	8007e84 <_calloc_r>
 8007524:	b160      	cbz	r0, 8007540 <_Balloc+0x64>
 8007526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800752a:	e00e      	b.n	800754a <_Balloc+0x6e>
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	2104      	movs	r1, #4
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fca7 	bl	8007e84 <_calloc_r>
 8007536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007538:	60f0      	str	r0, [r6, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e4      	bne.n	800750a <_Balloc+0x2e>
 8007540:	2000      	movs	r0, #0
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	6802      	ldr	r2, [r0, #0]
 8007546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800754a:	2300      	movs	r3, #0
 800754c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007550:	e7f7      	b.n	8007542 <_Balloc+0x66>
 8007552:	bf00      	nop
 8007554:	08009b78 	.word	0x08009b78
 8007558:	08009b8f 	.word	0x08009b8f

0800755c <_Bfree>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	b976      	cbnz	r6, 8007584 <_Bfree+0x28>
 8007566:	2010      	movs	r0, #16
 8007568:	f7fe fbfe 	bl	8005d68 <malloc>
 800756c:	4602      	mov	r2, r0
 800756e:	6268      	str	r0, [r5, #36]	; 0x24
 8007570:	b920      	cbnz	r0, 800757c <_Bfree+0x20>
 8007572:	218a      	movs	r1, #138	; 0x8a
 8007574:	4b08      	ldr	r3, [pc, #32]	; (8007598 <_Bfree+0x3c>)
 8007576:	4809      	ldr	r0, [pc, #36]	; (800759c <_Bfree+0x40>)
 8007578:	f000 fcc0 	bl	8007efc <__assert_func>
 800757c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007580:	6006      	str	r6, [r0, #0]
 8007582:	60c6      	str	r6, [r0, #12]
 8007584:	b13c      	cbz	r4, 8007596 <_Bfree+0x3a>
 8007586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007588:	6862      	ldr	r2, [r4, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007590:	6021      	str	r1, [r4, #0]
 8007592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007596:	bd70      	pop	{r4, r5, r6, pc}
 8007598:	08009b78 	.word	0x08009b78
 800759c:	08009b8f 	.word	0x08009b8f

080075a0 <__multadd>:
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a4:	4698      	mov	r8, r3
 80075a6:	460c      	mov	r4, r1
 80075a8:	2300      	movs	r3, #0
 80075aa:	690e      	ldr	r6, [r1, #16]
 80075ac:	4607      	mov	r7, r0
 80075ae:	f101 0014 	add.w	r0, r1, #20
 80075b2:	6805      	ldr	r5, [r0, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	b2a9      	uxth	r1, r5
 80075b8:	fb02 8101 	mla	r1, r2, r1, r8
 80075bc:	0c2d      	lsrs	r5, r5, #16
 80075be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075c2:	fb02 c505 	mla	r5, r2, r5, ip
 80075c6:	b289      	uxth	r1, r1
 80075c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075cc:	429e      	cmp	r6, r3
 80075ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80075d2:	f840 1b04 	str.w	r1, [r0], #4
 80075d6:	dcec      	bgt.n	80075b2 <__multadd+0x12>
 80075d8:	f1b8 0f00 	cmp.w	r8, #0
 80075dc:	d022      	beq.n	8007624 <__multadd+0x84>
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	42b3      	cmp	r3, r6
 80075e2:	dc19      	bgt.n	8007618 <__multadd+0x78>
 80075e4:	6861      	ldr	r1, [r4, #4]
 80075e6:	4638      	mov	r0, r7
 80075e8:	3101      	adds	r1, #1
 80075ea:	f7ff ff77 	bl	80074dc <_Balloc>
 80075ee:	4605      	mov	r5, r0
 80075f0:	b928      	cbnz	r0, 80075fe <__multadd+0x5e>
 80075f2:	4602      	mov	r2, r0
 80075f4:	21b5      	movs	r1, #181	; 0xb5
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <__multadd+0x8c>)
 80075f8:	480d      	ldr	r0, [pc, #52]	; (8007630 <__multadd+0x90>)
 80075fa:	f000 fc7f 	bl	8007efc <__assert_func>
 80075fe:	6922      	ldr	r2, [r4, #16]
 8007600:	f104 010c 	add.w	r1, r4, #12
 8007604:	3202      	adds	r2, #2
 8007606:	0092      	lsls	r2, r2, #2
 8007608:	300c      	adds	r0, #12
 800760a:	f7ff ff4d 	bl	80074a8 <memcpy>
 800760e:	4621      	mov	r1, r4
 8007610:	4638      	mov	r0, r7
 8007612:	f7ff ffa3 	bl	800755c <_Bfree>
 8007616:	462c      	mov	r4, r5
 8007618:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800761c:	3601      	adds	r6, #1
 800761e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007622:	6126      	str	r6, [r4, #16]
 8007624:	4620      	mov	r0, r4
 8007626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762a:	bf00      	nop
 800762c:	08009ae8 	.word	0x08009ae8
 8007630:	08009b8f 	.word	0x08009b8f

08007634 <__s2b>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	4615      	mov	r5, r2
 800763a:	2209      	movs	r2, #9
 800763c:	461f      	mov	r7, r3
 800763e:	3308      	adds	r3, #8
 8007640:	460c      	mov	r4, r1
 8007642:	fb93 f3f2 	sdiv	r3, r3, r2
 8007646:	4606      	mov	r6, r0
 8007648:	2201      	movs	r2, #1
 800764a:	2100      	movs	r1, #0
 800764c:	429a      	cmp	r2, r3
 800764e:	db09      	blt.n	8007664 <__s2b+0x30>
 8007650:	4630      	mov	r0, r6
 8007652:	f7ff ff43 	bl	80074dc <_Balloc>
 8007656:	b940      	cbnz	r0, 800766a <__s2b+0x36>
 8007658:	4602      	mov	r2, r0
 800765a:	21ce      	movs	r1, #206	; 0xce
 800765c:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <__s2b+0x8c>)
 800765e:	4819      	ldr	r0, [pc, #100]	; (80076c4 <__s2b+0x90>)
 8007660:	f000 fc4c 	bl	8007efc <__assert_func>
 8007664:	0052      	lsls	r2, r2, #1
 8007666:	3101      	adds	r1, #1
 8007668:	e7f0      	b.n	800764c <__s2b+0x18>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	2d09      	cmp	r5, #9
 800766e:	6143      	str	r3, [r0, #20]
 8007670:	f04f 0301 	mov.w	r3, #1
 8007674:	6103      	str	r3, [r0, #16]
 8007676:	dd16      	ble.n	80076a6 <__s2b+0x72>
 8007678:	f104 0909 	add.w	r9, r4, #9
 800767c:	46c8      	mov	r8, r9
 800767e:	442c      	add	r4, r5
 8007680:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007684:	4601      	mov	r1, r0
 8007686:	220a      	movs	r2, #10
 8007688:	4630      	mov	r0, r6
 800768a:	3b30      	subs	r3, #48	; 0x30
 800768c:	f7ff ff88 	bl	80075a0 <__multadd>
 8007690:	45a0      	cmp	r8, r4
 8007692:	d1f5      	bne.n	8007680 <__s2b+0x4c>
 8007694:	f1a5 0408 	sub.w	r4, r5, #8
 8007698:	444c      	add	r4, r9
 800769a:	1b2d      	subs	r5, r5, r4
 800769c:	1963      	adds	r3, r4, r5
 800769e:	42bb      	cmp	r3, r7
 80076a0:	db04      	blt.n	80076ac <__s2b+0x78>
 80076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a6:	2509      	movs	r5, #9
 80076a8:	340a      	adds	r4, #10
 80076aa:	e7f6      	b.n	800769a <__s2b+0x66>
 80076ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076b0:	4601      	mov	r1, r0
 80076b2:	220a      	movs	r2, #10
 80076b4:	4630      	mov	r0, r6
 80076b6:	3b30      	subs	r3, #48	; 0x30
 80076b8:	f7ff ff72 	bl	80075a0 <__multadd>
 80076bc:	e7ee      	b.n	800769c <__s2b+0x68>
 80076be:	bf00      	nop
 80076c0:	08009ae8 	.word	0x08009ae8
 80076c4:	08009b8f 	.word	0x08009b8f

080076c8 <__hi0bits>:
 80076c8:	0c02      	lsrs	r2, r0, #16
 80076ca:	0412      	lsls	r2, r2, #16
 80076cc:	4603      	mov	r3, r0
 80076ce:	b9ca      	cbnz	r2, 8007704 <__hi0bits+0x3c>
 80076d0:	0403      	lsls	r3, r0, #16
 80076d2:	2010      	movs	r0, #16
 80076d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076d8:	bf04      	itt	eq
 80076da:	021b      	lsleq	r3, r3, #8
 80076dc:	3008      	addeq	r0, #8
 80076de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076e2:	bf04      	itt	eq
 80076e4:	011b      	lsleq	r3, r3, #4
 80076e6:	3004      	addeq	r0, #4
 80076e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076ec:	bf04      	itt	eq
 80076ee:	009b      	lsleq	r3, r3, #2
 80076f0:	3002      	addeq	r0, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db05      	blt.n	8007702 <__hi0bits+0x3a>
 80076f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80076fa:	f100 0001 	add.w	r0, r0, #1
 80076fe:	bf08      	it	eq
 8007700:	2020      	moveq	r0, #32
 8007702:	4770      	bx	lr
 8007704:	2000      	movs	r0, #0
 8007706:	e7e5      	b.n	80076d4 <__hi0bits+0xc>

08007708 <__lo0bits>:
 8007708:	6803      	ldr	r3, [r0, #0]
 800770a:	4602      	mov	r2, r0
 800770c:	f013 0007 	ands.w	r0, r3, #7
 8007710:	d00b      	beq.n	800772a <__lo0bits+0x22>
 8007712:	07d9      	lsls	r1, r3, #31
 8007714:	d422      	bmi.n	800775c <__lo0bits+0x54>
 8007716:	0798      	lsls	r0, r3, #30
 8007718:	bf49      	itett	mi
 800771a:	085b      	lsrmi	r3, r3, #1
 800771c:	089b      	lsrpl	r3, r3, #2
 800771e:	2001      	movmi	r0, #1
 8007720:	6013      	strmi	r3, [r2, #0]
 8007722:	bf5c      	itt	pl
 8007724:	2002      	movpl	r0, #2
 8007726:	6013      	strpl	r3, [r2, #0]
 8007728:	4770      	bx	lr
 800772a:	b299      	uxth	r1, r3
 800772c:	b909      	cbnz	r1, 8007732 <__lo0bits+0x2a>
 800772e:	2010      	movs	r0, #16
 8007730:	0c1b      	lsrs	r3, r3, #16
 8007732:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007736:	bf04      	itt	eq
 8007738:	0a1b      	lsreq	r3, r3, #8
 800773a:	3008      	addeq	r0, #8
 800773c:	0719      	lsls	r1, r3, #28
 800773e:	bf04      	itt	eq
 8007740:	091b      	lsreq	r3, r3, #4
 8007742:	3004      	addeq	r0, #4
 8007744:	0799      	lsls	r1, r3, #30
 8007746:	bf04      	itt	eq
 8007748:	089b      	lsreq	r3, r3, #2
 800774a:	3002      	addeq	r0, #2
 800774c:	07d9      	lsls	r1, r3, #31
 800774e:	d403      	bmi.n	8007758 <__lo0bits+0x50>
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	f100 0001 	add.w	r0, r0, #1
 8007756:	d003      	beq.n	8007760 <__lo0bits+0x58>
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	4770      	bx	lr
 800775c:	2000      	movs	r0, #0
 800775e:	4770      	bx	lr
 8007760:	2020      	movs	r0, #32
 8007762:	4770      	bx	lr

08007764 <__i2b>:
 8007764:	b510      	push	{r4, lr}
 8007766:	460c      	mov	r4, r1
 8007768:	2101      	movs	r1, #1
 800776a:	f7ff feb7 	bl	80074dc <_Balloc>
 800776e:	4602      	mov	r2, r0
 8007770:	b928      	cbnz	r0, 800777e <__i2b+0x1a>
 8007772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007776:	4b04      	ldr	r3, [pc, #16]	; (8007788 <__i2b+0x24>)
 8007778:	4804      	ldr	r0, [pc, #16]	; (800778c <__i2b+0x28>)
 800777a:	f000 fbbf 	bl	8007efc <__assert_func>
 800777e:	2301      	movs	r3, #1
 8007780:	6144      	str	r4, [r0, #20]
 8007782:	6103      	str	r3, [r0, #16]
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	08009ae8 	.word	0x08009ae8
 800778c:	08009b8f 	.word	0x08009b8f

08007790 <__multiply>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	4614      	mov	r4, r2
 8007796:	690a      	ldr	r2, [r1, #16]
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	460d      	mov	r5, r1
 800779c:	429a      	cmp	r2, r3
 800779e:	bfbe      	ittt	lt
 80077a0:	460b      	movlt	r3, r1
 80077a2:	4625      	movlt	r5, r4
 80077a4:	461c      	movlt	r4, r3
 80077a6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077ae:	68ab      	ldr	r3, [r5, #8]
 80077b0:	6869      	ldr	r1, [r5, #4]
 80077b2:	eb0a 0709 	add.w	r7, sl, r9
 80077b6:	42bb      	cmp	r3, r7
 80077b8:	b085      	sub	sp, #20
 80077ba:	bfb8      	it	lt
 80077bc:	3101      	addlt	r1, #1
 80077be:	f7ff fe8d 	bl	80074dc <_Balloc>
 80077c2:	b930      	cbnz	r0, 80077d2 <__multiply+0x42>
 80077c4:	4602      	mov	r2, r0
 80077c6:	f240 115d 	movw	r1, #349	; 0x15d
 80077ca:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <__multiply+0x140>)
 80077cc:	4841      	ldr	r0, [pc, #260]	; (80078d4 <__multiply+0x144>)
 80077ce:	f000 fb95 	bl	8007efc <__assert_func>
 80077d2:	f100 0614 	add.w	r6, r0, #20
 80077d6:	4633      	mov	r3, r6
 80077d8:	2200      	movs	r2, #0
 80077da:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80077de:	4543      	cmp	r3, r8
 80077e0:	d31e      	bcc.n	8007820 <__multiply+0x90>
 80077e2:	f105 0c14 	add.w	ip, r5, #20
 80077e6:	f104 0314 	add.w	r3, r4, #20
 80077ea:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80077ee:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80077f2:	9202      	str	r2, [sp, #8]
 80077f4:	ebac 0205 	sub.w	r2, ip, r5
 80077f8:	3a15      	subs	r2, #21
 80077fa:	f022 0203 	bic.w	r2, r2, #3
 80077fe:	3204      	adds	r2, #4
 8007800:	f105 0115 	add.w	r1, r5, #21
 8007804:	458c      	cmp	ip, r1
 8007806:	bf38      	it	cc
 8007808:	2204      	movcc	r2, #4
 800780a:	9201      	str	r2, [sp, #4]
 800780c:	9a02      	ldr	r2, [sp, #8]
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	429a      	cmp	r2, r3
 8007812:	d808      	bhi.n	8007826 <__multiply+0x96>
 8007814:	2f00      	cmp	r7, #0
 8007816:	dc55      	bgt.n	80078c4 <__multiply+0x134>
 8007818:	6107      	str	r7, [r0, #16]
 800781a:	b005      	add	sp, #20
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007820:	f843 2b04 	str.w	r2, [r3], #4
 8007824:	e7db      	b.n	80077de <__multiply+0x4e>
 8007826:	f8b3 a000 	ldrh.w	sl, [r3]
 800782a:	f1ba 0f00 	cmp.w	sl, #0
 800782e:	d020      	beq.n	8007872 <__multiply+0xe2>
 8007830:	46b1      	mov	r9, r6
 8007832:	2200      	movs	r2, #0
 8007834:	f105 0e14 	add.w	lr, r5, #20
 8007838:	f85e 4b04 	ldr.w	r4, [lr], #4
 800783c:	f8d9 b000 	ldr.w	fp, [r9]
 8007840:	b2a1      	uxth	r1, r4
 8007842:	fa1f fb8b 	uxth.w	fp, fp
 8007846:	fb0a b101 	mla	r1, sl, r1, fp
 800784a:	4411      	add	r1, r2
 800784c:	f8d9 2000 	ldr.w	r2, [r9]
 8007850:	0c24      	lsrs	r4, r4, #16
 8007852:	0c12      	lsrs	r2, r2, #16
 8007854:	fb0a 2404 	mla	r4, sl, r4, r2
 8007858:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800785c:	b289      	uxth	r1, r1
 800785e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007862:	45f4      	cmp	ip, lr
 8007864:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007868:	f849 1b04 	str.w	r1, [r9], #4
 800786c:	d8e4      	bhi.n	8007838 <__multiply+0xa8>
 800786e:	9901      	ldr	r1, [sp, #4]
 8007870:	5072      	str	r2, [r6, r1]
 8007872:	9a03      	ldr	r2, [sp, #12]
 8007874:	3304      	adds	r3, #4
 8007876:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800787a:	f1b9 0f00 	cmp.w	r9, #0
 800787e:	d01f      	beq.n	80078c0 <__multiply+0x130>
 8007880:	46b6      	mov	lr, r6
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	6834      	ldr	r4, [r6, #0]
 8007888:	f105 0114 	add.w	r1, r5, #20
 800788c:	880a      	ldrh	r2, [r1, #0]
 800788e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007892:	b2a4      	uxth	r4, r4
 8007894:	fb09 b202 	mla	r2, r9, r2, fp
 8007898:	4492      	add	sl, r2
 800789a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800789e:	f84e 4b04 	str.w	r4, [lr], #4
 80078a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80078a6:	f8be 2000 	ldrh.w	r2, [lr]
 80078aa:	0c24      	lsrs	r4, r4, #16
 80078ac:	fb09 2404 	mla	r4, r9, r4, r2
 80078b0:	458c      	cmp	ip, r1
 80078b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078ba:	d8e7      	bhi.n	800788c <__multiply+0xfc>
 80078bc:	9a01      	ldr	r2, [sp, #4]
 80078be:	50b4      	str	r4, [r6, r2]
 80078c0:	3604      	adds	r6, #4
 80078c2:	e7a3      	b.n	800780c <__multiply+0x7c>
 80078c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1a5      	bne.n	8007818 <__multiply+0x88>
 80078cc:	3f01      	subs	r7, #1
 80078ce:	e7a1      	b.n	8007814 <__multiply+0x84>
 80078d0:	08009ae8 	.word	0x08009ae8
 80078d4:	08009b8f 	.word	0x08009b8f

080078d8 <__pow5mult>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	4615      	mov	r5, r2
 80078de:	f012 0203 	ands.w	r2, r2, #3
 80078e2:	4606      	mov	r6, r0
 80078e4:	460f      	mov	r7, r1
 80078e6:	d007      	beq.n	80078f8 <__pow5mult+0x20>
 80078e8:	4c25      	ldr	r4, [pc, #148]	; (8007980 <__pow5mult+0xa8>)
 80078ea:	3a01      	subs	r2, #1
 80078ec:	2300      	movs	r3, #0
 80078ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078f2:	f7ff fe55 	bl	80075a0 <__multadd>
 80078f6:	4607      	mov	r7, r0
 80078f8:	10ad      	asrs	r5, r5, #2
 80078fa:	d03d      	beq.n	8007978 <__pow5mult+0xa0>
 80078fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078fe:	b97c      	cbnz	r4, 8007920 <__pow5mult+0x48>
 8007900:	2010      	movs	r0, #16
 8007902:	f7fe fa31 	bl	8005d68 <malloc>
 8007906:	4602      	mov	r2, r0
 8007908:	6270      	str	r0, [r6, #36]	; 0x24
 800790a:	b928      	cbnz	r0, 8007918 <__pow5mult+0x40>
 800790c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007910:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <__pow5mult+0xac>)
 8007912:	481d      	ldr	r0, [pc, #116]	; (8007988 <__pow5mult+0xb0>)
 8007914:	f000 faf2 	bl	8007efc <__assert_func>
 8007918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800791c:	6004      	str	r4, [r0, #0]
 800791e:	60c4      	str	r4, [r0, #12]
 8007920:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007928:	b94c      	cbnz	r4, 800793e <__pow5mult+0x66>
 800792a:	f240 2171 	movw	r1, #625	; 0x271
 800792e:	4630      	mov	r0, r6
 8007930:	f7ff ff18 	bl	8007764 <__i2b>
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	f8c8 0008 	str.w	r0, [r8, #8]
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	f04f 0900 	mov.w	r9, #0
 8007942:	07eb      	lsls	r3, r5, #31
 8007944:	d50a      	bpl.n	800795c <__pow5mult+0x84>
 8007946:	4639      	mov	r1, r7
 8007948:	4622      	mov	r2, r4
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ff20 	bl	8007790 <__multiply>
 8007950:	4680      	mov	r8, r0
 8007952:	4639      	mov	r1, r7
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff fe01 	bl	800755c <_Bfree>
 800795a:	4647      	mov	r7, r8
 800795c:	106d      	asrs	r5, r5, #1
 800795e:	d00b      	beq.n	8007978 <__pow5mult+0xa0>
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	b938      	cbnz	r0, 8007974 <__pow5mult+0x9c>
 8007964:	4622      	mov	r2, r4
 8007966:	4621      	mov	r1, r4
 8007968:	4630      	mov	r0, r6
 800796a:	f7ff ff11 	bl	8007790 <__multiply>
 800796e:	6020      	str	r0, [r4, #0]
 8007970:	f8c0 9000 	str.w	r9, [r0]
 8007974:	4604      	mov	r4, r0
 8007976:	e7e4      	b.n	8007942 <__pow5mult+0x6a>
 8007978:	4638      	mov	r0, r7
 800797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797e:	bf00      	nop
 8007980:	08009ce0 	.word	0x08009ce0
 8007984:	08009b78 	.word	0x08009b78
 8007988:	08009b8f 	.word	0x08009b8f

0800798c <__lshift>:
 800798c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007990:	460c      	mov	r4, r1
 8007992:	4607      	mov	r7, r0
 8007994:	4691      	mov	r9, r2
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	6849      	ldr	r1, [r1, #4]
 800799a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079a4:	f108 0601 	add.w	r6, r8, #1
 80079a8:	42b3      	cmp	r3, r6
 80079aa:	db0b      	blt.n	80079c4 <__lshift+0x38>
 80079ac:	4638      	mov	r0, r7
 80079ae:	f7ff fd95 	bl	80074dc <_Balloc>
 80079b2:	4605      	mov	r5, r0
 80079b4:	b948      	cbnz	r0, 80079ca <__lshift+0x3e>
 80079b6:	4602      	mov	r2, r0
 80079b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <__lshift+0xd0>)
 80079be:	4828      	ldr	r0, [pc, #160]	; (8007a60 <__lshift+0xd4>)
 80079c0:	f000 fa9c 	bl	8007efc <__assert_func>
 80079c4:	3101      	adds	r1, #1
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	e7ee      	b.n	80079a8 <__lshift+0x1c>
 80079ca:	2300      	movs	r3, #0
 80079cc:	f100 0114 	add.w	r1, r0, #20
 80079d0:	f100 0210 	add.w	r2, r0, #16
 80079d4:	4618      	mov	r0, r3
 80079d6:	4553      	cmp	r3, sl
 80079d8:	db33      	blt.n	8007a42 <__lshift+0xb6>
 80079da:	6920      	ldr	r0, [r4, #16]
 80079dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079e0:	f104 0314 	add.w	r3, r4, #20
 80079e4:	f019 091f 	ands.w	r9, r9, #31
 80079e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079f0:	d02b      	beq.n	8007a4a <__lshift+0xbe>
 80079f2:	468a      	mov	sl, r1
 80079f4:	2200      	movs	r2, #0
 80079f6:	f1c9 0e20 	rsb	lr, r9, #32
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	fa00 f009 	lsl.w	r0, r0, r9
 8007a00:	4302      	orrs	r2, r0
 8007a02:	f84a 2b04 	str.w	r2, [sl], #4
 8007a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a0a:	459c      	cmp	ip, r3
 8007a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a10:	d8f3      	bhi.n	80079fa <__lshift+0x6e>
 8007a12:	ebac 0304 	sub.w	r3, ip, r4
 8007a16:	3b15      	subs	r3, #21
 8007a18:	f023 0303 	bic.w	r3, r3, #3
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	f104 0015 	add.w	r0, r4, #21
 8007a22:	4584      	cmp	ip, r0
 8007a24:	bf38      	it	cc
 8007a26:	2304      	movcc	r3, #4
 8007a28:	50ca      	str	r2, [r1, r3]
 8007a2a:	b10a      	cbz	r2, 8007a30 <__lshift+0xa4>
 8007a2c:	f108 0602 	add.w	r6, r8, #2
 8007a30:	3e01      	subs	r6, #1
 8007a32:	4638      	mov	r0, r7
 8007a34:	4621      	mov	r1, r4
 8007a36:	612e      	str	r6, [r5, #16]
 8007a38:	f7ff fd90 	bl	800755c <_Bfree>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a46:	3301      	adds	r3, #1
 8007a48:	e7c5      	b.n	80079d6 <__lshift+0x4a>
 8007a4a:	3904      	subs	r1, #4
 8007a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a50:	459c      	cmp	ip, r3
 8007a52:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a56:	d8f9      	bhi.n	8007a4c <__lshift+0xc0>
 8007a58:	e7ea      	b.n	8007a30 <__lshift+0xa4>
 8007a5a:	bf00      	nop
 8007a5c:	08009ae8 	.word	0x08009ae8
 8007a60:	08009b8f 	.word	0x08009b8f

08007a64 <__mcmp>:
 8007a64:	4603      	mov	r3, r0
 8007a66:	690a      	ldr	r2, [r1, #16]
 8007a68:	6900      	ldr	r0, [r0, #16]
 8007a6a:	b530      	push	{r4, r5, lr}
 8007a6c:	1a80      	subs	r0, r0, r2
 8007a6e:	d10d      	bne.n	8007a8c <__mcmp+0x28>
 8007a70:	3314      	adds	r3, #20
 8007a72:	3114      	adds	r1, #20
 8007a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a84:	4295      	cmp	r5, r2
 8007a86:	d002      	beq.n	8007a8e <__mcmp+0x2a>
 8007a88:	d304      	bcc.n	8007a94 <__mcmp+0x30>
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	bd30      	pop	{r4, r5, pc}
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	d3f4      	bcc.n	8007a7c <__mcmp+0x18>
 8007a92:	e7fb      	b.n	8007a8c <__mcmp+0x28>
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295
 8007a98:	e7f8      	b.n	8007a8c <__mcmp+0x28>
	...

08007a9c <__mdiff>:
 8007a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4692      	mov	sl, r2
 8007aaa:	f7ff ffdb 	bl	8007a64 <__mcmp>
 8007aae:	1e05      	subs	r5, r0, #0
 8007ab0:	d111      	bne.n	8007ad6 <__mdiff+0x3a>
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f7ff fd11 	bl	80074dc <_Balloc>
 8007aba:	4602      	mov	r2, r0
 8007abc:	b928      	cbnz	r0, 8007aca <__mdiff+0x2e>
 8007abe:	f240 2132 	movw	r1, #562	; 0x232
 8007ac2:	4b3c      	ldr	r3, [pc, #240]	; (8007bb4 <__mdiff+0x118>)
 8007ac4:	483c      	ldr	r0, [pc, #240]	; (8007bb8 <__mdiff+0x11c>)
 8007ac6:	f000 fa19 	bl	8007efc <__assert_func>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad6:	bfa4      	itt	ge
 8007ad8:	4653      	movge	r3, sl
 8007ada:	46a2      	movge	sl, r4
 8007adc:	4630      	mov	r0, r6
 8007ade:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007ae2:	bfa6      	itte	ge
 8007ae4:	461c      	movge	r4, r3
 8007ae6:	2500      	movge	r5, #0
 8007ae8:	2501      	movlt	r5, #1
 8007aea:	f7ff fcf7 	bl	80074dc <_Balloc>
 8007aee:	4602      	mov	r2, r0
 8007af0:	b918      	cbnz	r0, 8007afa <__mdiff+0x5e>
 8007af2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007af6:	4b2f      	ldr	r3, [pc, #188]	; (8007bb4 <__mdiff+0x118>)
 8007af8:	e7e4      	b.n	8007ac4 <__mdiff+0x28>
 8007afa:	f100 0814 	add.w	r8, r0, #20
 8007afe:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007b02:	60c5      	str	r5, [r0, #12]
 8007b04:	f04f 0c00 	mov.w	ip, #0
 8007b08:	f10a 0514 	add.w	r5, sl, #20
 8007b0c:	f10a 0010 	add.w	r0, sl, #16
 8007b10:	46c2      	mov	sl, r8
 8007b12:	6926      	ldr	r6, [r4, #16]
 8007b14:	f104 0914 	add.w	r9, r4, #20
 8007b18:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007b1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b20:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007b24:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b28:	fa1f f18b 	uxth.w	r1, fp
 8007b2c:	4461      	add	r1, ip
 8007b2e:	fa1f fc83 	uxth.w	ip, r3
 8007b32:	0c1b      	lsrs	r3, r3, #16
 8007b34:	eba1 010c 	sub.w	r1, r1, ip
 8007b38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b3c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b40:	b289      	uxth	r1, r1
 8007b42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b46:	454e      	cmp	r6, r9
 8007b48:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b4c:	f84a 3b04 	str.w	r3, [sl], #4
 8007b50:	d8e6      	bhi.n	8007b20 <__mdiff+0x84>
 8007b52:	1b33      	subs	r3, r6, r4
 8007b54:	3b15      	subs	r3, #21
 8007b56:	f023 0303 	bic.w	r3, r3, #3
 8007b5a:	3415      	adds	r4, #21
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	bf38      	it	cc
 8007b62:	2304      	movcc	r3, #4
 8007b64:	441d      	add	r5, r3
 8007b66:	4443      	add	r3, r8
 8007b68:	461e      	mov	r6, r3
 8007b6a:	462c      	mov	r4, r5
 8007b6c:	4574      	cmp	r4, lr
 8007b6e:	d30e      	bcc.n	8007b8e <__mdiff+0xf2>
 8007b70:	f10e 0103 	add.w	r1, lr, #3
 8007b74:	1b49      	subs	r1, r1, r5
 8007b76:	f021 0103 	bic.w	r1, r1, #3
 8007b7a:	3d03      	subs	r5, #3
 8007b7c:	45ae      	cmp	lr, r5
 8007b7e:	bf38      	it	cc
 8007b80:	2100      	movcc	r1, #0
 8007b82:	4419      	add	r1, r3
 8007b84:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b88:	b18b      	cbz	r3, 8007bae <__mdiff+0x112>
 8007b8a:	6117      	str	r7, [r2, #16]
 8007b8c:	e7a0      	b.n	8007ad0 <__mdiff+0x34>
 8007b8e:	f854 8b04 	ldr.w	r8, [r4], #4
 8007b92:	fa1f f188 	uxth.w	r1, r8
 8007b96:	4461      	add	r1, ip
 8007b98:	1408      	asrs	r0, r1, #16
 8007b9a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007b9e:	b289      	uxth	r1, r1
 8007ba0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ba4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ba8:	f846 1b04 	str.w	r1, [r6], #4
 8007bac:	e7de      	b.n	8007b6c <__mdiff+0xd0>
 8007bae:	3f01      	subs	r7, #1
 8007bb0:	e7e8      	b.n	8007b84 <__mdiff+0xe8>
 8007bb2:	bf00      	nop
 8007bb4:	08009ae8 	.word	0x08009ae8
 8007bb8:	08009b8f 	.word	0x08009b8f

08007bbc <__ulp>:
 8007bbc:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <__ulp+0x48>)
 8007bbe:	400b      	ands	r3, r1
 8007bc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd02      	ble.n	8007bce <__ulp+0x12>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4770      	bx	lr
 8007bce:	425b      	negs	r3, r3
 8007bd0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007bd4:	f04f 0000 	mov.w	r0, #0
 8007bd8:	f04f 0100 	mov.w	r1, #0
 8007bdc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007be0:	da04      	bge.n	8007bec <__ulp+0x30>
 8007be2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007be6:	fa43 f102 	asr.w	r1, r3, r2
 8007bea:	4770      	bx	lr
 8007bec:	f1a2 0314 	sub.w	r3, r2, #20
 8007bf0:	2b1e      	cmp	r3, #30
 8007bf2:	bfd6      	itet	le
 8007bf4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007bf8:	2301      	movgt	r3, #1
 8007bfa:	fa22 f303 	lsrle.w	r3, r2, r3
 8007bfe:	4618      	mov	r0, r3
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	7ff00000 	.word	0x7ff00000

08007c08 <__b2d>:
 8007c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c0c:	6907      	ldr	r7, [r0, #16]
 8007c0e:	f100 0914 	add.w	r9, r0, #20
 8007c12:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007c16:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007c1a:	f1a7 0804 	sub.w	r8, r7, #4
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff fd52 	bl	80076c8 <__hi0bits>
 8007c24:	f1c0 0320 	rsb	r3, r0, #32
 8007c28:	280a      	cmp	r0, #10
 8007c2a:	600b      	str	r3, [r1, #0]
 8007c2c:	491f      	ldr	r1, [pc, #124]	; (8007cac <__b2d+0xa4>)
 8007c2e:	dc17      	bgt.n	8007c60 <__b2d+0x58>
 8007c30:	45c1      	cmp	r9, r8
 8007c32:	bf28      	it	cs
 8007c34:	2200      	movcs	r2, #0
 8007c36:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c3a:	fa26 f30c 	lsr.w	r3, r6, ip
 8007c3e:	bf38      	it	cc
 8007c40:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c44:	ea43 0501 	orr.w	r5, r3, r1
 8007c48:	f100 0315 	add.w	r3, r0, #21
 8007c4c:	fa06 f303 	lsl.w	r3, r6, r3
 8007c50:	fa22 f20c 	lsr.w	r2, r2, ip
 8007c54:	ea43 0402 	orr.w	r4, r3, r2
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c60:	45c1      	cmp	r9, r8
 8007c62:	bf2e      	itee	cs
 8007c64:	2200      	movcs	r2, #0
 8007c66:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c6a:	f1a7 0808 	subcc.w	r8, r7, #8
 8007c6e:	f1b0 030b 	subs.w	r3, r0, #11
 8007c72:	d016      	beq.n	8007ca2 <__b2d+0x9a>
 8007c74:	f1c3 0720 	rsb	r7, r3, #32
 8007c78:	fa22 f107 	lsr.w	r1, r2, r7
 8007c7c:	45c8      	cmp	r8, r9
 8007c7e:	fa06 f603 	lsl.w	r6, r6, r3
 8007c82:	ea46 0601 	orr.w	r6, r6, r1
 8007c86:	bf94      	ite	ls
 8007c88:	2100      	movls	r1, #0
 8007c8a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007c8e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007c92:	fa02 f003 	lsl.w	r0, r2, r3
 8007c96:	40f9      	lsrs	r1, r7
 8007c98:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c9c:	ea40 0401 	orr.w	r4, r0, r1
 8007ca0:	e7da      	b.n	8007c58 <__b2d+0x50>
 8007ca2:	4614      	mov	r4, r2
 8007ca4:	ea46 0501 	orr.w	r5, r6, r1
 8007ca8:	e7d6      	b.n	8007c58 <__b2d+0x50>
 8007caa:	bf00      	nop
 8007cac:	3ff00000 	.word	0x3ff00000

08007cb0 <__d2b>:
 8007cb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007cba:	4690      	mov	r8, r2
 8007cbc:	461d      	mov	r5, r3
 8007cbe:	f7ff fc0d 	bl	80074dc <_Balloc>
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	b930      	cbnz	r0, 8007cd4 <__d2b+0x24>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	f240 310a 	movw	r1, #778	; 0x30a
 8007ccc:	4b24      	ldr	r3, [pc, #144]	; (8007d60 <__d2b+0xb0>)
 8007cce:	4825      	ldr	r0, [pc, #148]	; (8007d64 <__d2b+0xb4>)
 8007cd0:	f000 f914 	bl	8007efc <__assert_func>
 8007cd4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007cd8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007cdc:	bb2d      	cbnz	r5, 8007d2a <__d2b+0x7a>
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ce4:	d026      	beq.n	8007d34 <__d2b+0x84>
 8007ce6:	4668      	mov	r0, sp
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	f7ff fd0d 	bl	8007708 <__lo0bits>
 8007cee:	9900      	ldr	r1, [sp, #0]
 8007cf0:	b1f0      	cbz	r0, 8007d30 <__d2b+0x80>
 8007cf2:	9a01      	ldr	r2, [sp, #4]
 8007cf4:	f1c0 0320 	rsb	r3, r0, #32
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	40c2      	lsrs	r2, r0
 8007d00:	6163      	str	r3, [r4, #20]
 8007d02:	9201      	str	r2, [sp, #4]
 8007d04:	9b01      	ldr	r3, [sp, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2102      	movne	r1, #2
 8007d0c:	2101      	moveq	r1, #1
 8007d0e:	61a3      	str	r3, [r4, #24]
 8007d10:	6121      	str	r1, [r4, #16]
 8007d12:	b1c5      	cbz	r5, 8007d46 <__d2b+0x96>
 8007d14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d18:	4405      	add	r5, r0
 8007d1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d1e:	603d      	str	r5, [r7, #0]
 8007d20:	6030      	str	r0, [r6, #0]
 8007d22:	4620      	mov	r0, r4
 8007d24:	b002      	add	sp, #8
 8007d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d2e:	e7d6      	b.n	8007cde <__d2b+0x2e>
 8007d30:	6161      	str	r1, [r4, #20]
 8007d32:	e7e7      	b.n	8007d04 <__d2b+0x54>
 8007d34:	a801      	add	r0, sp, #4
 8007d36:	f7ff fce7 	bl	8007708 <__lo0bits>
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	9b01      	ldr	r3, [sp, #4]
 8007d3e:	6121      	str	r1, [r4, #16]
 8007d40:	6163      	str	r3, [r4, #20]
 8007d42:	3020      	adds	r0, #32
 8007d44:	e7e5      	b.n	8007d12 <__d2b+0x62>
 8007d46:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007d4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d4e:	6038      	str	r0, [r7, #0]
 8007d50:	6918      	ldr	r0, [r3, #16]
 8007d52:	f7ff fcb9 	bl	80076c8 <__hi0bits>
 8007d56:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007d5a:	6031      	str	r1, [r6, #0]
 8007d5c:	e7e1      	b.n	8007d22 <__d2b+0x72>
 8007d5e:	bf00      	nop
 8007d60:	08009ae8 	.word	0x08009ae8
 8007d64:	08009b8f 	.word	0x08009b8f

08007d68 <__ratio>:
 8007d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	4688      	mov	r8, r1
 8007d6e:	4669      	mov	r1, sp
 8007d70:	4681      	mov	r9, r0
 8007d72:	f7ff ff49 	bl	8007c08 <__b2d>
 8007d76:	460f      	mov	r7, r1
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	a901      	add	r1, sp, #4
 8007d80:	f7ff ff42 	bl	8007c08 <__b2d>
 8007d84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d88:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d8c:	468b      	mov	fp, r1
 8007d8e:	eba3 0c02 	sub.w	ip, r3, r2
 8007d92:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d96:	1a9b      	subs	r3, r3, r2
 8007d98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bfd5      	itete	le
 8007da0:	460a      	movle	r2, r1
 8007da2:	462a      	movgt	r2, r5
 8007da4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007da8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007dac:	bfd8      	it	le
 8007dae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007db2:	465b      	mov	r3, fp
 8007db4:	4602      	mov	r2, r0
 8007db6:	4639      	mov	r1, r7
 8007db8:	4620      	mov	r0, r4
 8007dba:	f7f8 fcb7 	bl	800072c <__aeabi_ddiv>
 8007dbe:	b003      	add	sp, #12
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dc4 <_mprec_log10>:
 8007dc4:	2817      	cmp	r0, #23
 8007dc6:	b5d0      	push	{r4, r6, r7, lr}
 8007dc8:	4604      	mov	r4, r0
 8007dca:	dc05      	bgt.n	8007dd8 <_mprec_log10+0x14>
 8007dcc:	4808      	ldr	r0, [pc, #32]	; (8007df0 <_mprec_log10+0x2c>)
 8007dce:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8007dd2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007dd6:	bdd0      	pop	{r4, r6, r7, pc}
 8007dd8:	2000      	movs	r0, #0
 8007dda:	2600      	movs	r6, #0
 8007ddc:	4905      	ldr	r1, [pc, #20]	; (8007df4 <_mprec_log10+0x30>)
 8007dde:	4f06      	ldr	r7, [pc, #24]	; (8007df8 <_mprec_log10+0x34>)
 8007de0:	4632      	mov	r2, r6
 8007de2:	463b      	mov	r3, r7
 8007de4:	f7f8 fb78 	bl	80004d8 <__aeabi_dmul>
 8007de8:	3c01      	subs	r4, #1
 8007dea:	d1f9      	bne.n	8007de0 <_mprec_log10+0x1c>
 8007dec:	e7f3      	b.n	8007dd6 <_mprec_log10+0x12>
 8007dee:	bf00      	nop
 8007df0:	08009c18 	.word	0x08009c18
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	40240000 	.word	0x40240000

08007dfc <__copybits>:
 8007dfc:	3901      	subs	r1, #1
 8007dfe:	b570      	push	{r4, r5, r6, lr}
 8007e00:	1149      	asrs	r1, r1, #5
 8007e02:	6914      	ldr	r4, [r2, #16]
 8007e04:	3101      	adds	r1, #1
 8007e06:	f102 0314 	add.w	r3, r2, #20
 8007e0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e12:	1f05      	subs	r5, r0, #4
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d30c      	bcc.n	8007e32 <__copybits+0x36>
 8007e18:	1aa3      	subs	r3, r4, r2
 8007e1a:	3b11      	subs	r3, #17
 8007e1c:	f023 0303 	bic.w	r3, r3, #3
 8007e20:	3211      	adds	r2, #17
 8007e22:	42a2      	cmp	r2, r4
 8007e24:	bf88      	it	hi
 8007e26:	2300      	movhi	r3, #0
 8007e28:	4418      	add	r0, r3
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4288      	cmp	r0, r1
 8007e2e:	d305      	bcc.n	8007e3c <__copybits+0x40>
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e36:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e3a:	e7eb      	b.n	8007e14 <__copybits+0x18>
 8007e3c:	f840 3b04 	str.w	r3, [r0], #4
 8007e40:	e7f4      	b.n	8007e2c <__copybits+0x30>

08007e42 <__any_on>:
 8007e42:	f100 0214 	add.w	r2, r0, #20
 8007e46:	6900      	ldr	r0, [r0, #16]
 8007e48:	114b      	asrs	r3, r1, #5
 8007e4a:	4298      	cmp	r0, r3
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	db11      	blt.n	8007e74 <__any_on+0x32>
 8007e50:	dd0a      	ble.n	8007e68 <__any_on+0x26>
 8007e52:	f011 011f 	ands.w	r1, r1, #31
 8007e56:	d007      	beq.n	8007e68 <__any_on+0x26>
 8007e58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e5c:	fa24 f001 	lsr.w	r0, r4, r1
 8007e60:	fa00 f101 	lsl.w	r1, r0, r1
 8007e64:	428c      	cmp	r4, r1
 8007e66:	d10b      	bne.n	8007e80 <__any_on+0x3e>
 8007e68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d803      	bhi.n	8007e78 <__any_on+0x36>
 8007e70:	2000      	movs	r0, #0
 8007e72:	bd10      	pop	{r4, pc}
 8007e74:	4603      	mov	r3, r0
 8007e76:	e7f7      	b.n	8007e68 <__any_on+0x26>
 8007e78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d0f5      	beq.n	8007e6c <__any_on+0x2a>
 8007e80:	2001      	movs	r0, #1
 8007e82:	e7f6      	b.n	8007e72 <__any_on+0x30>

08007e84 <_calloc_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	fb02 f501 	mul.w	r5, r2, r1
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7fd ffd0 	bl	8005e30 <_malloc_r>
 8007e90:	4604      	mov	r4, r0
 8007e92:	b118      	cbz	r0, 8007e9c <_calloc_r+0x18>
 8007e94:	462a      	mov	r2, r5
 8007e96:	2100      	movs	r1, #0
 8007e98:	f7fd ff76 	bl	8005d88 <memset>
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}

08007ea0 <nan>:
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4901      	ldr	r1, [pc, #4]	; (8007ea8 <nan+0x8>)
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	7ff80000 	.word	0x7ff80000

08007eac <strcpy>:
 8007eac:	4603      	mov	r3, r0
 8007eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eb2:	f803 2b01 	strb.w	r2, [r3], #1
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	d1f9      	bne.n	8007eae <strcpy+0x2>
 8007eba:	4770      	bx	lr

08007ebc <strncmp>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	b16a      	cbz	r2, 8007edc <strncmp+0x20>
 8007ec0:	3901      	subs	r1, #1
 8007ec2:	1884      	adds	r4, r0, r2
 8007ec4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ec8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d103      	bne.n	8007ed8 <strncmp+0x1c>
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d001      	beq.n	8007ed8 <strncmp+0x1c>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f5      	bne.n	8007ec4 <strncmp+0x8>
 8007ed8:	1a98      	subs	r0, r3, r2
 8007eda:	bd10      	pop	{r4, pc}
 8007edc:	4610      	mov	r0, r2
 8007ede:	e7fc      	b.n	8007eda <strncmp+0x1e>

08007ee0 <__ascii_wctomb>:
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	b141      	cbz	r1, 8007ef8 <__ascii_wctomb+0x18>
 8007ee6:	2aff      	cmp	r2, #255	; 0xff
 8007ee8:	d904      	bls.n	8007ef4 <__ascii_wctomb+0x14>
 8007eea:	228a      	movs	r2, #138	; 0x8a
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	4770      	bx	lr
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	700a      	strb	r2, [r1, #0]
 8007ef8:	4770      	bx	lr
	...

08007efc <__assert_func>:
 8007efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007efe:	4614      	mov	r4, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <__assert_func+0x2c>)
 8007f04:	4605      	mov	r5, r0
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68d8      	ldr	r0, [r3, #12]
 8007f0a:	b14c      	cbz	r4, 8007f20 <__assert_func+0x24>
 8007f0c:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <__assert_func+0x30>)
 8007f0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f12:	9100      	str	r1, [sp, #0]
 8007f14:	462b      	mov	r3, r5
 8007f16:	4906      	ldr	r1, [pc, #24]	; (8007f30 <__assert_func+0x34>)
 8007f18:	f000 fe8c 	bl	8008c34 <fiprintf>
 8007f1c:	f001 fa4c 	bl	80093b8 <abort>
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <__assert_func+0x38>)
 8007f22:	461c      	mov	r4, r3
 8007f24:	e7f3      	b.n	8007f0e <__assert_func+0x12>
 8007f26:	bf00      	nop
 8007f28:	20000064 	.word	0x20000064
 8007f2c:	08009cec 	.word	0x08009cec
 8007f30:	08009cf9 	.word	0x08009cf9
 8007f34:	08009d27 	.word	0x08009d27

08007f38 <quorem>:
 8007f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	6903      	ldr	r3, [r0, #16]
 8007f3e:	690c      	ldr	r4, [r1, #16]
 8007f40:	4607      	mov	r7, r0
 8007f42:	42a3      	cmp	r3, r4
 8007f44:	f2c0 8083 	blt.w	800804e <quorem+0x116>
 8007f48:	3c01      	subs	r4, #1
 8007f4a:	f100 0514 	add.w	r5, r0, #20
 8007f4e:	f101 0814 	add.w	r8, r1, #20
 8007f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f60:	3301      	adds	r3, #1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f70:	d332      	bcc.n	8007fd8 <quorem+0xa0>
 8007f72:	f04f 0e00 	mov.w	lr, #0
 8007f76:	4640      	mov	r0, r8
 8007f78:	46ac      	mov	ip, r5
 8007f7a:	46f2      	mov	sl, lr
 8007f7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f80:	b293      	uxth	r3, r2
 8007f82:	fb06 e303 	mla	r3, r6, r3, lr
 8007f86:	0c12      	lsrs	r2, r2, #16
 8007f88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f8c:	fb06 e202 	mla	r2, r6, r2, lr
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ebaa 0303 	sub.w	r3, sl, r3
 8007f96:	f8dc a000 	ldr.w	sl, [ip]
 8007f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f9e:	fa1f fa8a 	uxth.w	sl, sl
 8007fa2:	4453      	add	r3, sl
 8007fa4:	fa1f fa82 	uxth.w	sl, r2
 8007fa8:	f8dc 2000 	ldr.w	r2, [ip]
 8007fac:	4581      	cmp	r9, r0
 8007fae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007fb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fc0:	f84c 3b04 	str.w	r3, [ip], #4
 8007fc4:	d2da      	bcs.n	8007f7c <quorem+0x44>
 8007fc6:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fca:	b92b      	cbnz	r3, 8007fd8 <quorem+0xa0>
 8007fcc:	9b01      	ldr	r3, [sp, #4]
 8007fce:	3b04      	subs	r3, #4
 8007fd0:	429d      	cmp	r5, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	d32f      	bcc.n	8008036 <quorem+0xfe>
 8007fd6:	613c      	str	r4, [r7, #16]
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f7ff fd43 	bl	8007a64 <__mcmp>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	db25      	blt.n	800802e <quorem+0xf6>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f04f 0c00 	mov.w	ip, #0
 8007fe8:	3601      	adds	r6, #1
 8007fea:	f858 1b04 	ldr.w	r1, [r8], #4
 8007fee:	f8d0 e000 	ldr.w	lr, [r0]
 8007ff2:	b28b      	uxth	r3, r1
 8007ff4:	ebac 0303 	sub.w	r3, ip, r3
 8007ff8:	fa1f f28e 	uxth.w	r2, lr
 8007ffc:	4413      	add	r3, r2
 8007ffe:	0c0a      	lsrs	r2, r1, #16
 8008000:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008008:	b29b      	uxth	r3, r3
 800800a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800800e:	45c1      	cmp	r9, r8
 8008010:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008014:	f840 3b04 	str.w	r3, [r0], #4
 8008018:	d2e7      	bcs.n	8007fea <quorem+0xb2>
 800801a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800801e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008022:	b922      	cbnz	r2, 800802e <quorem+0xf6>
 8008024:	3b04      	subs	r3, #4
 8008026:	429d      	cmp	r5, r3
 8008028:	461a      	mov	r2, r3
 800802a:	d30a      	bcc.n	8008042 <quorem+0x10a>
 800802c:	613c      	str	r4, [r7, #16]
 800802e:	4630      	mov	r0, r6
 8008030:	b003      	add	sp, #12
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	3b04      	subs	r3, #4
 800803a:	2a00      	cmp	r2, #0
 800803c:	d1cb      	bne.n	8007fd6 <quorem+0x9e>
 800803e:	3c01      	subs	r4, #1
 8008040:	e7c6      	b.n	8007fd0 <quorem+0x98>
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	3b04      	subs	r3, #4
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1f0      	bne.n	800802c <quorem+0xf4>
 800804a:	3c01      	subs	r4, #1
 800804c:	e7eb      	b.n	8008026 <quorem+0xee>
 800804e:	2000      	movs	r0, #0
 8008050:	e7ee      	b.n	8008030 <quorem+0xf8>
 8008052:	0000      	movs	r0, r0
 8008054:	0000      	movs	r0, r0
	...

08008058 <_dtoa_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	4616      	mov	r6, r2
 800805e:	461f      	mov	r7, r3
 8008060:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008062:	b099      	sub	sp, #100	; 0x64
 8008064:	4605      	mov	r5, r0
 8008066:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800806a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800806e:	b974      	cbnz	r4, 800808e <_dtoa_r+0x36>
 8008070:	2010      	movs	r0, #16
 8008072:	f7fd fe79 	bl	8005d68 <malloc>
 8008076:	4602      	mov	r2, r0
 8008078:	6268      	str	r0, [r5, #36]	; 0x24
 800807a:	b920      	cbnz	r0, 8008086 <_dtoa_r+0x2e>
 800807c:	21ea      	movs	r1, #234	; 0xea
 800807e:	4bae      	ldr	r3, [pc, #696]	; (8008338 <_dtoa_r+0x2e0>)
 8008080:	48ae      	ldr	r0, [pc, #696]	; (800833c <_dtoa_r+0x2e4>)
 8008082:	f7ff ff3b 	bl	8007efc <__assert_func>
 8008086:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800808a:	6004      	str	r4, [r0, #0]
 800808c:	60c4      	str	r4, [r0, #12]
 800808e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008090:	6819      	ldr	r1, [r3, #0]
 8008092:	b151      	cbz	r1, 80080aa <_dtoa_r+0x52>
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	2301      	movs	r3, #1
 8008098:	4093      	lsls	r3, r2
 800809a:	604a      	str	r2, [r1, #4]
 800809c:	608b      	str	r3, [r1, #8]
 800809e:	4628      	mov	r0, r5
 80080a0:	f7ff fa5c 	bl	800755c <_Bfree>
 80080a4:	2200      	movs	r2, #0
 80080a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	1e3b      	subs	r3, r7, #0
 80080ac:	bfaf      	iteee	ge
 80080ae:	2300      	movge	r3, #0
 80080b0:	2201      	movlt	r2, #1
 80080b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080b6:	9305      	strlt	r3, [sp, #20]
 80080b8:	bfa8      	it	ge
 80080ba:	f8c8 3000 	strge.w	r3, [r8]
 80080be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80080c2:	4b9f      	ldr	r3, [pc, #636]	; (8008340 <_dtoa_r+0x2e8>)
 80080c4:	bfb8      	it	lt
 80080c6:	f8c8 2000 	strlt.w	r2, [r8]
 80080ca:	ea33 0309 	bics.w	r3, r3, r9
 80080ce:	d119      	bne.n	8008104 <_dtoa_r+0xac>
 80080d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80080d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080dc:	4333      	orrs	r3, r6
 80080de:	f000 8580 	beq.w	8008be2 <_dtoa_r+0xb8a>
 80080e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080e4:	b953      	cbnz	r3, 80080fc <_dtoa_r+0xa4>
 80080e6:	4b97      	ldr	r3, [pc, #604]	; (8008344 <_dtoa_r+0x2ec>)
 80080e8:	e022      	b.n	8008130 <_dtoa_r+0xd8>
 80080ea:	4b97      	ldr	r3, [pc, #604]	; (8008348 <_dtoa_r+0x2f0>)
 80080ec:	9308      	str	r3, [sp, #32]
 80080ee:	3308      	adds	r3, #8
 80080f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	9808      	ldr	r0, [sp, #32]
 80080f6:	b019      	add	sp, #100	; 0x64
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	4b91      	ldr	r3, [pc, #580]	; (8008344 <_dtoa_r+0x2ec>)
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	3303      	adds	r3, #3
 8008102:	e7f5      	b.n	80080f0 <_dtoa_r+0x98>
 8008104:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008108:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800810c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	f7f8 fc48 	bl	80009a8 <__aeabi_dcmpeq>
 8008118:	4680      	mov	r8, r0
 800811a:	b158      	cbz	r0, 8008134 <_dtoa_r+0xdc>
 800811c:	2301      	movs	r3, #1
 800811e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8559 	beq.w	8008bdc <_dtoa_r+0xb84>
 800812a:	4888      	ldr	r0, [pc, #544]	; (800834c <_dtoa_r+0x2f4>)
 800812c:	6018      	str	r0, [r3, #0]
 800812e:	1e43      	subs	r3, r0, #1
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	e7df      	b.n	80080f4 <_dtoa_r+0x9c>
 8008134:	ab16      	add	r3, sp, #88	; 0x58
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	ab17      	add	r3, sp, #92	; 0x5c
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	4628      	mov	r0, r5
 800813e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008142:	f7ff fdb5 	bl	8007cb0 <__d2b>
 8008146:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800814a:	4682      	mov	sl, r0
 800814c:	2c00      	cmp	r4, #0
 800814e:	d07e      	beq.n	800824e <_dtoa_r+0x1f6>
 8008150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008156:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800815a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800815e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008162:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008166:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800816a:	2200      	movs	r2, #0
 800816c:	4b78      	ldr	r3, [pc, #480]	; (8008350 <_dtoa_r+0x2f8>)
 800816e:	f7f7 fffb 	bl	8000168 <__aeabi_dsub>
 8008172:	a36b      	add	r3, pc, #428	; (adr r3, 8008320 <_dtoa_r+0x2c8>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f9ae 	bl	80004d8 <__aeabi_dmul>
 800817c:	a36a      	add	r3, pc, #424	; (adr r3, 8008328 <_dtoa_r+0x2d0>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f7 fff3 	bl	800016c <__adddf3>
 8008186:	4606      	mov	r6, r0
 8008188:	4620      	mov	r0, r4
 800818a:	460f      	mov	r7, r1
 800818c:	f7f8 f93a 	bl	8000404 <__aeabi_i2d>
 8008190:	a367      	add	r3, pc, #412	; (adr r3, 8008330 <_dtoa_r+0x2d8>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f7f8 f99f 	bl	80004d8 <__aeabi_dmul>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4630      	mov	r0, r6
 80081a0:	4639      	mov	r1, r7
 80081a2:	f7f7 ffe3 	bl	800016c <__adddf3>
 80081a6:	4606      	mov	r6, r0
 80081a8:	460f      	mov	r7, r1
 80081aa:	f7f8 fc2f 	bl	8000a0c <__aeabi_d2iz>
 80081ae:	2200      	movs	r2, #0
 80081b0:	4681      	mov	r9, r0
 80081b2:	2300      	movs	r3, #0
 80081b4:	4630      	mov	r0, r6
 80081b6:	4639      	mov	r1, r7
 80081b8:	f7f8 fc00 	bl	80009bc <__aeabi_dcmplt>
 80081bc:	b148      	cbz	r0, 80081d2 <_dtoa_r+0x17a>
 80081be:	4648      	mov	r0, r9
 80081c0:	f7f8 f920 	bl	8000404 <__aeabi_i2d>
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	f7f8 fbee 	bl	80009a8 <__aeabi_dcmpeq>
 80081cc:	b908      	cbnz	r0, 80081d2 <_dtoa_r+0x17a>
 80081ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80081d2:	f1b9 0f16 	cmp.w	r9, #22
 80081d6:	d857      	bhi.n	8008288 <_dtoa_r+0x230>
 80081d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081dc:	4b5d      	ldr	r3, [pc, #372]	; (8008354 <_dtoa_r+0x2fc>)
 80081de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f8 fbe9 	bl	80009bc <__aeabi_dcmplt>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d04e      	beq.n	800828c <_dtoa_r+0x234>
 80081ee:	2300      	movs	r3, #0
 80081f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80081f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081f8:	1b1c      	subs	r4, r3, r4
 80081fa:	1e63      	subs	r3, r4, #1
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
 80081fe:	bf49      	itett	mi
 8008200:	f1c4 0301 	rsbmi	r3, r4, #1
 8008204:	2300      	movpl	r3, #0
 8008206:	9306      	strmi	r3, [sp, #24]
 8008208:	2300      	movmi	r3, #0
 800820a:	bf54      	ite	pl
 800820c:	9306      	strpl	r3, [sp, #24]
 800820e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	db3c      	blt.n	8008290 <_dtoa_r+0x238>
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800821c:	444b      	add	r3, r9
 800821e:	9309      	str	r3, [sp, #36]	; 0x24
 8008220:	2300      	movs	r3, #0
 8008222:	930a      	str	r3, [sp, #40]	; 0x28
 8008224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008226:	2b09      	cmp	r3, #9
 8008228:	d86c      	bhi.n	8008304 <_dtoa_r+0x2ac>
 800822a:	2b05      	cmp	r3, #5
 800822c:	bfc4      	itt	gt
 800822e:	3b04      	subgt	r3, #4
 8008230:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008232:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008234:	bfc8      	it	gt
 8008236:	2400      	movgt	r4, #0
 8008238:	f1a3 0302 	sub.w	r3, r3, #2
 800823c:	bfd8      	it	le
 800823e:	2401      	movle	r4, #1
 8008240:	2b03      	cmp	r3, #3
 8008242:	f200 808b 	bhi.w	800835c <_dtoa_r+0x304>
 8008246:	e8df f003 	tbb	[pc, r3]
 800824a:	4f2d      	.short	0x4f2d
 800824c:	5b4d      	.short	0x5b4d
 800824e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008252:	441c      	add	r4, r3
 8008254:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008258:	2b20      	cmp	r3, #32
 800825a:	bfc3      	ittte	gt
 800825c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008260:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008264:	fa09 f303 	lslgt.w	r3, r9, r3
 8008268:	f1c3 0320 	rsble	r3, r3, #32
 800826c:	bfc6      	itte	gt
 800826e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008272:	4318      	orrgt	r0, r3
 8008274:	fa06 f003 	lslle.w	r0, r6, r3
 8008278:	f7f8 f8b4 	bl	80003e4 <__aeabi_ui2d>
 800827c:	2301      	movs	r3, #1
 800827e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008282:	3c01      	subs	r4, #1
 8008284:	9313      	str	r3, [sp, #76]	; 0x4c
 8008286:	e770      	b.n	800816a <_dtoa_r+0x112>
 8008288:	2301      	movs	r3, #1
 800828a:	e7b3      	b.n	80081f4 <_dtoa_r+0x19c>
 800828c:	900f      	str	r0, [sp, #60]	; 0x3c
 800828e:	e7b2      	b.n	80081f6 <_dtoa_r+0x19e>
 8008290:	9b06      	ldr	r3, [sp, #24]
 8008292:	eba3 0309 	sub.w	r3, r3, r9
 8008296:	9306      	str	r3, [sp, #24]
 8008298:	f1c9 0300 	rsb	r3, r9, #0
 800829c:	930a      	str	r3, [sp, #40]	; 0x28
 800829e:	2300      	movs	r3, #0
 80082a0:	930e      	str	r3, [sp, #56]	; 0x38
 80082a2:	e7bf      	b.n	8008224 <_dtoa_r+0x1cc>
 80082a4:	2300      	movs	r3, #0
 80082a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dc59      	bgt.n	8008362 <_dtoa_r+0x30a>
 80082ae:	f04f 0b01 	mov.w	fp, #1
 80082b2:	465b      	mov	r3, fp
 80082b4:	f8cd b008 	str.w	fp, [sp, #8]
 80082b8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80082bc:	2200      	movs	r2, #0
 80082be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80082c0:	6042      	str	r2, [r0, #4]
 80082c2:	2204      	movs	r2, #4
 80082c4:	f102 0614 	add.w	r6, r2, #20
 80082c8:	429e      	cmp	r6, r3
 80082ca:	6841      	ldr	r1, [r0, #4]
 80082cc:	d94f      	bls.n	800836e <_dtoa_r+0x316>
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7ff f904 	bl	80074dc <_Balloc>
 80082d4:	9008      	str	r0, [sp, #32]
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d14d      	bne.n	8008376 <_dtoa_r+0x31e>
 80082da:	4602      	mov	r2, r0
 80082dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082e0:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <_dtoa_r+0x300>)
 80082e2:	e6cd      	b.n	8008080 <_dtoa_r+0x28>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7de      	b.n	80082a6 <_dtoa_r+0x24e>
 80082e8:	2300      	movs	r3, #0
 80082ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ee:	eb09 0b03 	add.w	fp, r9, r3
 80082f2:	f10b 0301 	add.w	r3, fp, #1
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	bfb8      	it	lt
 80082fc:	2301      	movlt	r3, #1
 80082fe:	e7dd      	b.n	80082bc <_dtoa_r+0x264>
 8008300:	2301      	movs	r3, #1
 8008302:	e7f2      	b.n	80082ea <_dtoa_r+0x292>
 8008304:	2401      	movs	r4, #1
 8008306:	2300      	movs	r3, #0
 8008308:	940b      	str	r4, [sp, #44]	; 0x2c
 800830a:	9322      	str	r3, [sp, #136]	; 0x88
 800830c:	f04f 3bff 	mov.w	fp, #4294967295
 8008310:	2200      	movs	r2, #0
 8008312:	2312      	movs	r3, #18
 8008314:	f8cd b008 	str.w	fp, [sp, #8]
 8008318:	9223      	str	r2, [sp, #140]	; 0x8c
 800831a:	e7cf      	b.n	80082bc <_dtoa_r+0x264>
 800831c:	f3af 8000 	nop.w
 8008320:	636f4361 	.word	0x636f4361
 8008324:	3fd287a7 	.word	0x3fd287a7
 8008328:	8b60c8b3 	.word	0x8b60c8b3
 800832c:	3fc68a28 	.word	0x3fc68a28
 8008330:	509f79fb 	.word	0x509f79fb
 8008334:	3fd34413 	.word	0x3fd34413
 8008338:	08009b78 	.word	0x08009b78
 800833c:	08009e38 	.word	0x08009e38
 8008340:	7ff00000 	.word	0x7ff00000
 8008344:	08009e32 	.word	0x08009e32
 8008348:	08009e29 	.word	0x08009e29
 800834c:	08009e37 	.word	0x08009e37
 8008350:	3ff80000 	.word	0x3ff80000
 8008354:	08009c18 	.word	0x08009c18
 8008358:	08009ae8 	.word	0x08009ae8
 800835c:	2301      	movs	r3, #1
 800835e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008360:	e7d4      	b.n	800830c <_dtoa_r+0x2b4>
 8008362:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008366:	465b      	mov	r3, fp
 8008368:	f8cd b008 	str.w	fp, [sp, #8]
 800836c:	e7a6      	b.n	80082bc <_dtoa_r+0x264>
 800836e:	3101      	adds	r1, #1
 8008370:	6041      	str	r1, [r0, #4]
 8008372:	0052      	lsls	r2, r2, #1
 8008374:	e7a6      	b.n	80082c4 <_dtoa_r+0x26c>
 8008376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008378:	9a08      	ldr	r2, [sp, #32]
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	2b0e      	cmp	r3, #14
 8008380:	f200 80a8 	bhi.w	80084d4 <_dtoa_r+0x47c>
 8008384:	2c00      	cmp	r4, #0
 8008386:	f000 80a5 	beq.w	80084d4 <_dtoa_r+0x47c>
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	dd34      	ble.n	80083fa <_dtoa_r+0x3a2>
 8008390:	4a9a      	ldr	r2, [pc, #616]	; (80085fc <_dtoa_r+0x5a4>)
 8008392:	f009 030f 	and.w	r3, r9, #15
 8008396:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800839a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800839e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083a6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80083aa:	d016      	beq.n	80083da <_dtoa_r+0x382>
 80083ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083b0:	4b93      	ldr	r3, [pc, #588]	; (8008600 <_dtoa_r+0x5a8>)
 80083b2:	2703      	movs	r7, #3
 80083b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083b8:	f7f8 f9b8 	bl	800072c <__aeabi_ddiv>
 80083bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c0:	f004 040f 	and.w	r4, r4, #15
 80083c4:	4e8e      	ldr	r6, [pc, #568]	; (8008600 <_dtoa_r+0x5a8>)
 80083c6:	b954      	cbnz	r4, 80083de <_dtoa_r+0x386>
 80083c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083d0:	f7f8 f9ac 	bl	800072c <__aeabi_ddiv>
 80083d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083d8:	e029      	b.n	800842e <_dtoa_r+0x3d6>
 80083da:	2702      	movs	r7, #2
 80083dc:	e7f2      	b.n	80083c4 <_dtoa_r+0x36c>
 80083de:	07e1      	lsls	r1, r4, #31
 80083e0:	d508      	bpl.n	80083f4 <_dtoa_r+0x39c>
 80083e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083ea:	f7f8 f875 	bl	80004d8 <__aeabi_dmul>
 80083ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083f2:	3701      	adds	r7, #1
 80083f4:	1064      	asrs	r4, r4, #1
 80083f6:	3608      	adds	r6, #8
 80083f8:	e7e5      	b.n	80083c6 <_dtoa_r+0x36e>
 80083fa:	f000 80a5 	beq.w	8008548 <_dtoa_r+0x4f0>
 80083fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008402:	f1c9 0400 	rsb	r4, r9, #0
 8008406:	4b7d      	ldr	r3, [pc, #500]	; (80085fc <_dtoa_r+0x5a4>)
 8008408:	f004 020f 	and.w	r2, r4, #15
 800840c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f8 f860 	bl	80004d8 <__aeabi_dmul>
 8008418:	2702      	movs	r7, #2
 800841a:	2300      	movs	r3, #0
 800841c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008420:	4e77      	ldr	r6, [pc, #476]	; (8008600 <_dtoa_r+0x5a8>)
 8008422:	1124      	asrs	r4, r4, #4
 8008424:	2c00      	cmp	r4, #0
 8008426:	f040 8084 	bne.w	8008532 <_dtoa_r+0x4da>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1d2      	bne.n	80083d4 <_dtoa_r+0x37c>
 800842e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 808b 	beq.w	800854c <_dtoa_r+0x4f4>
 8008436:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800843a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800843e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008442:	2200      	movs	r2, #0
 8008444:	4b6f      	ldr	r3, [pc, #444]	; (8008604 <_dtoa_r+0x5ac>)
 8008446:	f7f8 fab9 	bl	80009bc <__aeabi_dcmplt>
 800844a:	2800      	cmp	r0, #0
 800844c:	d07e      	beq.n	800854c <_dtoa_r+0x4f4>
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d07b      	beq.n	800854c <_dtoa_r+0x4f4>
 8008454:	f1bb 0f00 	cmp.w	fp, #0
 8008458:	dd38      	ble.n	80084cc <_dtoa_r+0x474>
 800845a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800845e:	2200      	movs	r2, #0
 8008460:	4b69      	ldr	r3, [pc, #420]	; (8008608 <_dtoa_r+0x5b0>)
 8008462:	f7f8 f839 	bl	80004d8 <__aeabi_dmul>
 8008466:	465c      	mov	r4, fp
 8008468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800846c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008470:	3701      	adds	r7, #1
 8008472:	4638      	mov	r0, r7
 8008474:	f7f7 ffc6 	bl	8000404 <__aeabi_i2d>
 8008478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800847c:	f7f8 f82c 	bl	80004d8 <__aeabi_dmul>
 8008480:	2200      	movs	r2, #0
 8008482:	4b62      	ldr	r3, [pc, #392]	; (800860c <_dtoa_r+0x5b4>)
 8008484:	f7f7 fe72 	bl	800016c <__adddf3>
 8008488:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800848c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008490:	9611      	str	r6, [sp, #68]	; 0x44
 8008492:	2c00      	cmp	r4, #0
 8008494:	d15d      	bne.n	8008552 <_dtoa_r+0x4fa>
 8008496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800849a:	2200      	movs	r2, #0
 800849c:	4b5c      	ldr	r3, [pc, #368]	; (8008610 <_dtoa_r+0x5b8>)
 800849e:	f7f7 fe63 	bl	8000168 <__aeabi_dsub>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084aa:	4633      	mov	r3, r6
 80084ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084ae:	f7f8 faa3 	bl	80009f8 <__aeabi_dcmpgt>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f040 829e 	bne.w	80089f4 <_dtoa_r+0x99c>
 80084b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084c2:	f7f8 fa7b 	bl	80009bc <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f040 8292 	bne.w	80089f0 <_dtoa_r+0x998>
 80084cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80084d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f2c0 8153 	blt.w	8008782 <_dtoa_r+0x72a>
 80084dc:	f1b9 0f0e 	cmp.w	r9, #14
 80084e0:	f300 814f 	bgt.w	8008782 <_dtoa_r+0x72a>
 80084e4:	4b45      	ldr	r3, [pc, #276]	; (80085fc <_dtoa_r+0x5a4>)
 80084e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80084ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80084f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f280 80db 	bge.w	80086b0 <_dtoa_r+0x658>
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f300 80d7 	bgt.w	80086b0 <_dtoa_r+0x658>
 8008502:	f040 8274 	bne.w	80089ee <_dtoa_r+0x996>
 8008506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800850a:	2200      	movs	r2, #0
 800850c:	4b40      	ldr	r3, [pc, #256]	; (8008610 <_dtoa_r+0x5b8>)
 800850e:	f7f7 ffe3 	bl	80004d8 <__aeabi_dmul>
 8008512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008516:	f7f8 fa65 	bl	80009e4 <__aeabi_dcmpge>
 800851a:	9c02      	ldr	r4, [sp, #8]
 800851c:	4626      	mov	r6, r4
 800851e:	2800      	cmp	r0, #0
 8008520:	f040 824a 	bne.w	80089b8 <_dtoa_r+0x960>
 8008524:	2331      	movs	r3, #49	; 0x31
 8008526:	9f08      	ldr	r7, [sp, #32]
 8008528:	f109 0901 	add.w	r9, r9, #1
 800852c:	f807 3b01 	strb.w	r3, [r7], #1
 8008530:	e246      	b.n	80089c0 <_dtoa_r+0x968>
 8008532:	07e2      	lsls	r2, r4, #31
 8008534:	d505      	bpl.n	8008542 <_dtoa_r+0x4ea>
 8008536:	e9d6 2300 	ldrd	r2, r3, [r6]
 800853a:	f7f7 ffcd 	bl	80004d8 <__aeabi_dmul>
 800853e:	2301      	movs	r3, #1
 8008540:	3701      	adds	r7, #1
 8008542:	1064      	asrs	r4, r4, #1
 8008544:	3608      	adds	r6, #8
 8008546:	e76d      	b.n	8008424 <_dtoa_r+0x3cc>
 8008548:	2702      	movs	r7, #2
 800854a:	e770      	b.n	800842e <_dtoa_r+0x3d6>
 800854c:	46c8      	mov	r8, r9
 800854e:	9c02      	ldr	r4, [sp, #8]
 8008550:	e78f      	b.n	8008472 <_dtoa_r+0x41a>
 8008552:	9908      	ldr	r1, [sp, #32]
 8008554:	4b29      	ldr	r3, [pc, #164]	; (80085fc <_dtoa_r+0x5a4>)
 8008556:	4421      	add	r1, r4
 8008558:	9112      	str	r1, [sp, #72]	; 0x48
 800855a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800855c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008560:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008564:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008568:	2900      	cmp	r1, #0
 800856a:	d055      	beq.n	8008618 <_dtoa_r+0x5c0>
 800856c:	2000      	movs	r0, #0
 800856e:	4929      	ldr	r1, [pc, #164]	; (8008614 <_dtoa_r+0x5bc>)
 8008570:	f7f8 f8dc 	bl	800072c <__aeabi_ddiv>
 8008574:	463b      	mov	r3, r7
 8008576:	4632      	mov	r2, r6
 8008578:	f7f7 fdf6 	bl	8000168 <__aeabi_dsub>
 800857c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008580:	9f08      	ldr	r7, [sp, #32]
 8008582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008586:	f7f8 fa41 	bl	8000a0c <__aeabi_d2iz>
 800858a:	4604      	mov	r4, r0
 800858c:	f7f7 ff3a 	bl	8000404 <__aeabi_i2d>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008598:	f7f7 fde6 	bl	8000168 <__aeabi_dsub>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	3430      	adds	r4, #48	; 0x30
 80085a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085aa:	f807 4b01 	strb.w	r4, [r7], #1
 80085ae:	f7f8 fa05 	bl	80009bc <__aeabi_dcmplt>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d174      	bne.n	80086a0 <_dtoa_r+0x648>
 80085b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ba:	2000      	movs	r0, #0
 80085bc:	4911      	ldr	r1, [pc, #68]	; (8008604 <_dtoa_r+0x5ac>)
 80085be:	f7f7 fdd3 	bl	8000168 <__aeabi_dsub>
 80085c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085c6:	f7f8 f9f9 	bl	80009bc <__aeabi_dcmplt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f040 80b6 	bne.w	800873c <_dtoa_r+0x6e4>
 80085d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085d2:	429f      	cmp	r7, r3
 80085d4:	f43f af7a 	beq.w	80084cc <_dtoa_r+0x474>
 80085d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085dc:	2200      	movs	r2, #0
 80085de:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <_dtoa_r+0x5b0>)
 80085e0:	f7f7 ff7a 	bl	80004d8 <__aeabi_dmul>
 80085e4:	2200      	movs	r2, #0
 80085e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <_dtoa_r+0x5b0>)
 80085f0:	f7f7 ff72 	bl	80004d8 <__aeabi_dmul>
 80085f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085f8:	e7c3      	b.n	8008582 <_dtoa_r+0x52a>
 80085fa:	bf00      	nop
 80085fc:	08009c18 	.word	0x08009c18
 8008600:	08009bf0 	.word	0x08009bf0
 8008604:	3ff00000 	.word	0x3ff00000
 8008608:	40240000 	.word	0x40240000
 800860c:	401c0000 	.word	0x401c0000
 8008610:	40140000 	.word	0x40140000
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f7 ff5c 	bl	80004d8 <__aeabi_dmul>
 8008620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008622:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008626:	9c08      	ldr	r4, [sp, #32]
 8008628:	9314      	str	r3, [sp, #80]	; 0x50
 800862a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862e:	f7f8 f9ed 	bl	8000a0c <__aeabi_d2iz>
 8008632:	9015      	str	r0, [sp, #84]	; 0x54
 8008634:	f7f7 fee6 	bl	8000404 <__aeabi_i2d>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008640:	f7f7 fd92 	bl	8000168 <__aeabi_dsub>
 8008644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008646:	4606      	mov	r6, r0
 8008648:	3330      	adds	r3, #48	; 0x30
 800864a:	f804 3b01 	strb.w	r3, [r4], #1
 800864e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008650:	460f      	mov	r7, r1
 8008652:	429c      	cmp	r4, r3
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	d124      	bne.n	80086a4 <_dtoa_r+0x64c>
 800865a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800865e:	4bb3      	ldr	r3, [pc, #716]	; (800892c <_dtoa_r+0x8d4>)
 8008660:	f7f7 fd84 	bl	800016c <__adddf3>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f8 f9c4 	bl	80009f8 <__aeabi_dcmpgt>
 8008670:	2800      	cmp	r0, #0
 8008672:	d162      	bne.n	800873a <_dtoa_r+0x6e2>
 8008674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008678:	2000      	movs	r0, #0
 800867a:	49ac      	ldr	r1, [pc, #688]	; (800892c <_dtoa_r+0x8d4>)
 800867c:	f7f7 fd74 	bl	8000168 <__aeabi_dsub>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	4630      	mov	r0, r6
 8008686:	4639      	mov	r1, r7
 8008688:	f7f8 f998 	bl	80009bc <__aeabi_dcmplt>
 800868c:	2800      	cmp	r0, #0
 800868e:	f43f af1d 	beq.w	80084cc <_dtoa_r+0x474>
 8008692:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008694:	1e7b      	subs	r3, r7, #1
 8008696:	9314      	str	r3, [sp, #80]	; 0x50
 8008698:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800869c:	2b30      	cmp	r3, #48	; 0x30
 800869e:	d0f8      	beq.n	8008692 <_dtoa_r+0x63a>
 80086a0:	46c1      	mov	r9, r8
 80086a2:	e03a      	b.n	800871a <_dtoa_r+0x6c2>
 80086a4:	4ba2      	ldr	r3, [pc, #648]	; (8008930 <_dtoa_r+0x8d8>)
 80086a6:	f7f7 ff17 	bl	80004d8 <__aeabi_dmul>
 80086aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ae:	e7bc      	b.n	800862a <_dtoa_r+0x5d2>
 80086b0:	9f08      	ldr	r7, [sp, #32]
 80086b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ba:	f7f8 f837 	bl	800072c <__aeabi_ddiv>
 80086be:	f7f8 f9a5 	bl	8000a0c <__aeabi_d2iz>
 80086c2:	4604      	mov	r4, r0
 80086c4:	f7f7 fe9e 	bl	8000404 <__aeabi_i2d>
 80086c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086cc:	f7f7 ff04 	bl	80004d8 <__aeabi_dmul>
 80086d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80086d4:	460b      	mov	r3, r1
 80086d6:	4602      	mov	r2, r0
 80086d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086dc:	f7f7 fd44 	bl	8000168 <__aeabi_dsub>
 80086e0:	f807 6b01 	strb.w	r6, [r7], #1
 80086e4:	9e08      	ldr	r6, [sp, #32]
 80086e6:	9b02      	ldr	r3, [sp, #8]
 80086e8:	1bbe      	subs	r6, r7, r6
 80086ea:	42b3      	cmp	r3, r6
 80086ec:	d13a      	bne.n	8008764 <_dtoa_r+0x70c>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	f7f7 fd3b 	bl	800016c <__adddf3>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008702:	f7f8 f979 	bl	80009f8 <__aeabi_dcmpgt>
 8008706:	bb58      	cbnz	r0, 8008760 <_dtoa_r+0x708>
 8008708:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800870c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008710:	f7f8 f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8008714:	b108      	cbz	r0, 800871a <_dtoa_r+0x6c2>
 8008716:	07e1      	lsls	r1, r4, #31
 8008718:	d422      	bmi.n	8008760 <_dtoa_r+0x708>
 800871a:	4628      	mov	r0, r5
 800871c:	4651      	mov	r1, sl
 800871e:	f7fe ff1d 	bl	800755c <_Bfree>
 8008722:	2300      	movs	r3, #0
 8008724:	703b      	strb	r3, [r7, #0]
 8008726:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008728:	f109 0001 	add.w	r0, r9, #1
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008730:	2b00      	cmp	r3, #0
 8008732:	f43f acdf 	beq.w	80080f4 <_dtoa_r+0x9c>
 8008736:	601f      	str	r7, [r3, #0]
 8008738:	e4dc      	b.n	80080f4 <_dtoa_r+0x9c>
 800873a:	4627      	mov	r7, r4
 800873c:	463b      	mov	r3, r7
 800873e:	461f      	mov	r7, r3
 8008740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008744:	2a39      	cmp	r2, #57	; 0x39
 8008746:	d107      	bne.n	8008758 <_dtoa_r+0x700>
 8008748:	9a08      	ldr	r2, [sp, #32]
 800874a:	429a      	cmp	r2, r3
 800874c:	d1f7      	bne.n	800873e <_dtoa_r+0x6e6>
 800874e:	2230      	movs	r2, #48	; 0x30
 8008750:	9908      	ldr	r1, [sp, #32]
 8008752:	f108 0801 	add.w	r8, r8, #1
 8008756:	700a      	strb	r2, [r1, #0]
 8008758:	781a      	ldrb	r2, [r3, #0]
 800875a:	3201      	adds	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e79f      	b.n	80086a0 <_dtoa_r+0x648>
 8008760:	46c8      	mov	r8, r9
 8008762:	e7eb      	b.n	800873c <_dtoa_r+0x6e4>
 8008764:	2200      	movs	r2, #0
 8008766:	4b72      	ldr	r3, [pc, #456]	; (8008930 <_dtoa_r+0x8d8>)
 8008768:	f7f7 feb6 	bl	80004d8 <__aeabi_dmul>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008774:	2200      	movs	r2, #0
 8008776:	2300      	movs	r3, #0
 8008778:	f7f8 f916 	bl	80009a8 <__aeabi_dcmpeq>
 800877c:	2800      	cmp	r0, #0
 800877e:	d098      	beq.n	80086b2 <_dtoa_r+0x65a>
 8008780:	e7cb      	b.n	800871a <_dtoa_r+0x6c2>
 8008782:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008784:	2a00      	cmp	r2, #0
 8008786:	f000 80cd 	beq.w	8008924 <_dtoa_r+0x8cc>
 800878a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800878c:	2a01      	cmp	r2, #1
 800878e:	f300 80af 	bgt.w	80088f0 <_dtoa_r+0x898>
 8008792:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008794:	2a00      	cmp	r2, #0
 8008796:	f000 80a7 	beq.w	80088e8 <_dtoa_r+0x890>
 800879a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800879e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087a0:	9f06      	ldr	r7, [sp, #24]
 80087a2:	9a06      	ldr	r2, [sp, #24]
 80087a4:	2101      	movs	r1, #1
 80087a6:	441a      	add	r2, r3
 80087a8:	9206      	str	r2, [sp, #24]
 80087aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ac:	4628      	mov	r0, r5
 80087ae:	441a      	add	r2, r3
 80087b0:	9209      	str	r2, [sp, #36]	; 0x24
 80087b2:	f7fe ffd7 	bl	8007764 <__i2b>
 80087b6:	4606      	mov	r6, r0
 80087b8:	2f00      	cmp	r7, #0
 80087ba:	dd0c      	ble.n	80087d6 <_dtoa_r+0x77e>
 80087bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd09      	ble.n	80087d6 <_dtoa_r+0x77e>
 80087c2:	42bb      	cmp	r3, r7
 80087c4:	bfa8      	it	ge
 80087c6:	463b      	movge	r3, r7
 80087c8:	9a06      	ldr	r2, [sp, #24]
 80087ca:	1aff      	subs	r7, r7, r3
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	9206      	str	r2, [sp, #24]
 80087d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	9309      	str	r3, [sp, #36]	; 0x24
 80087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d8:	b1f3      	cbz	r3, 8008818 <_dtoa_r+0x7c0>
 80087da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80a9 	beq.w	8008934 <_dtoa_r+0x8dc>
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	dd10      	ble.n	8008808 <_dtoa_r+0x7b0>
 80087e6:	4631      	mov	r1, r6
 80087e8:	4622      	mov	r2, r4
 80087ea:	4628      	mov	r0, r5
 80087ec:	f7ff f874 	bl	80078d8 <__pow5mult>
 80087f0:	4652      	mov	r2, sl
 80087f2:	4601      	mov	r1, r0
 80087f4:	4606      	mov	r6, r0
 80087f6:	4628      	mov	r0, r5
 80087f8:	f7fe ffca 	bl	8007790 <__multiply>
 80087fc:	4680      	mov	r8, r0
 80087fe:	4651      	mov	r1, sl
 8008800:	4628      	mov	r0, r5
 8008802:	f7fe feab 	bl	800755c <_Bfree>
 8008806:	46c2      	mov	sl, r8
 8008808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880a:	1b1a      	subs	r2, r3, r4
 800880c:	d004      	beq.n	8008818 <_dtoa_r+0x7c0>
 800880e:	4651      	mov	r1, sl
 8008810:	4628      	mov	r0, r5
 8008812:	f7ff f861 	bl	80078d8 <__pow5mult>
 8008816:	4682      	mov	sl, r0
 8008818:	2101      	movs	r1, #1
 800881a:	4628      	mov	r0, r5
 800881c:	f7fe ffa2 	bl	8007764 <__i2b>
 8008820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008822:	4604      	mov	r4, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	f340 8087 	ble.w	8008938 <_dtoa_r+0x8e0>
 800882a:	461a      	mov	r2, r3
 800882c:	4601      	mov	r1, r0
 800882e:	4628      	mov	r0, r5
 8008830:	f7ff f852 	bl	80078d8 <__pow5mult>
 8008834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008836:	4604      	mov	r4, r0
 8008838:	2b01      	cmp	r3, #1
 800883a:	f340 8080 	ble.w	800893e <_dtoa_r+0x8e6>
 800883e:	f04f 0800 	mov.w	r8, #0
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008848:	6918      	ldr	r0, [r3, #16]
 800884a:	f7fe ff3d 	bl	80076c8 <__hi0bits>
 800884e:	f1c0 0020 	rsb	r0, r0, #32
 8008852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008854:	4418      	add	r0, r3
 8008856:	f010 001f 	ands.w	r0, r0, #31
 800885a:	f000 8092 	beq.w	8008982 <_dtoa_r+0x92a>
 800885e:	f1c0 0320 	rsb	r3, r0, #32
 8008862:	2b04      	cmp	r3, #4
 8008864:	f340 808a 	ble.w	800897c <_dtoa_r+0x924>
 8008868:	f1c0 001c 	rsb	r0, r0, #28
 800886c:	9b06      	ldr	r3, [sp, #24]
 800886e:	4407      	add	r7, r0
 8008870:	4403      	add	r3, r0
 8008872:	9306      	str	r3, [sp, #24]
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	4403      	add	r3, r0
 8008878:	9309      	str	r3, [sp, #36]	; 0x24
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	dd05      	ble.n	800888c <_dtoa_r+0x834>
 8008880:	4651      	mov	r1, sl
 8008882:	461a      	mov	r2, r3
 8008884:	4628      	mov	r0, r5
 8008886:	f7ff f881 	bl	800798c <__lshift>
 800888a:	4682      	mov	sl, r0
 800888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd05      	ble.n	800889e <_dtoa_r+0x846>
 8008892:	4621      	mov	r1, r4
 8008894:	461a      	mov	r2, r3
 8008896:	4628      	mov	r0, r5
 8008898:	f7ff f878 	bl	800798c <__lshift>
 800889c:	4604      	mov	r4, r0
 800889e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d070      	beq.n	8008986 <_dtoa_r+0x92e>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4650      	mov	r0, sl
 80088a8:	f7ff f8dc 	bl	8007a64 <__mcmp>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	da6a      	bge.n	8008986 <_dtoa_r+0x92e>
 80088b0:	2300      	movs	r3, #0
 80088b2:	4651      	mov	r1, sl
 80088b4:	220a      	movs	r2, #10
 80088b6:	4628      	mov	r0, r5
 80088b8:	f7fe fe72 	bl	80075a0 <__multadd>
 80088bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088be:	4682      	mov	sl, r0
 80088c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8193 	beq.w	8008bf0 <_dtoa_r+0xb98>
 80088ca:	4631      	mov	r1, r6
 80088cc:	2300      	movs	r3, #0
 80088ce:	220a      	movs	r2, #10
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7fe fe65 	bl	80075a0 <__multadd>
 80088d6:	f1bb 0f00 	cmp.w	fp, #0
 80088da:	4606      	mov	r6, r0
 80088dc:	f300 8093 	bgt.w	8008a06 <_dtoa_r+0x9ae>
 80088e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	dc57      	bgt.n	8008996 <_dtoa_r+0x93e>
 80088e6:	e08e      	b.n	8008a06 <_dtoa_r+0x9ae>
 80088e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088ee:	e756      	b.n	800879e <_dtoa_r+0x746>
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	1e5c      	subs	r4, r3, #1
 80088f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f6:	42a3      	cmp	r3, r4
 80088f8:	bfb7      	itett	lt
 80088fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088fc:	1b1c      	subge	r4, r3, r4
 80088fe:	1ae2      	sublt	r2, r4, r3
 8008900:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008902:	bfbe      	ittt	lt
 8008904:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008906:	189b      	addlt	r3, r3, r2
 8008908:	930e      	strlt	r3, [sp, #56]	; 0x38
 800890a:	9b02      	ldr	r3, [sp, #8]
 800890c:	bfb8      	it	lt
 800890e:	2400      	movlt	r4, #0
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfbb      	ittet	lt
 8008914:	9b06      	ldrlt	r3, [sp, #24]
 8008916:	9a02      	ldrlt	r2, [sp, #8]
 8008918:	9f06      	ldrge	r7, [sp, #24]
 800891a:	1a9f      	sublt	r7, r3, r2
 800891c:	bfac      	ite	ge
 800891e:	9b02      	ldrge	r3, [sp, #8]
 8008920:	2300      	movlt	r3, #0
 8008922:	e73e      	b.n	80087a2 <_dtoa_r+0x74a>
 8008924:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008926:	9f06      	ldr	r7, [sp, #24]
 8008928:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800892a:	e745      	b.n	80087b8 <_dtoa_r+0x760>
 800892c:	3fe00000 	.word	0x3fe00000
 8008930:	40240000 	.word	0x40240000
 8008934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008936:	e76a      	b.n	800880e <_dtoa_r+0x7b6>
 8008938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800893a:	2b01      	cmp	r3, #1
 800893c:	dc19      	bgt.n	8008972 <_dtoa_r+0x91a>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	b9bb      	cbnz	r3, 8008972 <_dtoa_r+0x91a>
 8008942:	9b05      	ldr	r3, [sp, #20]
 8008944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008948:	b99b      	cbnz	r3, 8008972 <_dtoa_r+0x91a>
 800894a:	9b05      	ldr	r3, [sp, #20]
 800894c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008950:	0d1b      	lsrs	r3, r3, #20
 8008952:	051b      	lsls	r3, r3, #20
 8008954:	b183      	cbz	r3, 8008978 <_dtoa_r+0x920>
 8008956:	f04f 0801 	mov.w	r8, #1
 800895a:	9b06      	ldr	r3, [sp, #24]
 800895c:	3301      	adds	r3, #1
 800895e:	9306      	str	r3, [sp, #24]
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	3301      	adds	r3, #1
 8008964:	9309      	str	r3, [sp, #36]	; 0x24
 8008966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	f47f af6a 	bne.w	8008842 <_dtoa_r+0x7ea>
 800896e:	2001      	movs	r0, #1
 8008970:	e76f      	b.n	8008852 <_dtoa_r+0x7fa>
 8008972:	f04f 0800 	mov.w	r8, #0
 8008976:	e7f6      	b.n	8008966 <_dtoa_r+0x90e>
 8008978:	4698      	mov	r8, r3
 800897a:	e7f4      	b.n	8008966 <_dtoa_r+0x90e>
 800897c:	f43f af7d 	beq.w	800887a <_dtoa_r+0x822>
 8008980:	4618      	mov	r0, r3
 8008982:	301c      	adds	r0, #28
 8008984:	e772      	b.n	800886c <_dtoa_r+0x814>
 8008986:	9b02      	ldr	r3, [sp, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	dc36      	bgt.n	80089fa <_dtoa_r+0x9a2>
 800898c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800898e:	2b02      	cmp	r3, #2
 8008990:	dd33      	ble.n	80089fa <_dtoa_r+0x9a2>
 8008992:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008996:	f1bb 0f00 	cmp.w	fp, #0
 800899a:	d10d      	bne.n	80089b8 <_dtoa_r+0x960>
 800899c:	4621      	mov	r1, r4
 800899e:	465b      	mov	r3, fp
 80089a0:	2205      	movs	r2, #5
 80089a2:	4628      	mov	r0, r5
 80089a4:	f7fe fdfc 	bl	80075a0 <__multadd>
 80089a8:	4601      	mov	r1, r0
 80089aa:	4604      	mov	r4, r0
 80089ac:	4650      	mov	r0, sl
 80089ae:	f7ff f859 	bl	8007a64 <__mcmp>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	f73f adb6 	bgt.w	8008524 <_dtoa_r+0x4cc>
 80089b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ba:	9f08      	ldr	r7, [sp, #32]
 80089bc:	ea6f 0903 	mvn.w	r9, r3
 80089c0:	f04f 0800 	mov.w	r8, #0
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7fe fdc8 	bl	800755c <_Bfree>
 80089cc:	2e00      	cmp	r6, #0
 80089ce:	f43f aea4 	beq.w	800871a <_dtoa_r+0x6c2>
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	d005      	beq.n	80089e4 <_dtoa_r+0x98c>
 80089d8:	45b0      	cmp	r8, r6
 80089da:	d003      	beq.n	80089e4 <_dtoa_r+0x98c>
 80089dc:	4641      	mov	r1, r8
 80089de:	4628      	mov	r0, r5
 80089e0:	f7fe fdbc 	bl	800755c <_Bfree>
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7fe fdb8 	bl	800755c <_Bfree>
 80089ec:	e695      	b.n	800871a <_dtoa_r+0x6c2>
 80089ee:	2400      	movs	r4, #0
 80089f0:	4626      	mov	r6, r4
 80089f2:	e7e1      	b.n	80089b8 <_dtoa_r+0x960>
 80089f4:	46c1      	mov	r9, r8
 80089f6:	4626      	mov	r6, r4
 80089f8:	e594      	b.n	8008524 <_dtoa_r+0x4cc>
 80089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80fc 	beq.w	8008bfe <_dtoa_r+0xba6>
 8008a06:	2f00      	cmp	r7, #0
 8008a08:	dd05      	ble.n	8008a16 <_dtoa_r+0x9be>
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	463a      	mov	r2, r7
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7fe ffbc 	bl	800798c <__lshift>
 8008a14:	4606      	mov	r6, r0
 8008a16:	f1b8 0f00 	cmp.w	r8, #0
 8008a1a:	d05c      	beq.n	8008ad6 <_dtoa_r+0xa7e>
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	6871      	ldr	r1, [r6, #4]
 8008a20:	f7fe fd5c 	bl	80074dc <_Balloc>
 8008a24:	4607      	mov	r7, r0
 8008a26:	b928      	cbnz	r0, 8008a34 <_dtoa_r+0x9dc>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a2e:	4b7e      	ldr	r3, [pc, #504]	; (8008c28 <_dtoa_r+0xbd0>)
 8008a30:	f7ff bb26 	b.w	8008080 <_dtoa_r+0x28>
 8008a34:	6932      	ldr	r2, [r6, #16]
 8008a36:	f106 010c 	add.w	r1, r6, #12
 8008a3a:	3202      	adds	r2, #2
 8008a3c:	0092      	lsls	r2, r2, #2
 8008a3e:	300c      	adds	r0, #12
 8008a40:	f7fe fd32 	bl	80074a8 <memcpy>
 8008a44:	2201      	movs	r2, #1
 8008a46:	4639      	mov	r1, r7
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f7fe ff9f 	bl	800798c <__lshift>
 8008a4e:	46b0      	mov	r8, r6
 8008a50:	4606      	mov	r6, r0
 8008a52:	9b08      	ldr	r3, [sp, #32]
 8008a54:	3301      	adds	r3, #1
 8008a56:	9302      	str	r3, [sp, #8]
 8008a58:	9b08      	ldr	r3, [sp, #32]
 8008a5a:	445b      	add	r3, fp
 8008a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	9309      	str	r3, [sp, #36]	; 0x24
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a70:	f7ff fa62 	bl	8007f38 <quorem>
 8008a74:	4603      	mov	r3, r0
 8008a76:	4641      	mov	r1, r8
 8008a78:	3330      	adds	r3, #48	; 0x30
 8008a7a:	9004      	str	r0, [sp, #16]
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a80:	f7fe fff0 	bl	8007a64 <__mcmp>
 8008a84:	4632      	mov	r2, r6
 8008a86:	9006      	str	r0, [sp, #24]
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff f806 	bl	8007a9c <__mdiff>
 8008a90:	68c2      	ldr	r2, [r0, #12]
 8008a92:	4607      	mov	r7, r0
 8008a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a96:	bb02      	cbnz	r2, 8008ada <_dtoa_r+0xa82>
 8008a98:	4601      	mov	r1, r0
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	f7fe ffe2 	bl	8007a64 <__mcmp>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008aac:	f7fe fd56 	bl	800755c <_Bfree>
 8008ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ab4:	9f02      	ldr	r7, [sp, #8]
 8008ab6:	ea43 0102 	orr.w	r1, r3, r2
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	430b      	orrs	r3, r1
 8008abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ac0:	d10d      	bne.n	8008ade <_dtoa_r+0xa86>
 8008ac2:	2b39      	cmp	r3, #57	; 0x39
 8008ac4:	d027      	beq.n	8008b16 <_dtoa_r+0xabe>
 8008ac6:	9a06      	ldr	r2, [sp, #24]
 8008ac8:	2a00      	cmp	r2, #0
 8008aca:	dd01      	ble.n	8008ad0 <_dtoa_r+0xa78>
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	3331      	adds	r3, #49	; 0x31
 8008ad0:	f88b 3000 	strb.w	r3, [fp]
 8008ad4:	e776      	b.n	80089c4 <_dtoa_r+0x96c>
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	e7b9      	b.n	8008a4e <_dtoa_r+0x9f6>
 8008ada:	2201      	movs	r2, #1
 8008adc:	e7e2      	b.n	8008aa4 <_dtoa_r+0xa4c>
 8008ade:	9906      	ldr	r1, [sp, #24]
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	db04      	blt.n	8008aee <_dtoa_r+0xa96>
 8008ae4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008ae6:	4301      	orrs	r1, r0
 8008ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aea:	4301      	orrs	r1, r0
 8008aec:	d120      	bne.n	8008b30 <_dtoa_r+0xad8>
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	ddee      	ble.n	8008ad0 <_dtoa_r+0xa78>
 8008af2:	4651      	mov	r1, sl
 8008af4:	2201      	movs	r2, #1
 8008af6:	4628      	mov	r0, r5
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	f7fe ff47 	bl	800798c <__lshift>
 8008afe:	4621      	mov	r1, r4
 8008b00:	4682      	mov	sl, r0
 8008b02:	f7fe ffaf 	bl	8007a64 <__mcmp>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	dc02      	bgt.n	8008b12 <_dtoa_r+0xaba>
 8008b0c:	d1e0      	bne.n	8008ad0 <_dtoa_r+0xa78>
 8008b0e:	07da      	lsls	r2, r3, #31
 8008b10:	d5de      	bpl.n	8008ad0 <_dtoa_r+0xa78>
 8008b12:	2b39      	cmp	r3, #57	; 0x39
 8008b14:	d1da      	bne.n	8008acc <_dtoa_r+0xa74>
 8008b16:	2339      	movs	r3, #57	; 0x39
 8008b18:	f88b 3000 	strb.w	r3, [fp]
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	461f      	mov	r7, r3
 8008b20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	2a39      	cmp	r2, #57	; 0x39
 8008b28:	d050      	beq.n	8008bcc <_dtoa_r+0xb74>
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	e749      	b.n	80089c4 <_dtoa_r+0x96c>
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	dd03      	ble.n	8008b3c <_dtoa_r+0xae4>
 8008b34:	2b39      	cmp	r3, #57	; 0x39
 8008b36:	d0ee      	beq.n	8008b16 <_dtoa_r+0xabe>
 8008b38:	3301      	adds	r3, #1
 8008b3a:	e7c9      	b.n	8008ad0 <_dtoa_r+0xa78>
 8008b3c:	9a02      	ldr	r2, [sp, #8]
 8008b3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b44:	428a      	cmp	r2, r1
 8008b46:	d02a      	beq.n	8008b9e <_dtoa_r+0xb46>
 8008b48:	4651      	mov	r1, sl
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	220a      	movs	r2, #10
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f7fe fd26 	bl	80075a0 <__multadd>
 8008b54:	45b0      	cmp	r8, r6
 8008b56:	4682      	mov	sl, r0
 8008b58:	f04f 0300 	mov.w	r3, #0
 8008b5c:	f04f 020a 	mov.w	r2, #10
 8008b60:	4641      	mov	r1, r8
 8008b62:	4628      	mov	r0, r5
 8008b64:	d107      	bne.n	8008b76 <_dtoa_r+0xb1e>
 8008b66:	f7fe fd1b 	bl	80075a0 <__multadd>
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	3301      	adds	r3, #1
 8008b72:	9302      	str	r3, [sp, #8]
 8008b74:	e777      	b.n	8008a66 <_dtoa_r+0xa0e>
 8008b76:	f7fe fd13 	bl	80075a0 <__multadd>
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4680      	mov	r8, r0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	220a      	movs	r2, #10
 8008b82:	4628      	mov	r0, r5
 8008b84:	f7fe fd0c 	bl	80075a0 <__multadd>
 8008b88:	4606      	mov	r6, r0
 8008b8a:	e7f0      	b.n	8008b6e <_dtoa_r+0xb16>
 8008b8c:	f1bb 0f00 	cmp.w	fp, #0
 8008b90:	bfcc      	ite	gt
 8008b92:	465f      	movgt	r7, fp
 8008b94:	2701      	movle	r7, #1
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	9a08      	ldr	r2, [sp, #32]
 8008b9c:	4417      	add	r7, r2
 8008b9e:	4651      	mov	r1, sl
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	9302      	str	r3, [sp, #8]
 8008ba6:	f7fe fef1 	bl	800798c <__lshift>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4682      	mov	sl, r0
 8008bae:	f7fe ff59 	bl	8007a64 <__mcmp>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	dcb2      	bgt.n	8008b1c <_dtoa_r+0xac4>
 8008bb6:	d102      	bne.n	8008bbe <_dtoa_r+0xb66>
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	07db      	lsls	r3, r3, #31
 8008bbc:	d4ae      	bmi.n	8008b1c <_dtoa_r+0xac4>
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	461f      	mov	r7, r3
 8008bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bc6:	2a30      	cmp	r2, #48	; 0x30
 8008bc8:	d0fa      	beq.n	8008bc0 <_dtoa_r+0xb68>
 8008bca:	e6fb      	b.n	80089c4 <_dtoa_r+0x96c>
 8008bcc:	9a08      	ldr	r2, [sp, #32]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d1a5      	bne.n	8008b1e <_dtoa_r+0xac6>
 8008bd2:	2331      	movs	r3, #49	; 0x31
 8008bd4:	f109 0901 	add.w	r9, r9, #1
 8008bd8:	7013      	strb	r3, [r2, #0]
 8008bda:	e6f3      	b.n	80089c4 <_dtoa_r+0x96c>
 8008bdc:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <_dtoa_r+0xbd4>)
 8008bde:	f7ff baa7 	b.w	8008130 <_dtoa_r+0xd8>
 8008be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f47f aa80 	bne.w	80080ea <_dtoa_r+0x92>
 8008bea:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <_dtoa_r+0xbd8>)
 8008bec:	f7ff baa0 	b.w	8008130 <_dtoa_r+0xd8>
 8008bf0:	f1bb 0f00 	cmp.w	fp, #0
 8008bf4:	dc03      	bgt.n	8008bfe <_dtoa_r+0xba6>
 8008bf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	f73f aecc 	bgt.w	8008996 <_dtoa_r+0x93e>
 8008bfe:	9f08      	ldr	r7, [sp, #32]
 8008c00:	4621      	mov	r1, r4
 8008c02:	4650      	mov	r0, sl
 8008c04:	f7ff f998 	bl	8007f38 <quorem>
 8008c08:	9a08      	ldr	r2, [sp, #32]
 8008c0a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c0e:	f807 3b01 	strb.w	r3, [r7], #1
 8008c12:	1aba      	subs	r2, r7, r2
 8008c14:	4593      	cmp	fp, r2
 8008c16:	ddb9      	ble.n	8008b8c <_dtoa_r+0xb34>
 8008c18:	4651      	mov	r1, sl
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	220a      	movs	r2, #10
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f7fe fcbe 	bl	80075a0 <__multadd>
 8008c24:	4682      	mov	sl, r0
 8008c26:	e7eb      	b.n	8008c00 <_dtoa_r+0xba8>
 8008c28:	08009ae8 	.word	0x08009ae8
 8008c2c:	08009e36 	.word	0x08009e36
 8008c30:	08009e29 	.word	0x08009e29

08008c34 <fiprintf>:
 8008c34:	b40e      	push	{r1, r2, r3}
 8008c36:	b503      	push	{r0, r1, lr}
 8008c38:	4601      	mov	r1, r0
 8008c3a:	ab03      	add	r3, sp, #12
 8008c3c:	4805      	ldr	r0, [pc, #20]	; (8008c54 <fiprintf+0x20>)
 8008c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c42:	6800      	ldr	r0, [r0, #0]
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f000 f831 	bl	8008cac <_vfiprintf_r>
 8008c4a:	b002      	add	sp, #8
 8008c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c50:	b003      	add	sp, #12
 8008c52:	4770      	bx	lr
 8008c54:	20000064 	.word	0x20000064

08008c58 <__retarget_lock_init_recursive>:
 8008c58:	4770      	bx	lr

08008c5a <__retarget_lock_acquire_recursive>:
 8008c5a:	4770      	bx	lr

08008c5c <__retarget_lock_release_recursive>:
 8008c5c:	4770      	bx	lr

08008c5e <__sfputc_r>:
 8008c5e:	6893      	ldr	r3, [r2, #8]
 8008c60:	b410      	push	{r4}
 8008c62:	3b01      	subs	r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	6093      	str	r3, [r2, #8]
 8008c68:	da07      	bge.n	8008c7a <__sfputc_r+0x1c>
 8008c6a:	6994      	ldr	r4, [r2, #24]
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	db01      	blt.n	8008c74 <__sfputc_r+0x16>
 8008c70:	290a      	cmp	r1, #10
 8008c72:	d102      	bne.n	8008c7a <__sfputc_r+0x1c>
 8008c74:	bc10      	pop	{r4}
 8008c76:	f000 badf 	b.w	8009238 <__swbuf_r>
 8008c7a:	6813      	ldr	r3, [r2, #0]
 8008c7c:	1c58      	adds	r0, r3, #1
 8008c7e:	6010      	str	r0, [r2, #0]
 8008c80:	7019      	strb	r1, [r3, #0]
 8008c82:	4608      	mov	r0, r1
 8008c84:	bc10      	pop	{r4}
 8008c86:	4770      	bx	lr

08008c88 <__sfputs_r>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460f      	mov	r7, r1
 8008c8e:	4614      	mov	r4, r2
 8008c90:	18d5      	adds	r5, r2, r3
 8008c92:	42ac      	cmp	r4, r5
 8008c94:	d101      	bne.n	8008c9a <__sfputs_r+0x12>
 8008c96:	2000      	movs	r0, #0
 8008c98:	e007      	b.n	8008caa <__sfputs_r+0x22>
 8008c9a:	463a      	mov	r2, r7
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca2:	f7ff ffdc 	bl	8008c5e <__sfputc_r>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d1f3      	bne.n	8008c92 <__sfputs_r+0xa>
 8008caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cac <_vfiprintf_r>:
 8008cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	4698      	mov	r8, r3
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	b09d      	sub	sp, #116	; 0x74
 8008cba:	b118      	cbz	r0, 8008cc4 <_vfiprintf_r+0x18>
 8008cbc:	6983      	ldr	r3, [r0, #24]
 8008cbe:	b90b      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x18>
 8008cc0:	f000 fc9c 	bl	80095fc <__sinit>
 8008cc4:	4b89      	ldr	r3, [pc, #548]	; (8008eec <_vfiprintf_r+0x240>)
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	d11b      	bne.n	8008d02 <_vfiprintf_r+0x56>
 8008cca:	6875      	ldr	r5, [r6, #4]
 8008ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cce:	07d9      	lsls	r1, r3, #31
 8008cd0:	d405      	bmi.n	8008cde <_vfiprintf_r+0x32>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	059a      	lsls	r2, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_vfiprintf_r+0x32>
 8008cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cda:	f7ff ffbe 	bl	8008c5a <__retarget_lock_acquire_recursive>
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	071b      	lsls	r3, r3, #28
 8008ce2:	d501      	bpl.n	8008ce8 <_vfiprintf_r+0x3c>
 8008ce4:	692b      	ldr	r3, [r5, #16]
 8008ce6:	b9eb      	cbnz	r3, 8008d24 <_vfiprintf_r+0x78>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4630      	mov	r0, r6
 8008cec:	f000 faf6 	bl	80092dc <__swsetup_r>
 8008cf0:	b1c0      	cbz	r0, 8008d24 <_vfiprintf_r+0x78>
 8008cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf4:	07dc      	lsls	r4, r3, #31
 8008cf6:	d50e      	bpl.n	8008d16 <_vfiprintf_r+0x6a>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	b01d      	add	sp, #116	; 0x74
 8008cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d02:	4b7b      	ldr	r3, [pc, #492]	; (8008ef0 <_vfiprintf_r+0x244>)
 8008d04:	429d      	cmp	r5, r3
 8008d06:	d101      	bne.n	8008d0c <_vfiprintf_r+0x60>
 8008d08:	68b5      	ldr	r5, [r6, #8]
 8008d0a:	e7df      	b.n	8008ccc <_vfiprintf_r+0x20>
 8008d0c:	4b79      	ldr	r3, [pc, #484]	; (8008ef4 <_vfiprintf_r+0x248>)
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	bf08      	it	eq
 8008d12:	68f5      	ldreq	r5, [r6, #12]
 8008d14:	e7da      	b.n	8008ccc <_vfiprintf_r+0x20>
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	0598      	lsls	r0, r3, #22
 8008d1a:	d4ed      	bmi.n	8008cf8 <_vfiprintf_r+0x4c>
 8008d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d1e:	f7ff ff9d 	bl	8008c5c <__retarget_lock_release_recursive>
 8008d22:	e7e9      	b.n	8008cf8 <_vfiprintf_r+0x4c>
 8008d24:	2300      	movs	r3, #0
 8008d26:	9309      	str	r3, [sp, #36]	; 0x24
 8008d28:	2320      	movs	r3, #32
 8008d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d2e:	2330      	movs	r3, #48	; 0x30
 8008d30:	f04f 0901 	mov.w	r9, #1
 8008d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008ef8 <_vfiprintf_r+0x24c>
 8008d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d40:	4623      	mov	r3, r4
 8008d42:	469a      	mov	sl, r3
 8008d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d48:	b10a      	cbz	r2, 8008d4e <_vfiprintf_r+0xa2>
 8008d4a:	2a25      	cmp	r2, #37	; 0x25
 8008d4c:	d1f9      	bne.n	8008d42 <_vfiprintf_r+0x96>
 8008d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d52:	d00b      	beq.n	8008d6c <_vfiprintf_r+0xc0>
 8008d54:	465b      	mov	r3, fp
 8008d56:	4622      	mov	r2, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff ff94 	bl	8008c88 <__sfputs_r>
 8008d60:	3001      	adds	r0, #1
 8008d62:	f000 80aa 	beq.w	8008eba <_vfiprintf_r+0x20e>
 8008d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d68:	445a      	add	r2, fp
 8008d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 80a2 	beq.w	8008eba <_vfiprintf_r+0x20e>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d80:	f10a 0a01 	add.w	sl, sl, #1
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d8e:	4654      	mov	r4, sl
 8008d90:	2205      	movs	r2, #5
 8008d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d96:	4858      	ldr	r0, [pc, #352]	; (8008ef8 <_vfiprintf_r+0x24c>)
 8008d98:	f000 fd32 	bl	8009800 <memchr>
 8008d9c:	9a04      	ldr	r2, [sp, #16]
 8008d9e:	b9d8      	cbnz	r0, 8008dd8 <_vfiprintf_r+0x12c>
 8008da0:	06d1      	lsls	r1, r2, #27
 8008da2:	bf44      	itt	mi
 8008da4:	2320      	movmi	r3, #32
 8008da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008daa:	0713      	lsls	r3, r2, #28
 8008dac:	bf44      	itt	mi
 8008dae:	232b      	movmi	r3, #43	; 0x2b
 8008db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db4:	f89a 3000 	ldrb.w	r3, [sl]
 8008db8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dba:	d015      	beq.n	8008de8 <_vfiprintf_r+0x13c>
 8008dbc:	4654      	mov	r4, sl
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f04f 0c0a 	mov.w	ip, #10
 8008dc4:	9a07      	ldr	r2, [sp, #28]
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dcc:	3b30      	subs	r3, #48	; 0x30
 8008dce:	2b09      	cmp	r3, #9
 8008dd0:	d94e      	bls.n	8008e70 <_vfiprintf_r+0x1c4>
 8008dd2:	b1b0      	cbz	r0, 8008e02 <_vfiprintf_r+0x156>
 8008dd4:	9207      	str	r2, [sp, #28]
 8008dd6:	e014      	b.n	8008e02 <_vfiprintf_r+0x156>
 8008dd8:	eba0 0308 	sub.w	r3, r0, r8
 8008ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8008de0:	4313      	orrs	r3, r2
 8008de2:	46a2      	mov	sl, r4
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	e7d2      	b.n	8008d8e <_vfiprintf_r+0xe2>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	1d19      	adds	r1, r3, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	9103      	str	r1, [sp, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bfbb      	ittet	lt
 8008df4:	425b      	neglt	r3, r3
 8008df6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfa:	9307      	strge	r3, [sp, #28]
 8008dfc:	9307      	strlt	r3, [sp, #28]
 8008dfe:	bfb8      	it	lt
 8008e00:	9204      	strlt	r2, [sp, #16]
 8008e02:	7823      	ldrb	r3, [r4, #0]
 8008e04:	2b2e      	cmp	r3, #46	; 0x2e
 8008e06:	d10c      	bne.n	8008e22 <_vfiprintf_r+0x176>
 8008e08:	7863      	ldrb	r3, [r4, #1]
 8008e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0c:	d135      	bne.n	8008e7a <_vfiprintf_r+0x1ce>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	3402      	adds	r4, #2
 8008e12:	1d1a      	adds	r2, r3, #4
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	9203      	str	r2, [sp, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bfb8      	it	lt
 8008e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f08 <_vfiprintf_r+0x25c>
 8008e26:	2203      	movs	r2, #3
 8008e28:	4650      	mov	r0, sl
 8008e2a:	7821      	ldrb	r1, [r4, #0]
 8008e2c:	f000 fce8 	bl	8009800 <memchr>
 8008e30:	b140      	cbz	r0, 8008e44 <_vfiprintf_r+0x198>
 8008e32:	2340      	movs	r3, #64	; 0x40
 8008e34:	eba0 000a 	sub.w	r0, r0, sl
 8008e38:	fa03 f000 	lsl.w	r0, r3, r0
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	3401      	adds	r4, #1
 8008e40:	4303      	orrs	r3, r0
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e48:	2206      	movs	r2, #6
 8008e4a:	482c      	ldr	r0, [pc, #176]	; (8008efc <_vfiprintf_r+0x250>)
 8008e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e50:	f000 fcd6 	bl	8009800 <memchr>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d03f      	beq.n	8008ed8 <_vfiprintf_r+0x22c>
 8008e58:	4b29      	ldr	r3, [pc, #164]	; (8008f00 <_vfiprintf_r+0x254>)
 8008e5a:	bb1b      	cbnz	r3, 8008ea4 <_vfiprintf_r+0x1f8>
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	3307      	adds	r3, #7
 8008e60:	f023 0307 	bic.w	r3, r3, #7
 8008e64:	3308      	adds	r3, #8
 8008e66:	9303      	str	r3, [sp, #12]
 8008e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6a:	443b      	add	r3, r7
 8008e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6e:	e767      	b.n	8008d40 <_vfiprintf_r+0x94>
 8008e70:	460c      	mov	r4, r1
 8008e72:	2001      	movs	r0, #1
 8008e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e78:	e7a5      	b.n	8008dc6 <_vfiprintf_r+0x11a>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f04f 0c0a 	mov.w	ip, #10
 8008e80:	4619      	mov	r1, r3
 8008e82:	3401      	adds	r4, #1
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	4620      	mov	r0, r4
 8008e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8c:	3a30      	subs	r2, #48	; 0x30
 8008e8e:	2a09      	cmp	r2, #9
 8008e90:	d903      	bls.n	8008e9a <_vfiprintf_r+0x1ee>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0c5      	beq.n	8008e22 <_vfiprintf_r+0x176>
 8008e96:	9105      	str	r1, [sp, #20]
 8008e98:	e7c3      	b.n	8008e22 <_vfiprintf_r+0x176>
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea2:	e7f0      	b.n	8008e86 <_vfiprintf_r+0x1da>
 8008ea4:	ab03      	add	r3, sp, #12
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4630      	mov	r0, r6
 8008eac:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <_vfiprintf_r+0x258>)
 8008eae:	a904      	add	r1, sp, #16
 8008eb0:	f3af 8000 	nop.w
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	1c78      	adds	r0, r7, #1
 8008eb8:	d1d6      	bne.n	8008e68 <_vfiprintf_r+0x1bc>
 8008eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ebc:	07d9      	lsls	r1, r3, #31
 8008ebe:	d405      	bmi.n	8008ecc <_vfiprintf_r+0x220>
 8008ec0:	89ab      	ldrh	r3, [r5, #12]
 8008ec2:	059a      	lsls	r2, r3, #22
 8008ec4:	d402      	bmi.n	8008ecc <_vfiprintf_r+0x220>
 8008ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec8:	f7ff fec8 	bl	8008c5c <__retarget_lock_release_recursive>
 8008ecc:	89ab      	ldrh	r3, [r5, #12]
 8008ece:	065b      	lsls	r3, r3, #25
 8008ed0:	f53f af12 	bmi.w	8008cf8 <_vfiprintf_r+0x4c>
 8008ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed6:	e711      	b.n	8008cfc <_vfiprintf_r+0x50>
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	462a      	mov	r2, r5
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4b08      	ldr	r3, [pc, #32]	; (8008f04 <_vfiprintf_r+0x258>)
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	f000 f882 	bl	8008fec <_printf_i>
 8008ee8:	e7e4      	b.n	8008eb4 <_vfiprintf_r+0x208>
 8008eea:	bf00      	nop
 8008eec:	08009eec 	.word	0x08009eec
 8008ef0:	08009f0c 	.word	0x08009f0c
 8008ef4:	08009ecc 	.word	0x08009ecc
 8008ef8:	08009e97 	.word	0x08009e97
 8008efc:	08009ea1 	.word	0x08009ea1
 8008f00:	00000000 	.word	0x00000000
 8008f04:	08008c89 	.word	0x08008c89
 8008f08:	08009e9d 	.word	0x08009e9d

08008f0c <_printf_common>:
 8008f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	4616      	mov	r6, r2
 8008f12:	4699      	mov	r9, r3
 8008f14:	688a      	ldr	r2, [r1, #8]
 8008f16:	690b      	ldr	r3, [r1, #16]
 8008f18:	4607      	mov	r7, r0
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	bfb8      	it	lt
 8008f1e:	4613      	movlt	r3, r2
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f26:	460c      	mov	r4, r1
 8008f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f2c:	b10a      	cbz	r2, 8008f32 <_printf_common+0x26>
 8008f2e:	3301      	adds	r3, #1
 8008f30:	6033      	str	r3, [r6, #0]
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	0699      	lsls	r1, r3, #26
 8008f36:	bf42      	ittt	mi
 8008f38:	6833      	ldrmi	r3, [r6, #0]
 8008f3a:	3302      	addmi	r3, #2
 8008f3c:	6033      	strmi	r3, [r6, #0]
 8008f3e:	6825      	ldr	r5, [r4, #0]
 8008f40:	f015 0506 	ands.w	r5, r5, #6
 8008f44:	d106      	bne.n	8008f54 <_printf_common+0x48>
 8008f46:	f104 0a19 	add.w	sl, r4, #25
 8008f4a:	68e3      	ldr	r3, [r4, #12]
 8008f4c:	6832      	ldr	r2, [r6, #0]
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	42ab      	cmp	r3, r5
 8008f52:	dc28      	bgt.n	8008fa6 <_printf_common+0x9a>
 8008f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f58:	1e13      	subs	r3, r2, #0
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	bf18      	it	ne
 8008f5e:	2301      	movne	r3, #1
 8008f60:	0692      	lsls	r2, r2, #26
 8008f62:	d42d      	bmi.n	8008fc0 <_printf_common+0xb4>
 8008f64:	4649      	mov	r1, r9
 8008f66:	4638      	mov	r0, r7
 8008f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f6c:	47c0      	blx	r8
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d020      	beq.n	8008fb4 <_printf_common+0xa8>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	68e5      	ldr	r5, [r4, #12]
 8008f76:	f003 0306 	and.w	r3, r3, #6
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	bf18      	it	ne
 8008f7e:	2500      	movne	r5, #0
 8008f80:	6832      	ldr	r2, [r6, #0]
 8008f82:	f04f 0600 	mov.w	r6, #0
 8008f86:	68a3      	ldr	r3, [r4, #8]
 8008f88:	bf08      	it	eq
 8008f8a:	1aad      	subeq	r5, r5, r2
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	bf08      	it	eq
 8008f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f94:	4293      	cmp	r3, r2
 8008f96:	bfc4      	itt	gt
 8008f98:	1a9b      	subgt	r3, r3, r2
 8008f9a:	18ed      	addgt	r5, r5, r3
 8008f9c:	341a      	adds	r4, #26
 8008f9e:	42b5      	cmp	r5, r6
 8008fa0:	d11a      	bne.n	8008fd8 <_printf_common+0xcc>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e008      	b.n	8008fb8 <_printf_common+0xac>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4652      	mov	r2, sl
 8008faa:	4649      	mov	r1, r9
 8008fac:	4638      	mov	r0, r7
 8008fae:	47c0      	blx	r8
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d103      	bne.n	8008fbc <_printf_common+0xb0>
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	e7c4      	b.n	8008f4a <_printf_common+0x3e>
 8008fc0:	2030      	movs	r0, #48	; 0x30
 8008fc2:	18e1      	adds	r1, r4, r3
 8008fc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fce:	4422      	add	r2, r4
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fd6:	e7c5      	b.n	8008f64 <_printf_common+0x58>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	4622      	mov	r2, r4
 8008fdc:	4649      	mov	r1, r9
 8008fde:	4638      	mov	r0, r7
 8008fe0:	47c0      	blx	r8
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d0e6      	beq.n	8008fb4 <_printf_common+0xa8>
 8008fe6:	3601      	adds	r6, #1
 8008fe8:	e7d9      	b.n	8008f9e <_printf_common+0x92>
	...

08008fec <_printf_i>:
 8008fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	7e27      	ldrb	r7, [r4, #24]
 8008ff4:	4691      	mov	r9, r2
 8008ff6:	2f78      	cmp	r7, #120	; 0x78
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	469a      	mov	sl, r3
 8008ffc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009002:	d807      	bhi.n	8009014 <_printf_i+0x28>
 8009004:	2f62      	cmp	r7, #98	; 0x62
 8009006:	d80a      	bhi.n	800901e <_printf_i+0x32>
 8009008:	2f00      	cmp	r7, #0
 800900a:	f000 80d9 	beq.w	80091c0 <_printf_i+0x1d4>
 800900e:	2f58      	cmp	r7, #88	; 0x58
 8009010:	f000 80a4 	beq.w	800915c <_printf_i+0x170>
 8009014:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800901c:	e03a      	b.n	8009094 <_printf_i+0xa8>
 800901e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009022:	2b15      	cmp	r3, #21
 8009024:	d8f6      	bhi.n	8009014 <_printf_i+0x28>
 8009026:	a001      	add	r0, pc, #4	; (adr r0, 800902c <_printf_i+0x40>)
 8009028:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800902c:	08009085 	.word	0x08009085
 8009030:	08009099 	.word	0x08009099
 8009034:	08009015 	.word	0x08009015
 8009038:	08009015 	.word	0x08009015
 800903c:	08009015 	.word	0x08009015
 8009040:	08009015 	.word	0x08009015
 8009044:	08009099 	.word	0x08009099
 8009048:	08009015 	.word	0x08009015
 800904c:	08009015 	.word	0x08009015
 8009050:	08009015 	.word	0x08009015
 8009054:	08009015 	.word	0x08009015
 8009058:	080091a7 	.word	0x080091a7
 800905c:	080090c9 	.word	0x080090c9
 8009060:	08009189 	.word	0x08009189
 8009064:	08009015 	.word	0x08009015
 8009068:	08009015 	.word	0x08009015
 800906c:	080091c9 	.word	0x080091c9
 8009070:	08009015 	.word	0x08009015
 8009074:	080090c9 	.word	0x080090c9
 8009078:	08009015 	.word	0x08009015
 800907c:	08009015 	.word	0x08009015
 8009080:	08009191 	.word	0x08009191
 8009084:	680b      	ldr	r3, [r1, #0]
 8009086:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800908a:	1d1a      	adds	r2, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	600a      	str	r2, [r1, #0]
 8009090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009094:	2301      	movs	r3, #1
 8009096:	e0a4      	b.n	80091e2 <_printf_i+0x1f6>
 8009098:	6825      	ldr	r5, [r4, #0]
 800909a:	6808      	ldr	r0, [r1, #0]
 800909c:	062e      	lsls	r6, r5, #24
 800909e:	f100 0304 	add.w	r3, r0, #4
 80090a2:	d50a      	bpl.n	80090ba <_printf_i+0xce>
 80090a4:	6805      	ldr	r5, [r0, #0]
 80090a6:	600b      	str	r3, [r1, #0]
 80090a8:	2d00      	cmp	r5, #0
 80090aa:	da03      	bge.n	80090b4 <_printf_i+0xc8>
 80090ac:	232d      	movs	r3, #45	; 0x2d
 80090ae:	426d      	negs	r5, r5
 80090b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b4:	230a      	movs	r3, #10
 80090b6:	485e      	ldr	r0, [pc, #376]	; (8009230 <_printf_i+0x244>)
 80090b8:	e019      	b.n	80090ee <_printf_i+0x102>
 80090ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090be:	6805      	ldr	r5, [r0, #0]
 80090c0:	600b      	str	r3, [r1, #0]
 80090c2:	bf18      	it	ne
 80090c4:	b22d      	sxthne	r5, r5
 80090c6:	e7ef      	b.n	80090a8 <_printf_i+0xbc>
 80090c8:	680b      	ldr	r3, [r1, #0]
 80090ca:	6825      	ldr	r5, [r4, #0]
 80090cc:	1d18      	adds	r0, r3, #4
 80090ce:	6008      	str	r0, [r1, #0]
 80090d0:	0628      	lsls	r0, r5, #24
 80090d2:	d501      	bpl.n	80090d8 <_printf_i+0xec>
 80090d4:	681d      	ldr	r5, [r3, #0]
 80090d6:	e002      	b.n	80090de <_printf_i+0xf2>
 80090d8:	0669      	lsls	r1, r5, #25
 80090da:	d5fb      	bpl.n	80090d4 <_printf_i+0xe8>
 80090dc:	881d      	ldrh	r5, [r3, #0]
 80090de:	2f6f      	cmp	r7, #111	; 0x6f
 80090e0:	bf0c      	ite	eq
 80090e2:	2308      	moveq	r3, #8
 80090e4:	230a      	movne	r3, #10
 80090e6:	4852      	ldr	r0, [pc, #328]	; (8009230 <_printf_i+0x244>)
 80090e8:	2100      	movs	r1, #0
 80090ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090ee:	6866      	ldr	r6, [r4, #4]
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	bfa8      	it	ge
 80090f4:	6821      	ldrge	r1, [r4, #0]
 80090f6:	60a6      	str	r6, [r4, #8]
 80090f8:	bfa4      	itt	ge
 80090fa:	f021 0104 	bicge.w	r1, r1, #4
 80090fe:	6021      	strge	r1, [r4, #0]
 8009100:	b90d      	cbnz	r5, 8009106 <_printf_i+0x11a>
 8009102:	2e00      	cmp	r6, #0
 8009104:	d04d      	beq.n	80091a2 <_printf_i+0x1b6>
 8009106:	4616      	mov	r6, r2
 8009108:	fbb5 f1f3 	udiv	r1, r5, r3
 800910c:	fb03 5711 	mls	r7, r3, r1, r5
 8009110:	5dc7      	ldrb	r7, [r0, r7]
 8009112:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009116:	462f      	mov	r7, r5
 8009118:	42bb      	cmp	r3, r7
 800911a:	460d      	mov	r5, r1
 800911c:	d9f4      	bls.n	8009108 <_printf_i+0x11c>
 800911e:	2b08      	cmp	r3, #8
 8009120:	d10b      	bne.n	800913a <_printf_i+0x14e>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	07df      	lsls	r7, r3, #31
 8009126:	d508      	bpl.n	800913a <_printf_i+0x14e>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	6861      	ldr	r1, [r4, #4]
 800912c:	4299      	cmp	r1, r3
 800912e:	bfde      	ittt	le
 8009130:	2330      	movle	r3, #48	; 0x30
 8009132:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009136:	f106 36ff 	addle.w	r6, r6, #4294967295
 800913a:	1b92      	subs	r2, r2, r6
 800913c:	6122      	str	r2, [r4, #16]
 800913e:	464b      	mov	r3, r9
 8009140:	4621      	mov	r1, r4
 8009142:	4640      	mov	r0, r8
 8009144:	f8cd a000 	str.w	sl, [sp]
 8009148:	aa03      	add	r2, sp, #12
 800914a:	f7ff fedf 	bl	8008f0c <_printf_common>
 800914e:	3001      	adds	r0, #1
 8009150:	d14c      	bne.n	80091ec <_printf_i+0x200>
 8009152:	f04f 30ff 	mov.w	r0, #4294967295
 8009156:	b004      	add	sp, #16
 8009158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915c:	4834      	ldr	r0, [pc, #208]	; (8009230 <_printf_i+0x244>)
 800915e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009162:	680e      	ldr	r6, [r1, #0]
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	f856 5b04 	ldr.w	r5, [r6], #4
 800916a:	061f      	lsls	r7, r3, #24
 800916c:	600e      	str	r6, [r1, #0]
 800916e:	d514      	bpl.n	800919a <_printf_i+0x1ae>
 8009170:	07d9      	lsls	r1, r3, #31
 8009172:	bf44      	itt	mi
 8009174:	f043 0320 	orrmi.w	r3, r3, #32
 8009178:	6023      	strmi	r3, [r4, #0]
 800917a:	b91d      	cbnz	r5, 8009184 <_printf_i+0x198>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	f023 0320 	bic.w	r3, r3, #32
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	2310      	movs	r3, #16
 8009186:	e7af      	b.n	80090e8 <_printf_i+0xfc>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	f043 0320 	orr.w	r3, r3, #32
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	2378      	movs	r3, #120	; 0x78
 8009192:	4828      	ldr	r0, [pc, #160]	; (8009234 <_printf_i+0x248>)
 8009194:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009198:	e7e3      	b.n	8009162 <_printf_i+0x176>
 800919a:	065e      	lsls	r6, r3, #25
 800919c:	bf48      	it	mi
 800919e:	b2ad      	uxthmi	r5, r5
 80091a0:	e7e6      	b.n	8009170 <_printf_i+0x184>
 80091a2:	4616      	mov	r6, r2
 80091a4:	e7bb      	b.n	800911e <_printf_i+0x132>
 80091a6:	680b      	ldr	r3, [r1, #0]
 80091a8:	6826      	ldr	r6, [r4, #0]
 80091aa:	1d1d      	adds	r5, r3, #4
 80091ac:	6960      	ldr	r0, [r4, #20]
 80091ae:	600d      	str	r5, [r1, #0]
 80091b0:	0635      	lsls	r5, r6, #24
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	d501      	bpl.n	80091ba <_printf_i+0x1ce>
 80091b6:	6018      	str	r0, [r3, #0]
 80091b8:	e002      	b.n	80091c0 <_printf_i+0x1d4>
 80091ba:	0671      	lsls	r1, r6, #25
 80091bc:	d5fb      	bpl.n	80091b6 <_printf_i+0x1ca>
 80091be:	8018      	strh	r0, [r3, #0]
 80091c0:	2300      	movs	r3, #0
 80091c2:	4616      	mov	r6, r2
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	e7ba      	b.n	800913e <_printf_i+0x152>
 80091c8:	680b      	ldr	r3, [r1, #0]
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	600a      	str	r2, [r1, #0]
 80091ce:	681e      	ldr	r6, [r3, #0]
 80091d0:	2100      	movs	r1, #0
 80091d2:	4630      	mov	r0, r6
 80091d4:	6862      	ldr	r2, [r4, #4]
 80091d6:	f000 fb13 	bl	8009800 <memchr>
 80091da:	b108      	cbz	r0, 80091e0 <_printf_i+0x1f4>
 80091dc:	1b80      	subs	r0, r0, r6
 80091de:	6060      	str	r0, [r4, #4]
 80091e0:	6863      	ldr	r3, [r4, #4]
 80091e2:	6123      	str	r3, [r4, #16]
 80091e4:	2300      	movs	r3, #0
 80091e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ea:	e7a8      	b.n	800913e <_printf_i+0x152>
 80091ec:	4632      	mov	r2, r6
 80091ee:	4649      	mov	r1, r9
 80091f0:	4640      	mov	r0, r8
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	47d0      	blx	sl
 80091f6:	3001      	adds	r0, #1
 80091f8:	d0ab      	beq.n	8009152 <_printf_i+0x166>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	079b      	lsls	r3, r3, #30
 80091fe:	d413      	bmi.n	8009228 <_printf_i+0x23c>
 8009200:	68e0      	ldr	r0, [r4, #12]
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	4298      	cmp	r0, r3
 8009206:	bfb8      	it	lt
 8009208:	4618      	movlt	r0, r3
 800920a:	e7a4      	b.n	8009156 <_printf_i+0x16a>
 800920c:	2301      	movs	r3, #1
 800920e:	4632      	mov	r2, r6
 8009210:	4649      	mov	r1, r9
 8009212:	4640      	mov	r0, r8
 8009214:	47d0      	blx	sl
 8009216:	3001      	adds	r0, #1
 8009218:	d09b      	beq.n	8009152 <_printf_i+0x166>
 800921a:	3501      	adds	r5, #1
 800921c:	68e3      	ldr	r3, [r4, #12]
 800921e:	9903      	ldr	r1, [sp, #12]
 8009220:	1a5b      	subs	r3, r3, r1
 8009222:	42ab      	cmp	r3, r5
 8009224:	dcf2      	bgt.n	800920c <_printf_i+0x220>
 8009226:	e7eb      	b.n	8009200 <_printf_i+0x214>
 8009228:	2500      	movs	r5, #0
 800922a:	f104 0619 	add.w	r6, r4, #25
 800922e:	e7f5      	b.n	800921c <_printf_i+0x230>
 8009230:	08009ea8 	.word	0x08009ea8
 8009234:	08009eb9 	.word	0x08009eb9

08009238 <__swbuf_r>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	460e      	mov	r6, r1
 800923c:	4614      	mov	r4, r2
 800923e:	4605      	mov	r5, r0
 8009240:	b118      	cbz	r0, 800924a <__swbuf_r+0x12>
 8009242:	6983      	ldr	r3, [r0, #24]
 8009244:	b90b      	cbnz	r3, 800924a <__swbuf_r+0x12>
 8009246:	f000 f9d9 	bl	80095fc <__sinit>
 800924a:	4b21      	ldr	r3, [pc, #132]	; (80092d0 <__swbuf_r+0x98>)
 800924c:	429c      	cmp	r4, r3
 800924e:	d12b      	bne.n	80092a8 <__swbuf_r+0x70>
 8009250:	686c      	ldr	r4, [r5, #4]
 8009252:	69a3      	ldr	r3, [r4, #24]
 8009254:	60a3      	str	r3, [r4, #8]
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	071a      	lsls	r2, r3, #28
 800925a:	d52f      	bpl.n	80092bc <__swbuf_r+0x84>
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	b36b      	cbz	r3, 80092bc <__swbuf_r+0x84>
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	6820      	ldr	r0, [r4, #0]
 8009264:	b2f6      	uxtb	r6, r6
 8009266:	1ac0      	subs	r0, r0, r3
 8009268:	6963      	ldr	r3, [r4, #20]
 800926a:	4637      	mov	r7, r6
 800926c:	4283      	cmp	r3, r0
 800926e:	dc04      	bgt.n	800927a <__swbuf_r+0x42>
 8009270:	4621      	mov	r1, r4
 8009272:	4628      	mov	r0, r5
 8009274:	f000 f92e 	bl	80094d4 <_fflush_r>
 8009278:	bb30      	cbnz	r0, 80092c8 <__swbuf_r+0x90>
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	3001      	adds	r0, #1
 800927e:	3b01      	subs	r3, #1
 8009280:	60a3      	str	r3, [r4, #8]
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	701e      	strb	r6, [r3, #0]
 800928a:	6963      	ldr	r3, [r4, #20]
 800928c:	4283      	cmp	r3, r0
 800928e:	d004      	beq.n	800929a <__swbuf_r+0x62>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	07db      	lsls	r3, r3, #31
 8009294:	d506      	bpl.n	80092a4 <__swbuf_r+0x6c>
 8009296:	2e0a      	cmp	r6, #10
 8009298:	d104      	bne.n	80092a4 <__swbuf_r+0x6c>
 800929a:	4621      	mov	r1, r4
 800929c:	4628      	mov	r0, r5
 800929e:	f000 f919 	bl	80094d4 <_fflush_r>
 80092a2:	b988      	cbnz	r0, 80092c8 <__swbuf_r+0x90>
 80092a4:	4638      	mov	r0, r7
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a8:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <__swbuf_r+0x9c>)
 80092aa:	429c      	cmp	r4, r3
 80092ac:	d101      	bne.n	80092b2 <__swbuf_r+0x7a>
 80092ae:	68ac      	ldr	r4, [r5, #8]
 80092b0:	e7cf      	b.n	8009252 <__swbuf_r+0x1a>
 80092b2:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <__swbuf_r+0xa0>)
 80092b4:	429c      	cmp	r4, r3
 80092b6:	bf08      	it	eq
 80092b8:	68ec      	ldreq	r4, [r5, #12]
 80092ba:	e7ca      	b.n	8009252 <__swbuf_r+0x1a>
 80092bc:	4621      	mov	r1, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 f80c 	bl	80092dc <__swsetup_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d0cb      	beq.n	8009260 <__swbuf_r+0x28>
 80092c8:	f04f 37ff 	mov.w	r7, #4294967295
 80092cc:	e7ea      	b.n	80092a4 <__swbuf_r+0x6c>
 80092ce:	bf00      	nop
 80092d0:	08009eec 	.word	0x08009eec
 80092d4:	08009f0c 	.word	0x08009f0c
 80092d8:	08009ecc 	.word	0x08009ecc

080092dc <__swsetup_r>:
 80092dc:	4b32      	ldr	r3, [pc, #200]	; (80093a8 <__swsetup_r+0xcc>)
 80092de:	b570      	push	{r4, r5, r6, lr}
 80092e0:	681d      	ldr	r5, [r3, #0]
 80092e2:	4606      	mov	r6, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	b125      	cbz	r5, 80092f2 <__swsetup_r+0x16>
 80092e8:	69ab      	ldr	r3, [r5, #24]
 80092ea:	b913      	cbnz	r3, 80092f2 <__swsetup_r+0x16>
 80092ec:	4628      	mov	r0, r5
 80092ee:	f000 f985 	bl	80095fc <__sinit>
 80092f2:	4b2e      	ldr	r3, [pc, #184]	; (80093ac <__swsetup_r+0xd0>)
 80092f4:	429c      	cmp	r4, r3
 80092f6:	d10f      	bne.n	8009318 <__swsetup_r+0x3c>
 80092f8:	686c      	ldr	r4, [r5, #4]
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009300:	0719      	lsls	r1, r3, #28
 8009302:	d42c      	bmi.n	800935e <__swsetup_r+0x82>
 8009304:	06dd      	lsls	r5, r3, #27
 8009306:	d411      	bmi.n	800932c <__swsetup_r+0x50>
 8009308:	2309      	movs	r3, #9
 800930a:	6033      	str	r3, [r6, #0]
 800930c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	e03e      	b.n	8009396 <__swsetup_r+0xba>
 8009318:	4b25      	ldr	r3, [pc, #148]	; (80093b0 <__swsetup_r+0xd4>)
 800931a:	429c      	cmp	r4, r3
 800931c:	d101      	bne.n	8009322 <__swsetup_r+0x46>
 800931e:	68ac      	ldr	r4, [r5, #8]
 8009320:	e7eb      	b.n	80092fa <__swsetup_r+0x1e>
 8009322:	4b24      	ldr	r3, [pc, #144]	; (80093b4 <__swsetup_r+0xd8>)
 8009324:	429c      	cmp	r4, r3
 8009326:	bf08      	it	eq
 8009328:	68ec      	ldreq	r4, [r5, #12]
 800932a:	e7e6      	b.n	80092fa <__swsetup_r+0x1e>
 800932c:	0758      	lsls	r0, r3, #29
 800932e:	d512      	bpl.n	8009356 <__swsetup_r+0x7a>
 8009330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009332:	b141      	cbz	r1, 8009346 <__swsetup_r+0x6a>
 8009334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009338:	4299      	cmp	r1, r3
 800933a:	d002      	beq.n	8009342 <__swsetup_r+0x66>
 800933c:	4630      	mov	r0, r6
 800933e:	f7fc fd2b 	bl	8005d98 <_free_r>
 8009342:	2300      	movs	r3, #0
 8009344:	6363      	str	r3, [r4, #52]	; 0x34
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	2300      	movs	r3, #0
 8009350:	6063      	str	r3, [r4, #4]
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	89a3      	ldrh	r3, [r4, #12]
 8009358:	f043 0308 	orr.w	r3, r3, #8
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	6923      	ldr	r3, [r4, #16]
 8009360:	b94b      	cbnz	r3, 8009376 <__swsetup_r+0x9a>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800936c:	d003      	beq.n	8009376 <__swsetup_r+0x9a>
 800936e:	4621      	mov	r1, r4
 8009370:	4630      	mov	r0, r6
 8009372:	f000 fa05 	bl	8009780 <__smakebuf_r>
 8009376:	89a0      	ldrh	r0, [r4, #12]
 8009378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800937c:	f010 0301 	ands.w	r3, r0, #1
 8009380:	d00a      	beq.n	8009398 <__swsetup_r+0xbc>
 8009382:	2300      	movs	r3, #0
 8009384:	60a3      	str	r3, [r4, #8]
 8009386:	6963      	ldr	r3, [r4, #20]
 8009388:	425b      	negs	r3, r3
 800938a:	61a3      	str	r3, [r4, #24]
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	b943      	cbnz	r3, 80093a2 <__swsetup_r+0xc6>
 8009390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009394:	d1ba      	bne.n	800930c <__swsetup_r+0x30>
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	0781      	lsls	r1, r0, #30
 800939a:	bf58      	it	pl
 800939c:	6963      	ldrpl	r3, [r4, #20]
 800939e:	60a3      	str	r3, [r4, #8]
 80093a0:	e7f4      	b.n	800938c <__swsetup_r+0xb0>
 80093a2:	2000      	movs	r0, #0
 80093a4:	e7f7      	b.n	8009396 <__swsetup_r+0xba>
 80093a6:	bf00      	nop
 80093a8:	20000064 	.word	0x20000064
 80093ac:	08009eec 	.word	0x08009eec
 80093b0:	08009f0c 	.word	0x08009f0c
 80093b4:	08009ecc 	.word	0x08009ecc

080093b8 <abort>:
 80093b8:	2006      	movs	r0, #6
 80093ba:	b508      	push	{r3, lr}
 80093bc:	f000 fa56 	bl	800986c <raise>
 80093c0:	2001      	movs	r0, #1
 80093c2:	f7f8 fb9d 	bl	8001b00 <_exit>
	...

080093c8 <__sflush_r>:
 80093c8:	898a      	ldrh	r2, [r1, #12]
 80093ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ce:	4605      	mov	r5, r0
 80093d0:	0710      	lsls	r0, r2, #28
 80093d2:	460c      	mov	r4, r1
 80093d4:	d458      	bmi.n	8009488 <__sflush_r+0xc0>
 80093d6:	684b      	ldr	r3, [r1, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dc05      	bgt.n	80093e8 <__sflush_r+0x20>
 80093dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc02      	bgt.n	80093e8 <__sflush_r+0x20>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	d0f9      	beq.n	80093e2 <__sflush_r+0x1a>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093f4:	682f      	ldr	r7, [r5, #0]
 80093f6:	602b      	str	r3, [r5, #0]
 80093f8:	d032      	beq.n	8009460 <__sflush_r+0x98>
 80093fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	075a      	lsls	r2, r3, #29
 8009400:	d505      	bpl.n	800940e <__sflush_r+0x46>
 8009402:	6863      	ldr	r3, [r4, #4]
 8009404:	1ac0      	subs	r0, r0, r3
 8009406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009408:	b10b      	cbz	r3, 800940e <__sflush_r+0x46>
 800940a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800940c:	1ac0      	subs	r0, r0, r3
 800940e:	2300      	movs	r3, #0
 8009410:	4602      	mov	r2, r0
 8009412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009414:	4628      	mov	r0, r5
 8009416:	6a21      	ldr	r1, [r4, #32]
 8009418:	47b0      	blx	r6
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	d106      	bne.n	800942e <__sflush_r+0x66>
 8009420:	6829      	ldr	r1, [r5, #0]
 8009422:	291d      	cmp	r1, #29
 8009424:	d82c      	bhi.n	8009480 <__sflush_r+0xb8>
 8009426:	4a2a      	ldr	r2, [pc, #168]	; (80094d0 <__sflush_r+0x108>)
 8009428:	40ca      	lsrs	r2, r1
 800942a:	07d6      	lsls	r6, r2, #31
 800942c:	d528      	bpl.n	8009480 <__sflush_r+0xb8>
 800942e:	2200      	movs	r2, #0
 8009430:	6062      	str	r2, [r4, #4]
 8009432:	6922      	ldr	r2, [r4, #16]
 8009434:	04d9      	lsls	r1, r3, #19
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	d504      	bpl.n	8009444 <__sflush_r+0x7c>
 800943a:	1c42      	adds	r2, r0, #1
 800943c:	d101      	bne.n	8009442 <__sflush_r+0x7a>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b903      	cbnz	r3, 8009444 <__sflush_r+0x7c>
 8009442:	6560      	str	r0, [r4, #84]	; 0x54
 8009444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009446:	602f      	str	r7, [r5, #0]
 8009448:	2900      	cmp	r1, #0
 800944a:	d0ca      	beq.n	80093e2 <__sflush_r+0x1a>
 800944c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009450:	4299      	cmp	r1, r3
 8009452:	d002      	beq.n	800945a <__sflush_r+0x92>
 8009454:	4628      	mov	r0, r5
 8009456:	f7fc fc9f 	bl	8005d98 <_free_r>
 800945a:	2000      	movs	r0, #0
 800945c:	6360      	str	r0, [r4, #52]	; 0x34
 800945e:	e7c1      	b.n	80093e4 <__sflush_r+0x1c>
 8009460:	6a21      	ldr	r1, [r4, #32]
 8009462:	2301      	movs	r3, #1
 8009464:	4628      	mov	r0, r5
 8009466:	47b0      	blx	r6
 8009468:	1c41      	adds	r1, r0, #1
 800946a:	d1c7      	bne.n	80093fc <__sflush_r+0x34>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0c4      	beq.n	80093fc <__sflush_r+0x34>
 8009472:	2b1d      	cmp	r3, #29
 8009474:	d001      	beq.n	800947a <__sflush_r+0xb2>
 8009476:	2b16      	cmp	r3, #22
 8009478:	d101      	bne.n	800947e <__sflush_r+0xb6>
 800947a:	602f      	str	r7, [r5, #0]
 800947c:	e7b1      	b.n	80093e2 <__sflush_r+0x1a>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	e7ad      	b.n	80093e4 <__sflush_r+0x1c>
 8009488:	690f      	ldr	r7, [r1, #16]
 800948a:	2f00      	cmp	r7, #0
 800948c:	d0a9      	beq.n	80093e2 <__sflush_r+0x1a>
 800948e:	0793      	lsls	r3, r2, #30
 8009490:	bf18      	it	ne
 8009492:	2300      	movne	r3, #0
 8009494:	680e      	ldr	r6, [r1, #0]
 8009496:	bf08      	it	eq
 8009498:	694b      	ldreq	r3, [r1, #20]
 800949a:	eba6 0807 	sub.w	r8, r6, r7
 800949e:	600f      	str	r7, [r1, #0]
 80094a0:	608b      	str	r3, [r1, #8]
 80094a2:	f1b8 0f00 	cmp.w	r8, #0
 80094a6:	dd9c      	ble.n	80093e2 <__sflush_r+0x1a>
 80094a8:	4643      	mov	r3, r8
 80094aa:	463a      	mov	r2, r7
 80094ac:	4628      	mov	r0, r5
 80094ae:	6a21      	ldr	r1, [r4, #32]
 80094b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094b2:	47b0      	blx	r6
 80094b4:	2800      	cmp	r0, #0
 80094b6:	dc06      	bgt.n	80094c6 <__sflush_r+0xfe>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f04f 30ff 	mov.w	r0, #4294967295
 80094be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	e78e      	b.n	80093e4 <__sflush_r+0x1c>
 80094c6:	4407      	add	r7, r0
 80094c8:	eba8 0800 	sub.w	r8, r8, r0
 80094cc:	e7e9      	b.n	80094a2 <__sflush_r+0xda>
 80094ce:	bf00      	nop
 80094d0:	20400001 	.word	0x20400001

080094d4 <_fflush_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	690b      	ldr	r3, [r1, #16]
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	b913      	cbnz	r3, 80094e4 <_fflush_r+0x10>
 80094de:	2500      	movs	r5, #0
 80094e0:	4628      	mov	r0, r5
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	b118      	cbz	r0, 80094ee <_fflush_r+0x1a>
 80094e6:	6983      	ldr	r3, [r0, #24]
 80094e8:	b90b      	cbnz	r3, 80094ee <_fflush_r+0x1a>
 80094ea:	f000 f887 	bl	80095fc <__sinit>
 80094ee:	4b14      	ldr	r3, [pc, #80]	; (8009540 <_fflush_r+0x6c>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	d11b      	bne.n	800952c <_fflush_r+0x58>
 80094f4:	686c      	ldr	r4, [r5, #4]
 80094f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0ef      	beq.n	80094de <_fflush_r+0xa>
 80094fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009500:	07d0      	lsls	r0, r2, #31
 8009502:	d404      	bmi.n	800950e <_fflush_r+0x3a>
 8009504:	0599      	lsls	r1, r3, #22
 8009506:	d402      	bmi.n	800950e <_fflush_r+0x3a>
 8009508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800950a:	f7ff fba6 	bl	8008c5a <__retarget_lock_acquire_recursive>
 800950e:	4628      	mov	r0, r5
 8009510:	4621      	mov	r1, r4
 8009512:	f7ff ff59 	bl	80093c8 <__sflush_r>
 8009516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009518:	4605      	mov	r5, r0
 800951a:	07da      	lsls	r2, r3, #31
 800951c:	d4e0      	bmi.n	80094e0 <_fflush_r+0xc>
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	059b      	lsls	r3, r3, #22
 8009522:	d4dd      	bmi.n	80094e0 <_fflush_r+0xc>
 8009524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009526:	f7ff fb99 	bl	8008c5c <__retarget_lock_release_recursive>
 800952a:	e7d9      	b.n	80094e0 <_fflush_r+0xc>
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <_fflush_r+0x70>)
 800952e:	429c      	cmp	r4, r3
 8009530:	d101      	bne.n	8009536 <_fflush_r+0x62>
 8009532:	68ac      	ldr	r4, [r5, #8]
 8009534:	e7df      	b.n	80094f6 <_fflush_r+0x22>
 8009536:	4b04      	ldr	r3, [pc, #16]	; (8009548 <_fflush_r+0x74>)
 8009538:	429c      	cmp	r4, r3
 800953a:	bf08      	it	eq
 800953c:	68ec      	ldreq	r4, [r5, #12]
 800953e:	e7da      	b.n	80094f6 <_fflush_r+0x22>
 8009540:	08009eec 	.word	0x08009eec
 8009544:	08009f0c 	.word	0x08009f0c
 8009548:	08009ecc 	.word	0x08009ecc

0800954c <std>:
 800954c:	2300      	movs	r3, #0
 800954e:	b510      	push	{r4, lr}
 8009550:	4604      	mov	r4, r0
 8009552:	e9c0 3300 	strd	r3, r3, [r0]
 8009556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800955a:	6083      	str	r3, [r0, #8]
 800955c:	8181      	strh	r1, [r0, #12]
 800955e:	6643      	str	r3, [r0, #100]	; 0x64
 8009560:	81c2      	strh	r2, [r0, #14]
 8009562:	6183      	str	r3, [r0, #24]
 8009564:	4619      	mov	r1, r3
 8009566:	2208      	movs	r2, #8
 8009568:	305c      	adds	r0, #92	; 0x5c
 800956a:	f7fc fc0d 	bl	8005d88 <memset>
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <std+0x38>)
 8009570:	6224      	str	r4, [r4, #32]
 8009572:	6263      	str	r3, [r4, #36]	; 0x24
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <std+0x3c>)
 8009576:	62a3      	str	r3, [r4, #40]	; 0x28
 8009578:	4b04      	ldr	r3, [pc, #16]	; (800958c <std+0x40>)
 800957a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800957c:	4b04      	ldr	r3, [pc, #16]	; (8009590 <std+0x44>)
 800957e:	6323      	str	r3, [r4, #48]	; 0x30
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop
 8009584:	080098a5 	.word	0x080098a5
 8009588:	080098c7 	.word	0x080098c7
 800958c:	080098ff 	.word	0x080098ff
 8009590:	08009923 	.word	0x08009923

08009594 <_cleanup_r>:
 8009594:	4901      	ldr	r1, [pc, #4]	; (800959c <_cleanup_r+0x8>)
 8009596:	f000 b8af 	b.w	80096f8 <_fwalk_reent>
 800959a:	bf00      	nop
 800959c:	080094d5 	.word	0x080094d5

080095a0 <__sfmoreglue>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	2568      	movs	r5, #104	; 0x68
 80095a4:	1e4a      	subs	r2, r1, #1
 80095a6:	4355      	muls	r5, r2
 80095a8:	460e      	mov	r6, r1
 80095aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095ae:	f7fc fc3f 	bl	8005e30 <_malloc_r>
 80095b2:	4604      	mov	r4, r0
 80095b4:	b140      	cbz	r0, 80095c8 <__sfmoreglue+0x28>
 80095b6:	2100      	movs	r1, #0
 80095b8:	e9c0 1600 	strd	r1, r6, [r0]
 80095bc:	300c      	adds	r0, #12
 80095be:	60a0      	str	r0, [r4, #8]
 80095c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095c4:	f7fc fbe0 	bl	8005d88 <memset>
 80095c8:	4620      	mov	r0, r4
 80095ca:	bd70      	pop	{r4, r5, r6, pc}

080095cc <__sfp_lock_acquire>:
 80095cc:	4801      	ldr	r0, [pc, #4]	; (80095d4 <__sfp_lock_acquire+0x8>)
 80095ce:	f7ff bb44 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 80095d2:	bf00      	nop
 80095d4:	20000c90 	.word	0x20000c90

080095d8 <__sfp_lock_release>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__sfp_lock_release+0x8>)
 80095da:	f7ff bb3f 	b.w	8008c5c <__retarget_lock_release_recursive>
 80095de:	bf00      	nop
 80095e0:	20000c90 	.word	0x20000c90

080095e4 <__sinit_lock_acquire>:
 80095e4:	4801      	ldr	r0, [pc, #4]	; (80095ec <__sinit_lock_acquire+0x8>)
 80095e6:	f7ff bb38 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 80095ea:	bf00      	nop
 80095ec:	20000c8b 	.word	0x20000c8b

080095f0 <__sinit_lock_release>:
 80095f0:	4801      	ldr	r0, [pc, #4]	; (80095f8 <__sinit_lock_release+0x8>)
 80095f2:	f7ff bb33 	b.w	8008c5c <__retarget_lock_release_recursive>
 80095f6:	bf00      	nop
 80095f8:	20000c8b 	.word	0x20000c8b

080095fc <__sinit>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	4604      	mov	r4, r0
 8009600:	f7ff fff0 	bl	80095e4 <__sinit_lock_acquire>
 8009604:	69a3      	ldr	r3, [r4, #24]
 8009606:	b11b      	cbz	r3, 8009610 <__sinit+0x14>
 8009608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800960c:	f7ff bff0 	b.w	80095f0 <__sinit_lock_release>
 8009610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009614:	6523      	str	r3, [r4, #80]	; 0x50
 8009616:	4b13      	ldr	r3, [pc, #76]	; (8009664 <__sinit+0x68>)
 8009618:	4a13      	ldr	r2, [pc, #76]	; (8009668 <__sinit+0x6c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	62a2      	str	r2, [r4, #40]	; 0x28
 800961e:	42a3      	cmp	r3, r4
 8009620:	bf08      	it	eq
 8009622:	2301      	moveq	r3, #1
 8009624:	4620      	mov	r0, r4
 8009626:	bf08      	it	eq
 8009628:	61a3      	streq	r3, [r4, #24]
 800962a:	f000 f81f 	bl	800966c <__sfp>
 800962e:	6060      	str	r0, [r4, #4]
 8009630:	4620      	mov	r0, r4
 8009632:	f000 f81b 	bl	800966c <__sfp>
 8009636:	60a0      	str	r0, [r4, #8]
 8009638:	4620      	mov	r0, r4
 800963a:	f000 f817 	bl	800966c <__sfp>
 800963e:	2200      	movs	r2, #0
 8009640:	2104      	movs	r1, #4
 8009642:	60e0      	str	r0, [r4, #12]
 8009644:	6860      	ldr	r0, [r4, #4]
 8009646:	f7ff ff81 	bl	800954c <std>
 800964a:	2201      	movs	r2, #1
 800964c:	2109      	movs	r1, #9
 800964e:	68a0      	ldr	r0, [r4, #8]
 8009650:	f7ff ff7c 	bl	800954c <std>
 8009654:	2202      	movs	r2, #2
 8009656:	2112      	movs	r1, #18
 8009658:	68e0      	ldr	r0, [r4, #12]
 800965a:	f7ff ff77 	bl	800954c <std>
 800965e:	2301      	movs	r3, #1
 8009660:	61a3      	str	r3, [r4, #24]
 8009662:	e7d1      	b.n	8009608 <__sinit+0xc>
 8009664:	08009a8c 	.word	0x08009a8c
 8009668:	08009595 	.word	0x08009595

0800966c <__sfp>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	4607      	mov	r7, r0
 8009670:	f7ff ffac 	bl	80095cc <__sfp_lock_acquire>
 8009674:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <__sfp+0x84>)
 8009676:	681e      	ldr	r6, [r3, #0]
 8009678:	69b3      	ldr	r3, [r6, #24]
 800967a:	b913      	cbnz	r3, 8009682 <__sfp+0x16>
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff ffbd 	bl	80095fc <__sinit>
 8009682:	3648      	adds	r6, #72	; 0x48
 8009684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009688:	3b01      	subs	r3, #1
 800968a:	d503      	bpl.n	8009694 <__sfp+0x28>
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	b30b      	cbz	r3, 80096d4 <__sfp+0x68>
 8009690:	6836      	ldr	r6, [r6, #0]
 8009692:	e7f7      	b.n	8009684 <__sfp+0x18>
 8009694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009698:	b9d5      	cbnz	r5, 80096d0 <__sfp+0x64>
 800969a:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <__sfp+0x88>)
 800969c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096a0:	60e3      	str	r3, [r4, #12]
 80096a2:	6665      	str	r5, [r4, #100]	; 0x64
 80096a4:	f7ff fad8 	bl	8008c58 <__retarget_lock_init_recursive>
 80096a8:	f7ff ff96 	bl	80095d8 <__sfp_lock_release>
 80096ac:	2208      	movs	r2, #8
 80096ae:	4629      	mov	r1, r5
 80096b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096b8:	6025      	str	r5, [r4, #0]
 80096ba:	61a5      	str	r5, [r4, #24]
 80096bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096c0:	f7fc fb62 	bl	8005d88 <memset>
 80096c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096cc:	4620      	mov	r0, r4
 80096ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d0:	3468      	adds	r4, #104	; 0x68
 80096d2:	e7d9      	b.n	8009688 <__sfp+0x1c>
 80096d4:	2104      	movs	r1, #4
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff ff62 	bl	80095a0 <__sfmoreglue>
 80096dc:	4604      	mov	r4, r0
 80096de:	6030      	str	r0, [r6, #0]
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d1d5      	bne.n	8009690 <__sfp+0x24>
 80096e4:	f7ff ff78 	bl	80095d8 <__sfp_lock_release>
 80096e8:	230c      	movs	r3, #12
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	e7ee      	b.n	80096cc <__sfp+0x60>
 80096ee:	bf00      	nop
 80096f0:	08009a8c 	.word	0x08009a8c
 80096f4:	ffff0001 	.word	0xffff0001

080096f8 <_fwalk_reent>:
 80096f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096fc:	4606      	mov	r6, r0
 80096fe:	4688      	mov	r8, r1
 8009700:	2700      	movs	r7, #0
 8009702:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800970a:	f1b9 0901 	subs.w	r9, r9, #1
 800970e:	d505      	bpl.n	800971c <_fwalk_reent+0x24>
 8009710:	6824      	ldr	r4, [r4, #0]
 8009712:	2c00      	cmp	r4, #0
 8009714:	d1f7      	bne.n	8009706 <_fwalk_reent+0xe>
 8009716:	4638      	mov	r0, r7
 8009718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800971c:	89ab      	ldrh	r3, [r5, #12]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d907      	bls.n	8009732 <_fwalk_reent+0x3a>
 8009722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009726:	3301      	adds	r3, #1
 8009728:	d003      	beq.n	8009732 <_fwalk_reent+0x3a>
 800972a:	4629      	mov	r1, r5
 800972c:	4630      	mov	r0, r6
 800972e:	47c0      	blx	r8
 8009730:	4307      	orrs	r7, r0
 8009732:	3568      	adds	r5, #104	; 0x68
 8009734:	e7e9      	b.n	800970a <_fwalk_reent+0x12>

08009736 <__swhatbuf_r>:
 8009736:	b570      	push	{r4, r5, r6, lr}
 8009738:	460e      	mov	r6, r1
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	4614      	mov	r4, r2
 8009740:	2900      	cmp	r1, #0
 8009742:	461d      	mov	r5, r3
 8009744:	b096      	sub	sp, #88	; 0x58
 8009746:	da07      	bge.n	8009758 <__swhatbuf_r+0x22>
 8009748:	2300      	movs	r3, #0
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	89b3      	ldrh	r3, [r6, #12]
 800974e:	061a      	lsls	r2, r3, #24
 8009750:	d410      	bmi.n	8009774 <__swhatbuf_r+0x3e>
 8009752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009756:	e00e      	b.n	8009776 <__swhatbuf_r+0x40>
 8009758:	466a      	mov	r2, sp
 800975a:	f000 f909 	bl	8009970 <_fstat_r>
 800975e:	2800      	cmp	r0, #0
 8009760:	dbf2      	blt.n	8009748 <__swhatbuf_r+0x12>
 8009762:	9a01      	ldr	r2, [sp, #4]
 8009764:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009768:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800976c:	425a      	negs	r2, r3
 800976e:	415a      	adcs	r2, r3
 8009770:	602a      	str	r2, [r5, #0]
 8009772:	e7ee      	b.n	8009752 <__swhatbuf_r+0x1c>
 8009774:	2340      	movs	r3, #64	; 0x40
 8009776:	2000      	movs	r0, #0
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	b016      	add	sp, #88	; 0x58
 800977c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009780 <__smakebuf_r>:
 8009780:	898b      	ldrh	r3, [r1, #12]
 8009782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009784:	079d      	lsls	r5, r3, #30
 8009786:	4606      	mov	r6, r0
 8009788:	460c      	mov	r4, r1
 800978a:	d507      	bpl.n	800979c <__smakebuf_r+0x1c>
 800978c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	6123      	str	r3, [r4, #16]
 8009794:	2301      	movs	r3, #1
 8009796:	6163      	str	r3, [r4, #20]
 8009798:	b002      	add	sp, #8
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	466a      	mov	r2, sp
 800979e:	ab01      	add	r3, sp, #4
 80097a0:	f7ff ffc9 	bl	8009736 <__swhatbuf_r>
 80097a4:	9900      	ldr	r1, [sp, #0]
 80097a6:	4605      	mov	r5, r0
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7fc fb41 	bl	8005e30 <_malloc_r>
 80097ae:	b948      	cbnz	r0, 80097c4 <__smakebuf_r+0x44>
 80097b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b4:	059a      	lsls	r2, r3, #22
 80097b6:	d4ef      	bmi.n	8009798 <__smakebuf_r+0x18>
 80097b8:	f023 0303 	bic.w	r3, r3, #3
 80097bc:	f043 0302 	orr.w	r3, r3, #2
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	e7e3      	b.n	800978c <__smakebuf_r+0xc>
 80097c4:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <__smakebuf_r+0x7c>)
 80097c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	6020      	str	r0, [r4, #0]
 80097cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d0:	81a3      	strh	r3, [r4, #12]
 80097d2:	9b00      	ldr	r3, [sp, #0]
 80097d4:	6120      	str	r0, [r4, #16]
 80097d6:	6163      	str	r3, [r4, #20]
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	b15b      	cbz	r3, 80097f4 <__smakebuf_r+0x74>
 80097dc:	4630      	mov	r0, r6
 80097de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097e2:	f000 f8d7 	bl	8009994 <_isatty_r>
 80097e6:	b128      	cbz	r0, 80097f4 <__smakebuf_r+0x74>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	f023 0303 	bic.w	r3, r3, #3
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	89a0      	ldrh	r0, [r4, #12]
 80097f6:	4305      	orrs	r5, r0
 80097f8:	81a5      	strh	r5, [r4, #12]
 80097fa:	e7cd      	b.n	8009798 <__smakebuf_r+0x18>
 80097fc:	08009595 	.word	0x08009595

08009800 <memchr>:
 8009800:	4603      	mov	r3, r0
 8009802:	b510      	push	{r4, lr}
 8009804:	b2c9      	uxtb	r1, r1
 8009806:	4402      	add	r2, r0
 8009808:	4293      	cmp	r3, r2
 800980a:	4618      	mov	r0, r3
 800980c:	d101      	bne.n	8009812 <memchr+0x12>
 800980e:	2000      	movs	r0, #0
 8009810:	e003      	b.n	800981a <memchr+0x1a>
 8009812:	7804      	ldrb	r4, [r0, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	428c      	cmp	r4, r1
 8009818:	d1f6      	bne.n	8009808 <memchr+0x8>
 800981a:	bd10      	pop	{r4, pc}

0800981c <_raise_r>:
 800981c:	291f      	cmp	r1, #31
 800981e:	b538      	push	{r3, r4, r5, lr}
 8009820:	4604      	mov	r4, r0
 8009822:	460d      	mov	r5, r1
 8009824:	d904      	bls.n	8009830 <_raise_r+0x14>
 8009826:	2316      	movs	r3, #22
 8009828:	6003      	str	r3, [r0, #0]
 800982a:	f04f 30ff 	mov.w	r0, #4294967295
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009832:	b112      	cbz	r2, 800983a <_raise_r+0x1e>
 8009834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009838:	b94b      	cbnz	r3, 800984e <_raise_r+0x32>
 800983a:	4620      	mov	r0, r4
 800983c:	f000 f830 	bl	80098a0 <_getpid_r>
 8009840:	462a      	mov	r2, r5
 8009842:	4601      	mov	r1, r0
 8009844:	4620      	mov	r0, r4
 8009846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800984a:	f000 b817 	b.w	800987c <_kill_r>
 800984e:	2b01      	cmp	r3, #1
 8009850:	d00a      	beq.n	8009868 <_raise_r+0x4c>
 8009852:	1c59      	adds	r1, r3, #1
 8009854:	d103      	bne.n	800985e <_raise_r+0x42>
 8009856:	2316      	movs	r3, #22
 8009858:	6003      	str	r3, [r0, #0]
 800985a:	2001      	movs	r0, #1
 800985c:	e7e7      	b.n	800982e <_raise_r+0x12>
 800985e:	2400      	movs	r4, #0
 8009860:	4628      	mov	r0, r5
 8009862:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009866:	4798      	blx	r3
 8009868:	2000      	movs	r0, #0
 800986a:	e7e0      	b.n	800982e <_raise_r+0x12>

0800986c <raise>:
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <raise+0xc>)
 800986e:	4601      	mov	r1, r0
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	f7ff bfd3 	b.w	800981c <_raise_r>
 8009876:	bf00      	nop
 8009878:	20000064 	.word	0x20000064

0800987c <_kill_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	2300      	movs	r3, #0
 8009880:	4d06      	ldr	r5, [pc, #24]	; (800989c <_kill_r+0x20>)
 8009882:	4604      	mov	r4, r0
 8009884:	4608      	mov	r0, r1
 8009886:	4611      	mov	r1, r2
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	f7f8 f929 	bl	8001ae0 <_kill>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	d102      	bne.n	8009898 <_kill_r+0x1c>
 8009892:	682b      	ldr	r3, [r5, #0]
 8009894:	b103      	cbz	r3, 8009898 <_kill_r+0x1c>
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	bd38      	pop	{r3, r4, r5, pc}
 800989a:	bf00      	nop
 800989c:	20000c84 	.word	0x20000c84

080098a0 <_getpid_r>:
 80098a0:	f7f8 b917 	b.w	8001ad2 <_getpid>

080098a4 <__sread>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	460c      	mov	r4, r1
 80098a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ac:	f000 f894 	bl	80099d8 <_read_r>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	bfab      	itete	ge
 80098b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098b6:	89a3      	ldrhlt	r3, [r4, #12]
 80098b8:	181b      	addge	r3, r3, r0
 80098ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098be:	bfac      	ite	ge
 80098c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80098c2:	81a3      	strhlt	r3, [r4, #12]
 80098c4:	bd10      	pop	{r4, pc}

080098c6 <__swrite>:
 80098c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	461f      	mov	r7, r3
 80098cc:	898b      	ldrh	r3, [r1, #12]
 80098ce:	4605      	mov	r5, r0
 80098d0:	05db      	lsls	r3, r3, #23
 80098d2:	460c      	mov	r4, r1
 80098d4:	4616      	mov	r6, r2
 80098d6:	d505      	bpl.n	80098e4 <__swrite+0x1e>
 80098d8:	2302      	movs	r3, #2
 80098da:	2200      	movs	r2, #0
 80098dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e0:	f000 f868 	bl	80099b4 <_lseek_r>
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	4632      	mov	r2, r6
 80098e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	4628      	mov	r0, r5
 80098f0:	463b      	mov	r3, r7
 80098f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fa:	f000 b817 	b.w	800992c <_write_r>

080098fe <__sseek>:
 80098fe:	b510      	push	{r4, lr}
 8009900:	460c      	mov	r4, r1
 8009902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009906:	f000 f855 	bl	80099b4 <_lseek_r>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	bf15      	itete	ne
 8009910:	6560      	strne	r0, [r4, #84]	; 0x54
 8009912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800991a:	81a3      	strheq	r3, [r4, #12]
 800991c:	bf18      	it	ne
 800991e:	81a3      	strhne	r3, [r4, #12]
 8009920:	bd10      	pop	{r4, pc}

08009922 <__sclose>:
 8009922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009926:	f000 b813 	b.w	8009950 <_close_r>
	...

0800992c <_write_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	2200      	movs	r2, #0
 8009936:	4d05      	ldr	r5, [pc, #20]	; (800994c <_write_r+0x20>)
 8009938:	602a      	str	r2, [r5, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	f7f8 f907 	bl	8001b4e <_write>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_write_r+0x1e>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_write_r+0x1e>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	20000c84 	.word	0x20000c84

08009950 <_close_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	2300      	movs	r3, #0
 8009954:	4d05      	ldr	r5, [pc, #20]	; (800996c <_close_r+0x1c>)
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	f7f8 f913 	bl	8001b86 <_close>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_close_r+0x1a>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_close_r+0x1a>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20000c84 	.word	0x20000c84

08009970 <_fstat_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	2300      	movs	r3, #0
 8009974:	4d06      	ldr	r5, [pc, #24]	; (8009990 <_fstat_r+0x20>)
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	f7f8 f90d 	bl	8001b9c <_fstat>
 8009982:	1c43      	adds	r3, r0, #1
 8009984:	d102      	bne.n	800998c <_fstat_r+0x1c>
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	b103      	cbz	r3, 800998c <_fstat_r+0x1c>
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	bd38      	pop	{r3, r4, r5, pc}
 800998e:	bf00      	nop
 8009990:	20000c84 	.word	0x20000c84

08009994 <_isatty_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	2300      	movs	r3, #0
 8009998:	4d05      	ldr	r5, [pc, #20]	; (80099b0 <_isatty_r+0x1c>)
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	f7f8 f90b 	bl	8001bba <_isatty>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_isatty_r+0x1a>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_isatty_r+0x1a>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20000c84 	.word	0x20000c84

080099b4 <_lseek_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	2200      	movs	r2, #0
 80099be:	4d05      	ldr	r5, [pc, #20]	; (80099d4 <_lseek_r+0x20>)
 80099c0:	602a      	str	r2, [r5, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f7f8 f903 	bl	8001bce <_lseek>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_lseek_r+0x1e>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_lseek_r+0x1e>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000c84 	.word	0x20000c84

080099d8 <_read_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	2200      	movs	r2, #0
 80099e2:	4d05      	ldr	r5, [pc, #20]	; (80099f8 <_read_r+0x20>)
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f7f8 f894 	bl	8001b14 <_read>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_read_r+0x1e>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_read_r+0x1e>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	20000c84 	.word	0x20000c84

080099fc <_init>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	bf00      	nop
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr

08009a08 <_fini>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	bf00      	nop
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr
